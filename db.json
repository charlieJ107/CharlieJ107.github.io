{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/404.styl","path":"css/404.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/ayer.js","path":"js/ayer.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/jquery.justifiedGallery.min.js","path":"js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/pace.min.js","path":"js/pace.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/remixicon/remixicon.woff2","path":"css/remixicon/remixicon.woff2","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/remixicon/remixicon.woff","path":"css/remixicon/remixicon.woff","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/forrestgump.png","path":"images/forrestgump.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/remixicon/remixicon.ttf","path":"css/remixicon/remixicon.ttf","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/remixicon/remixicon.eot","path":"css/remixicon/remixicon.eot","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/remixicon/remixicon.symbol.svg","path":"css/remixicon/remixicon.symbol.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/remixicon/remixicon.svg","path":"css/remixicon/remixicon.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"6e7618aa8d8d0bd2b3f2aec3dfc677f819e8c305","modified":1588695379217},{"_id":"themes/ayer/.gitignore","hash":"f92a56c0c64924ec4c40b3e29c25198aafdd17b8","modified":1588695379217},{"_id":"themes/ayer/.stylintrc","hash":"557d72b4dcd86e66fc5c688595288cf06b12ce6c","modified":1588695379217},{"_id":"themes/ayer/.travis.yml","hash":"c4bbefb55e020855b98b59657ef0a2816aa97add","modified":1588695379217},{"_id":"themes/ayer/LICENSE","hash":"064037836065f908ffa619cbdae26dea2989ebeb","modified":1588695379217},{"_id":"themes/ayer/README.md","hash":"a1dfe8f3bd8bf844bbedea25b164144f2ce67585","modified":1588695379217},{"_id":"themes/ayer/logo.png","hash":"94ede98236a9506e41b39493f72ef2f457858e41","modified":1588695379221},{"_id":"themes/ayer/package.json","hash":"e32a5cf74dec0beccffebcd0288b8cc64389b3a6","modified":1588695379221},{"_id":"source/_posts/( 也许是 ) 全世界第一份在RaspberryPi4上安装ROS的教程.md","hash":"e0c4909874ba881f73650d266bb356106eb54615","modified":1588695379217},{"_id":"source/_posts/2019年各大高校自主招生政策解读.md","hash":"e020bab401737f02a53f0750e6ee2d9e0567a515","modified":1588695379217},{"_id":"source/_posts/C++迭代器.md","hash":"529afae5e14393c51676448da0489b2319b0d7a8","modified":1588695779354},{"_id":"source/_posts/Crazy Install  ROS melodic on Raspberry Pi 4 with Ubuntu Server 1910.md","hash":"68fd7e51ef7646daa147c90a6cc101c9516058b2","modified":1588695379217},{"_id":"source/_posts/Hello, World!.md","hash":"02e99c16cf3701e4acb4fb7e3a6b171e3d87277b","modified":1588695379217},{"_id":"source/_posts/ROS安装时的raw.gihubusercontent.com连不上咋办.md","hash":"dd5f7aab6fd4757fe487d689bd8b99378b545b6b","modified":1588695379217},{"_id":"source/_posts/Run-ROS-on-Multiple-Machines.md","hash":"5dc8755916352ba17ad6b10d5e23e7d03b432af7","modified":1588695379217},{"_id":"source/_posts/std-vector.md","hash":"0f6f0a288f096403ee3bdca03d917d08875c29db","modified":1588695379217},{"_id":"source/_posts/关于我们这个机器人队.md","hash":"218aa58a5bdc59ffcb4307b85813d44e4cc8eb26","modified":1588695379217},{"_id":"source/_posts/小米路由器不安装客户端的访问方法.md","hash":"b0d39fa7291da42b0b956bf406b0770927d15b2d","modified":1588695379217},{"_id":"source/_posts/浅谈ASP.Net Core 依赖关系注入.md","hash":"a2b20e809535df0dd854ae771b56df8e0a989472","modified":1588695911291},{"_id":"source/about/index.md","hash":"94375e2e923b5b3de88ca5a58fbf22dae6a243c8","modified":1588695379217},{"_id":"source/categories/index.md","hash":"da5117832287dcda07669a9bd671666cbb9dd74a","modified":1588695379217},{"_id":"source/gallery/index.md","hash":"8d55abb69a4189fdb29d238c7dfb959b40d07002","modified":1588695379217},{"_id":"source/tags/index.md","hash":"0b365620d7161dc3a9b83ac625cf8f1682b54cd9","modified":1588695379217},{"_id":"themes/ayer/.github/FUNDING.yml","hash":"85381e9e2d3b868fb4a8a4339bcb7531690d073e","modified":1588695379217},{"_id":"themes/ayer/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1588695379217},{"_id":"themes/ayer/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1588695379217},{"_id":"themes/ayer/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1588695379217},{"_id":"themes/ayer/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1588695379217},{"_id":"themes/ayer/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1588695379217},{"_id":"themes/ayer/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1588695379217},{"_id":"themes/ayer/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1588695379217},{"_id":"themes/ayer/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1588695379217},{"_id":"themes/ayer/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1588695379217},{"_id":"themes/ayer/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1588695379217},{"_id":"themes/ayer/languages/zh-CN.yml","hash":"1ef52d096f074d88399ef1fa80d2f78a81d4b83c","modified":1588695379217},{"_id":"themes/ayer/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1588695379217},{"_id":"themes/ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1588695379221},{"_id":"themes/ayer/layout/categories.ejs","hash":"673e8cb93639525c08ee0b0cb9db44b3a628960c","modified":1588695379221},{"_id":"themes/ayer/layout/index.ejs","hash":"77347cbb8635611d8b1fb84bde75f9dedaf8632d","modified":1588695379221},{"_id":"themes/ayer/layout/layout.ejs","hash":"d839ac4765880aad8dc97db908dae652796e3cff","modified":1588695379221},{"_id":"themes/ayer/layout/page.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1588695379221},{"_id":"themes/ayer/layout/post.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1588695379221},{"_id":"themes/ayer/layout/tags.ejs","hash":"88b34dd8d7b1e64fa27aa6ed72af996cf6700809","modified":1588695379221},{"_id":"themes/ayer/scripts/default_config.js","hash":"f66d38c4050bcc989f20a1503a9a6f8e1553c983","modified":1588695379221},{"_id":"themes/ayer/source/404.html","hash":"788929fab7b99dd74575399f41cddae6f63ce1f4","modified":1588695379221},{"_id":"themes/ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1588695379233},{"_id":"themes/ayer/layout/_partial/after-footer.ejs","hash":"49a6d44d6ee80f54f52dbe66af7729133316ae15","modified":1588695379217},{"_id":"themes/ayer/layout/_partial/archive-post.ejs","hash":"9be7173badcca6582c1136204adb3aa432aada21","modified":1588695379217},{"_id":"themes/ayer/layout/_partial/archive.ejs","hash":"a7065fad7532c5f727e8d0e18771616fea662944","modified":1588695379217},{"_id":"themes/ayer/layout/_partial/article.ejs","hash":"5ad62ff4c6c8481078d9d37abc0d7dd4e6d2a9f5","modified":1588695379217},{"_id":"themes/ayer/layout/_partial/ayer.ejs","hash":"5285576a1dff353bb8e2eb56de5103982251d60b","modified":1588695379217},{"_id":"themes/ayer/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1588695379217},{"_id":"themes/ayer/layout/_partial/footer.ejs","hash":"311aaf7345edabcf01116c0bbec75c91817b28a4","modified":1588695379217},{"_id":"themes/ayer/layout/_partial/google-analytics.ejs","hash":"5b389110f4d3b727c33c48f088a8bc7f8b577d19","modified":1588695379217},{"_id":"themes/ayer/layout/_partial/head.ejs","hash":"c2314b4eceffc633637e2ebf96fa2c1d2e033105","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/mathjax.ejs","hash":"4d633c6cc375a0c81fe0ed2a114b1ac4c3cec2d9","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/modal.ejs","hash":"cf441365eff1f8143e3c9ae54954d0ebe0a358e5","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/sidebar.ejs","hash":"e3b411aef6e5f25f6c5c66b93d653ef70da8d4af","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/totop.ejs","hash":"9075ecf308ca4a1db0b6f6d3c6064a6d7ef28512","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/viewer.ejs","hash":"bae69921b34a9f2c5060ed0804ffec9c89a9882b","modified":1588695379221},{"_id":"themes/ayer/scripts/filters/index.js","hash":"e435b782178da75656f9616c7af564fb9ff0de50","modified":1588695379221},{"_id":"themes/ayer/scripts/filters/meta_generator.js","hash":"8b3435c4312516dcc266c6b9b8d156a000ca700d","modified":1588695379221},{"_id":"themes/ayer/scripts/helpers/ayer-plus-vendors.js","hash":"7b3df58faaa875d17afbf74ddef5601116f2ce3d","modified":1588695379221},{"_id":"themes/ayer/scripts/helpers/wordcount.js","hash":"f9c8fceb2130929b8f11e22b1c3476c99d1574a8","modified":1588695379221},{"_id":"themes/ayer/scripts/lib/core.js","hash":"7908a82a86d63f35c6f785cacb1cfaf99ae7e0f9","modified":1588695379221},{"_id":"themes/ayer/source/css/404.styl","hash":"14b2fec2da86081f0545732552aa5f07b545c19a","modified":1588695379221},{"_id":"themes/ayer/source/css/_extend.styl","hash":"8dedef428b6ac7d629e1d1f6039b0f60dacc4c5e","modified":1588695379221},{"_id":"themes/ayer/source/css/_mixins.styl","hash":"6959409df2dd0a1ca05be0c0e9b2a884efdfb82d","modified":1588695379221},{"_id":"themes/ayer/source/css/_normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1588695379221},{"_id":"themes/ayer/source/css/_variables.styl","hash":"910dd0682971a616e1610daec23e7ff5a556df98","modified":1588695379221},{"_id":"themes/ayer/source/css/style.styl","hash":"c221f5e09c8b59a496c86526f10fd384ba0782cb","modified":1588695379233},{"_id":"themes/ayer/source/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1588695379233},{"_id":"themes/ayer/source/images/ayer-side.svg","hash":"bf0fc3e052e60c2a10d9dffa7b746358c4c33d6a","modified":1588695379233},{"_id":"themes/ayer/source/images/ayer.png","hash":"94ede98236a9506e41b39493f72ef2f457858e41","modified":1588695379233},{"_id":"themes/ayer/source/images/ayer.svg","hash":"1c87519aec678f95895c8480ddf44b371479f2f5","modified":1588695379233},{"_id":"themes/ayer/source/images/cover7.jpg","hash":"27e67d0ac848efa0f0195352a4b14a2f108565bf","modified":1588695379245},{"_id":"themes/ayer/source/images/forkme.png","hash":"b43e6e18b84edc40636204aa0eb9f266ef54a4e7","modified":1588695379245},{"_id":"themes/ayer/source/js/ayer.js","hash":"691b842cd3cae5fffa6aa56c64a6ba567ff2db96","modified":1588695379245},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1588695379245},{"_id":"themes/ayer/source/js/jquery.justifiedGallery.min.js","hash":"73b9373cd80bdbf77e711818095f3f120a019547","modified":1588695379245},{"_id":"themes/ayer/source/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1588695379245},{"_id":"themes/ayer/source/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1588695379245},{"_id":"themes/ayer/source/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1588695379245},{"_id":"themes/ayer/source/js/share.js","hash":"4e7b425356244bd9c5650ff25c2d4473e448d4c7","modified":1588695379245},{"_id":"themes/ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1588695379249},{"_id":"themes/ayer/screenshots/hexo-theme-ayer.png","hash":"265e0aaad0962caf7a7cae5ce98f1390c6716592","modified":1588695379221},{"_id":"themes/ayer/source/css/_remixicon.styl","hash":"87fe3be7e52de69fdd5a9a4bb9e8d99c1c804c9e","modified":1588695379221},{"_id":"themes/ayer/source/fancybox/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1588695379233},{"_id":"themes/ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1588695379237},{"_id":"themes/ayer/source/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1588695379245},{"_id":"themes/ayer/layout/_partial/post/albums.ejs","hash":"acb6d9628b7a2de4f32a84c6f652ac7207d14517","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/busuanzi.ejs","hash":"2e8836ce04ef22cf8d9ba228363f5b050cd0da03","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/category.ejs","hash":"85f0ebeceee1c32623bfa1e4170dbe1e34442fea","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/gallery.ejs","hash":"5f8487fe7bed9a09001c6655244ff35f583cf1eb","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/gitalk.ejs","hash":"83d8e78f5463aa00c5a7ea939fd044765c8e8d2a","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/justifiedGallery.ejs","hash":"17ccb9fc394d11412619a153997bb87650799c6e","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/nav.ejs","hash":"e59198918e92ef92156aeefbf6023584ac1cae64","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/search.ejs","hash":"2c9d19d1685e834aa2020998da2a2d259ce9b9ff","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/share.ejs","hash":"0a364766931f48df60b7c92fec8fde1067a93e00","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/title.ejs","hash":"f0d33ad99a924d48d9e59427a9b99df7606905ee","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/tocbot.ejs","hash":"9898b0dd9237e21908ba40292a8a9f947bed44d2","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/topping.ejs","hash":"f38faa84eb1b2aa47ac897b27fc2222eaaf83d2e","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/valine.ejs","hash":"6250f3c87a4bf3d437291128c7e60608cf807e10","modified":1588695379221},{"_id":"themes/ayer/layout/_partial/post/word.ejs","hash":"4a255a8eb9ed8aa9d69a1ad05cb23b385c7fe02f","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/albums.styl","hash":"0659d5f7469f24a415354ff767d949926465d515","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/apple.styl","hash":"e06dce604cc58ec39d677e4e59910c2725684901","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/archive.styl","hash":"3e61c25e6ae9a25196c6d904731cf6821c950341","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/article.styl","hash":"e35354b75f5101c768061c30e275b9cc924a45a7","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/articles.styl","hash":"39a0bc6c5cf85f0527d6ee81f6feebce8550c1dd","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/ayer.styl","hash":"ba60927da23bc78380da026af365dffeb1bb1f68","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/categories.styl","hash":"67f4824419c497e54469094f239978dd888a9706","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/float.styl","hash":"d888df89a172e4c8119cb8740fc1eae1a9539157","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/footer.styl","hash":"0384890ec33e8e710edcf4fc60d37ca82a499343","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/gallery.styl","hash":"7bdc2c9fb4971dbd7511c5cbb69bd611f20db591","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/gitalk.styl","hash":"3706eef2e0541493f1679a30241d279e29dfdc17","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/highlight.styl","hash":"e894b3a1aff76e84137e1e6db59a75afd0a53f52","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/justifiedGallery.styl","hash":"e7b5784ffd501f98216a717f876f2adb23fa5cd9","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/layout.styl","hash":"1d24e74260340bba52b921a137bc9fe30c7b377e","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/lists.styl","hash":"da8a82a48852411c10e279dfee43038d46f4f273","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/mobile.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/navbar.styl","hash":"bc477e4905ab88da711e0049ac3866dd1f88f80a","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/pace.styl","hash":"bde7bf3577c66a3ac829410d52fa2144212282ef","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/reward.styl","hash":"cde3b6af618e530a70bc8f37912e33822c721e52","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/search.styl","hash":"f81076fc6d4a83be3371bcb79ab54d88e2605714","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/share.styl","hash":"9ce2dd3ffdc4e170dfcb975a7158f913bc40b8d8","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/sidebar.styl","hash":"600c70f1de82da5223af290d47a583f9c379d188","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/tag.styl","hash":"87df748185edfba222c3f9a4b9ef8eee0e8e5ad3","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/tocbot.styl","hash":"2031db5cb7bb77f263d0d83d24b76d7a5a20e0b8","modified":1588695379221},{"_id":"themes/ayer/source/css/_partial/totop.styl","hash":"4bae031b6852384666cdf36e98c6bbbba1281453","modified":1588695379221},{"_id":"themes/ayer/source/images/cover6.jpg","hash":"46942a4d90cac9ef8f33ae3e83ccf9aa7190bed6","modified":1588695379245},{"_id":"themes/ayer/source/css/remixicon/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1588695379233},{"_id":"themes/ayer/source/css/remixicon/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1588695379233},{"_id":"themes/ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1588695379237},{"_id":"themes/ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1588695379237},{"_id":"themes/ayer/source/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1588695379245},{"_id":"themes/ayer/source/css/remixicon/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1588695379233},{"_id":"themes/ayer/source/css/remixicon/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1588695379225},{"_id":"themes/ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1588695379241},{"_id":"themes/ayer/source/css/remixicon/remixicon.symbol.svg","hash":"6e2acb000cfdfcd5c32ed643413f9802e21a0222","modified":1588695379229},{"_id":"themes/ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1588695379245},{"_id":"themes/ayer/source/css/remixicon/remixicon.svg","hash":"94144debfb5761d37d79336a10ef674f82baec1b","modified":1588695379229},{"_id":"public/search.xml","hash":"ea86a90414c001a7aa616a78f620925a2b1e1789","modified":1588696050351},{"_id":"public/atom.xml","hash":"158cfc720d3ccf01b9997e8bcf3d9554353f65ab","modified":1588696050351},{"_id":"public/Tuorial/C++迭代器.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/Tuorial/浅谈ASP.Net Core 依赖关系注入.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/Other/std-vector.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/Tutorial/Run-ROS-on-Multiple-Machines.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/Experience/小米路由器不安装客户端的访问方法.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/Publicity/关于我们这个机器人队.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/Tutorial/( 也许是 ) 全世界第一份在RaspberryPi4上安装ROS的教程.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/Experience/Crazy Install  ROS melodic on Raspberry Pi 4 with Ubuntu Server 1910.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/Experience/ROS安装时的raw.gihubusercontent.com连不上咋办.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/Other/2019年各大高校自主招生政策解读.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/Other/Hello, World!.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/archives/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588696050351},{"_id":"public/about/index.html","hash":"6b8d4512c9cab6ce5f5cd4eacbe0b07e108fecd4","modified":1588696050351},{"_id":"public/categories/index.html","hash":"e2547109eb7522ce86f8980d7f65fe7aff023f11","modified":1588696050351},{"_id":"public/gallery/index.html","hash":"6615e1d59859756b461421736930b5f455c18d7c","modified":1588696050351},{"_id":"public/tags/index.html","hash":"3798b2d9f37ab71bed903e6ddd22b16af3f78458","modified":1588696050351},{"_id":"public/categories/Tutorial/index.html","hash":"be8f2ef4eea0009730efb2b02fedcb0bedde3a78","modified":1588696050351},{"_id":"public/categories/Other/index.html","hash":"0e01dc21f4216385d37184c52f0fd23bd746d34d","modified":1588696050351},{"_id":"public/categories/Tuorial/index.html","hash":"ed948e44ced9d49a30b0c7987d55b7ce2082654b","modified":1588696050351},{"_id":"public/categories/Experience/index.html","hash":"e3cc0f4d032349d264ff86ff771664252481ff09","modified":1588696050351},{"_id":"public/categories/Publicity/index.html","hash":"23e78121085d8c4c0dfabeba3bd5f66e54f6855a","modified":1588696050351},{"_id":"public/tags/ROS/index.html","hash":"37eb7d5d69498c408c7979f4e975377b7c995e6c","modified":1588696050351},{"_id":"public/tags/Ubuntu/index.html","hash":"32f0742292e0ca8e1be5a321e2b7c1849a57afe4","modified":1588696050351},{"_id":"public/tags/Raspberry-Pi/index.html","hash":"99d2241fff399787172c10339eb741c4962bf416","modified":1588696050351},{"_id":"public/tags/自主招生/index.html","hash":"b8d3fb99f9d06a5fba44ce53ae3708d76f200b45","modified":1588696050351},{"_id":"public/tags/C/index.html","hash":"f68d7dbdda922deecba5e661bdcf077bc6ec3578","modified":1588696050351},{"_id":"public/tags/libstd/index.html","hash":"608b7a917c4b3cbcbe24df9690fce43649b9f261","modified":1588696050351},{"_id":"public/tags/Hello/index.html","hash":"b9c86a69d7b6625076c282025c025eff70a7c382","modified":1588696050351},{"_id":"public/tags/Network/index.html","hash":"e9619d8d0a053c4073748e367df9396f84d2ef98","modified":1588696050351},{"_id":"public/tags/Robotics/index.html","hash":"02c0a679edf210de0d85c00cf606e686301de957","modified":1588696050351},{"_id":"public/tags/xmu-edu-cn/index.html","hash":"ec92f042501320ab95016daee678e37f69187ab0","modified":1588696050351},{"_id":"public/tags/xmu-tuf/index.html","hash":"00a08b124421fed726ad3b396d37849cd114c44c","modified":1588696050351},{"_id":"public/tags/System/index.html","hash":"86e5518025d1a6e98976c4e58d71f29a718e7335","modified":1588696050351},{"_id":"public/tags/Win10/index.html","hash":"06ea35562b7f9d355eff78d2475498b8d9eafd18","modified":1588696050351},{"_id":"public/tags/Config/index.html","hash":"27761253e27152c3eb770fd62978df968fe70a48","modified":1588696050351},{"_id":"public/tags/ASP-Net-Core/index.html","hash":"f8b04d486a8e636eccdcd2d9245e2ec6c51cf3b1","modified":1588696050351},{"_id":"public/tags/Micorsoft/index.html","hash":"29815465647e5adeaa6d8016a4f8bb9fb2f91e20","modified":1588696050351},{"_id":"public/archives/2019/index.html","hash":"fac14342af301ee06f16e91b756b054d28212b25","modified":1588696050351},{"_id":"public/archives/2019/06/index.html","hash":"02224aab09886aef47e58176ef13c2e9e49bdcc7","modified":1588696050351},{"_id":"public/archives/2019/11/index.html","hash":"c4500ca7ade99c50325b7dbc3538c270f384a1d5","modified":1588696050351},{"_id":"public/archives/2020/index.html","hash":"28e2a3b3a6a2bc0ebf2cf117ec3e737267f0e7cc","modified":1588696050351},{"_id":"public/archives/2020/01/index.html","hash":"32e3da07a1e269d4a145f846ada6733f553b9f2e","modified":1588696050351},{"_id":"public/archives/2020/02/index.html","hash":"53898c432d078c65900b1a255427032af110266e","modified":1588696050351},{"_id":"public/archives/2020/03/index.html","hash":"896a5032c355c8d2bd40e160c5c2de000bc5003e","modified":1588696050351},{"_id":"public/archives/2020/05/index.html","hash":"efadb361428b827ab90cdb8576cb133090b9887d","modified":1588696050351},{"_id":"public/CNAME","hash":"6e7618aa8d8d0bd2b3f2aec3dfc677f819e8c305","modified":1588696050351},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1588696050351},{"_id":"public/images/ayer-side.svg","hash":"bf0fc3e052e60c2a10d9dffa7b746358c4c33d6a","modified":1588696050351},{"_id":"public/images/ayer.png","hash":"94ede98236a9506e41b39493f72ef2f457858e41","modified":1588696050351},{"_id":"public/images/ayer.svg","hash":"1c87519aec678f95895c8480ddf44b371479f2f5","modified":1588696050351},{"_id":"public/images/cover7.jpg","hash":"27e67d0ac848efa0f0195352a4b14a2f108565bf","modified":1588696050351},{"_id":"public/images/forkme.png","hash":"b43e6e18b84edc40636204aa0eb9f266ef54a4e7","modified":1588696050351},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1588696050351},{"_id":"public/css/remixicon/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1588696050351},{"_id":"public/css/remixicon/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1588696050351},{"_id":"public/css/404.css","hash":"952f9d1b869886a2940768fb7d1fd891ccea29fa","modified":1588696050351},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1588696050351},{"_id":"public/js/ayer.js","hash":"691b842cd3cae5fffa6aa56c64a6ba567ff2db96","modified":1588696050351},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1588696050351},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1588696050351},{"_id":"public/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1588696050351},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1588696050351},{"_id":"public/js/share.js","hash":"4e7b425356244bd9c5650ff25c2d4473e448d4c7","modified":1588696050351},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1588696050351},{"_id":"public/404.html","hash":"e5e428941e9097828808d40df3f7a0b8e9320417","modified":1588696050351},{"_id":"public/css/style.css","hash":"0c48662518914a455fa2ca94aaf5c0766b01aa21","modified":1588696050351},{"_id":"public/js/jquery.justifiedGallery.min.js","hash":"73b9373cd80bdbf77e711818095f3f120a019547","modified":1588696050351},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1588696050351},{"_id":"public/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1588696050351},{"_id":"public/images/cover6.jpg","hash":"46942a4d90cac9ef8f33ae3e83ccf9aa7190bed6","modified":1588696050351},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1588696050351},{"_id":"public/css/remixicon/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1588696050351},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1588696050351},{"_id":"public/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1588696050351},{"_id":"public/css/remixicon/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1588696050351},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1588696050351},{"_id":"public/css/remixicon/remixicon.symbol.svg","hash":"6e2acb000cfdfcd5c32ed643413f9802e21a0222","modified":1588696050351},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1588696050351},{"_id":"public/css/remixicon/remixicon.svg","hash":"94144debfb5761d37d79336a10ef674f82baec1b","modified":1588696050351}],"Category":[{"name":"Tutorial","_id":"ck9u4lybf0004s2s96aov8h2z"},{"name":"Other","_id":"ck9u4lybq000bs2s97apu7e7h"},{"name":"Tuorial","_id":"ck9u4lybx000gs2s9b10ee4f3"},{"name":"Experience","_id":"ck9u4lyc1000ns2s941p39lag"},{"name":"Publicity","_id":"ck9u4lycg0014s2s90dnxfvs0"}],"Data":[],"Page":[{"title":"about","type":"about","layout":"about","_content":"\n# Hello, World! \n\n​\t大家好, 我是Charlie, 是这个博客的创作人和维护人。\n\n<!--more-->\n\n​\t这个博客创建并于2019年6月8日发布第一篇文章《Hello，world！》，这是这个博客的第一篇文章，用于致敬支持我搭建起这个博客的所有的知识的发现者和创造者。\n\n​\t这是我的个人博客，纵然到了今天，已经不再有多少人拥有和使用博客，但我仍然坚信，在信息高度快餐化、碎片化的今天，一篇篇经过了深思熟虑的，或技术，或思考的文章，更能够承载起属于人类智慧的力量。\n\n​\t在此之前，我曾在我的云服务器上运行了我的第一个网站，用于服务于我高中阶段所致力于创建和维护的社团。如今，我会从此开始，走向更远的地方。\n\n​\t感谢每一个陪伴和关注的人。\n\n","source":"about/index.md","raw":"---\ntitle: about\ntype: about\nlayout: \"about\"\n---\n\n# Hello, World! \n\n​\t大家好, 我是Charlie, 是这个博客的创作人和维护人。\n\n<!--more-->\n\n​\t这个博客创建并于2019年6月8日发布第一篇文章《Hello，world！》，这是这个博客的第一篇文章，用于致敬支持我搭建起这个博客的所有的知识的发现者和创造者。\n\n​\t这是我的个人博客，纵然到了今天，已经不再有多少人拥有和使用博客，但我仍然坚信，在信息高度快餐化、碎片化的今天，一篇篇经过了深思熟虑的，或技术，或思考的文章，更能够承载起属于人类智慧的力量。\n\n​\t在此之前，我曾在我的云服务器上运行了我的第一个网站，用于服务于我高中阶段所致力于创建和维护的社团。如今，我会从此开始，走向更远的地方。\n\n​\t感谢每一个陪伴和关注的人。\n\n","date":"2020-05-05T16:16:19.217Z","updated":"2020-05-05T16:16:19.217Z","path":"about/index.html","comments":1,"_id":"ck9u4lyb80001s2s91ti0dmn9","content":"<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello, World!\"></a>Hello, World!</h1><p>​    大家好, 我是Charlie, 是这个博客的创作人和维护人。</p>\n<a id=\"more\"></a>\n\n<p>​    这个博客创建并于2019年6月8日发布第一篇文章《Hello，world！》，这是这个博客的第一篇文章，用于致敬支持我搭建起这个博客的所有的知识的发现者和创造者。</p>\n<p>​    这是我的个人博客，纵然到了今天，已经不再有多少人拥有和使用博客，但我仍然坚信，在信息高度快餐化、碎片化的今天，一篇篇经过了深思熟虑的，或技术，或思考的文章，更能够承载起属于人类智慧的力量。</p>\n<p>​    在此之前，我曾在我的云服务器上运行了我的第一个网站，用于服务于我高中阶段所致力于创建和维护的社团。如今，我会从此开始，走向更远的地方。</p>\n<p>​    感谢每一个陪伴和关注的人。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello, World!\"></a>Hello, World!</h1><p>​    大家好, 我是Charlie, 是这个博客的创作人和维护人。</p>","more":"<p>​    这个博客创建并于2019年6月8日发布第一篇文章《Hello，world！》，这是这个博客的第一篇文章，用于致敬支持我搭建起这个博客的所有的知识的发现者和创造者。</p>\n<p>​    这是我的个人博客，纵然到了今天，已经不再有多少人拥有和使用博客，但我仍然坚信，在信息高度快餐化、碎片化的今天，一篇篇经过了深思熟虑的，或技术，或思考的文章，更能够承载起属于人类智慧的力量。</p>\n<p>​    在此之前，我曾在我的云服务器上运行了我的第一个网站，用于服务于我高中阶段所致力于创建和维护的社团。如今，我会从此开始，走向更远的地方。</p>\n<p>​    感谢每一个陪伴和关注的人。</p>"},{"title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: categories\nlayout: \"categories\"\n---","date":"2020-05-05T16:16:19.217Z","updated":"2020-05-05T16:16:19.217Z","path":"categories/index.html","comments":1,"_id":"ck9u4lybd0003s2s94mi30oyu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Gallery","albums":[["img_url","img_caption"],["img_url","img_caption"]],"_content":"","source":"gallery/index.md","raw":"---\ntitle: Gallery\n\nalbums: [\n        [\"img_url\",\"img_caption\"],\n        [\"img_url\",\"img_caption\"]\n        ]\n---","date":"2020-05-05T16:16:19.217Z","updated":"2020-05-05T16:16:19.217Z","path":"gallery/index.html","comments":1,"layout":"page","_id":"ck9u4lybj0007s2s9fmad1sji","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\nlayout: \"tags\"\n---","date":"2020-05-05T16:16:19.217Z","updated":"2020-05-05T16:16:19.217Z","path":"tags/index.html","comments":1,"_id":"ck9u4lybn0009s2s9ceav92wn","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"(也许是)全世界第一份在RaspberryPi4上安装ROS-melodic的教程","date":"2019-10-31T16:00:00.000Z","_content":"##### How to install ROS - Melodic On Raspberry Pi 4 with Ubuntu Server 19.10\n<!--more-->\n\n### 失踪人口回归\n\n长期以来被学校和各种各样其他的事物压榨得奄奄一息, 一度把自己弄到抑郁. 但经过这一番奋斗, 虽然依然压力很大, 但还是希望能够留下点东西, 不然学完了就学完了, 姑且不说久不用了会不会忘, 重要的是, 总需要一点东西逼迫自己写点东西. 于是, 还是希望每周能抽出一点时间来写点东西. \n\n### 源起\n\n​\t想做一个情绪机器人, 灵感来源于超能陆战队里的大白. 但是大白的这个形象从硬件上涉及很多问题, 根据曾灿辉的说法, 几乎不可能做到. 心血来潮想要参加微软的IC, 所以就想着, 要不做个球吧. 叫做Ba Ba'll. 名字起得很随便, 总之, 这玩意儿是一个机器人. \n\n​\t基本的思想就是树莓派作为大脑, 控制高级功能, 再用一个Arduino来作为小脑, 控制运动. RaspberryPi4刚刚出来, 4GB的RAM真的很爽. 不过官方的Raspberrybian还是一个32位的操作系统, 而且作为一个教育为导向的操作系统, 总觉得太Low了. ROS也并没有为了这个版本的debian设计过. 虽然一样没有为1910的Ubuntu设计, 但好歹也是Ubuntu. \n\n​\t不过Ubuntu还是有问题. 首先, 18.04 的LTS是不支持RP4的, 这玩意儿出来的时候RP4还没出来. 如果强行刷进去的话会直接没办法进系统. 第二, 即使是19.10 (eoan) 的Ubuntu server, 还是有个惊天bug导致了整个USB不能用. 因为这个USB的芯片需要一些有特殊要求的内存空间, 但是这个内存空间没有被好好划给芯片, 被系统其他部分占用了. 这个东西已经被一个内核补丁给搞定了, 但是在我的板子上解决这个问题还要重新编译内核, 这个可能可以留给以后去解决这个问题. \n\n​\t于是就有了我们这个并不完美的环境: 一块RP4, 一根网线 ( 用来连接SSH访问命令行) , 以及电源. 外带一个预安装版本的Ubuntu server 19.10 的arm64版本. \n\n### 正片开始\n\n​\t在RP4上安装ROS有以下几个基本问题:\n\n1.  ROS是为Ubuntu设计的, 其他的发行版只是顺便支持一下. 所以Raspberrybian是别想了, 乖乖按照Ubuntu官网上的指南安装Ubuntu. 在此之前, 很多人都是在RP上装Ubuntu mate. 这个mate虽然也是基于Ubuntu, 但是难保你这个定制的桌面环境会给你整出什么幺蛾子. 当然作为一个愿意折腾的人虽然我们不怕幺蛾子, 但是第一这玩意儿很浪费时间, 第二, 你想想一旦出了幺蛾子, 你觉不觉得Ubuntu server 的相关资料要比一个小众的mate要多得多? \n2.  ROS的预编译版本是为x86的设备编译的, 虽然也有arm64的版本, 但无论是哪个预编译版本, 都只支持bionic(18.04). 这就意味着仅有19.10能支持的树莓派也别想用预编译版本了, 只能从源码编译. \n3.  正如之前所说, ROS的依赖关系检查和安装是由一个专门的工具 (`rorsdep`) 来完成的. 这玩意儿是python写的, 而Cpython的解释器是c写的. 虽然自己从源码编译理论上能够保证任何有GCC的平台就能用上ROS, 然鹅这个愚蠢的`rosdep`根本不认识刚发布不久的19.10. 你在使用`rosdep`检查和处理依赖的时候会报一堆说不认识你这个OS版本. 这就意味着你只能自己找依赖. \n\n\n\n​\t首先先记得换一下镜像源. 镜像源的问题已经老生常谈了. 网上有很多资料, 总的来说, 就是换掉`/etc/apt/source.list`里面的域名. 我原本以为这个应该是一个很简单那的东西, 但是我发现好多人根本不看版本, 直接上CSDN上面照抄, 结果一个1604的版本换了个1804的镜像源, 报了一堆错. \n\n​\t哦, 也有一堆人根本不知道镜像源是什么, 我原本以为机器人队质量会高一点, 没想到一堆人还不知道linux是啥...\n\n​\t嗯, 中国的高考制度让中国优秀的大学里充斥着90%的精通考试的学生, 但这群学生一旦遇到考试之外的东西, 完全不知道怎么下手. 而中国的大学为了保证这群学生不至于太惨, 只好调整自己的考试和考核模式, 即让考试考得好的人评价好, 而实际的工程能力和学习能力, who cares? 我非常理解这种举动, 因为大家都是这样上来的, 所有人都是既得利益者. 所以只能牺牲那极少数的, 工程OK但考试不强的, 来希图那三分之一考试比较好的人里面, 能够萌生出更极少数的, 工程能力强的人. \n\n### 官网上的能用的部分\n\n1.  安装`bootstrap`依赖. \n\n    ```bash\n    sudo apt-get install python-rosdep python-rosinstall-generator python-wstool python-rosinstall build-essential\n    ```\n\n2.  初始化 `rosdep`\n\n    ```bash\n    sudo rosdep init\n    rosdep update\n    ```\n\n3.  创建`catkin`工作区\n\n    ```bash\n    mkdir ~/ros_catkin_ws\n    cd ~/ros_catkin_ws\n    ```\n\n4.  然后用`wstool`把源码下载下来\n\n    ```bash\n    rosinstall_generator desktop --rosdistro melodic --deps --tar > melodic-desktop.rosinstall\n    wstool init -j8 src melodic-desktop.rosinstall\n    ```\n\n    这里安装的是带桌面组件的ROS melodic. 可以根据需要选择其他版本, 也可以选择命令行, 不带桌面组件. 因为目前还处在开发阶段, 等到实际跑起来的时候就不需要桌面了, 直接上命令行的 Bare Bones 版本. \n\n\n\n​\t好, 官网上能用的部分就到这儿了. 接下来按照官网上的东西会出现各种各样的问题, 我们解决问题的漫漫长路也是从这里开始的.. \n\n### 解决依赖\n\n​\t到目前为止, 按照官网上的东西都能够正常跑通. 接下来就是要解决依赖的问题了. 官网上的命令是这样的:\n\n```\nrosdep install --from-paths src --ignore-src --rosdistro melodic -y\n```\n\n\n\n到这里会报一堆错, 大概的意思就是劳资不认识你这个系统版本. 因为咱们这个系统是19.10, 它不认识是正常的. \n\n​\t这个时候我们可以先行找到一些 (有可能) 需要安装并且可以被安装的依赖, 简单来说, 看看上面告诉你什么包没找到, 就在`apt`里面安装这个包. \n\n```bash\nsudo apt install python-xxx -y\n```\n\n当然, 你就算安装了这些包, 再次跑一边检查依赖的命令还是会报同样的错误, 也许缺的包少一些了, 但问题还没有被解决. \n\n​\t我在走这一步的时候, 先后尝试了很多种花式安装, 先是用`apt`安装了一遍, 又用`pip`安装了一遍, 但是还是没有解决这个问题, 索性就不去管他, 直接开始编译. \n\n### 踩完了坑之后的做法\n\n​\t如果你根本不关心我在这个过程当中遇到的艰难险阻和朴实无华却行之有效的调试方法, 你可以直接跑一遍接下来的命令, 然后直接开始编译. \n\n​\t首先是可以用`apt`或者`pip`直接安装的: \n\n```bash\nsudo apt-get install cmake libblkid-dev e2fslibs-dev libboost-all-dev libaudit-dev libeigen3-dev python-empy liblog4cxx-dev tinyxml-dev qt5-default python-pyqt5 python-lz4 python3-lz4 liburdfdom-dev libzip2 libogre-1.9.0-dev libogre-1.9.0v5  libyaml-cpp-dev libyaml-cpp0.6  libassimp-dev assimp-utils libassimp4 python-pyassimp python3-pyassimp  python-netifaces python3-netifaces\n```\n\n然后就是有一个很尴尬的事情, 有些依赖我也不知道是哪个包出了问题, 所以索性就把所有有可能的包装上了. 我猜有一堆人不知道`apt`还有`apt search`这个命令的, 你可以试试用`apt search`一些缺的, 然后把看起来有用的都装上, 最后解决了这两个东西的依赖问题. 鉴于我也不知最后到底是哪个包起作用, 读者可以自己试着做一下. \n\n```bash\napt search lz4\napt search bzip2\napt search opencv\n```\n\n这里说一下, lz4我主要挑了一些介绍或者名字里面有ros和lz4的. 另外, bzip2应该就是libzip之类的库需要装, 所以可以不用把所有搜索出来的都装上, 有选择性地装上就可以了. \n\n有一些东西需要自己下载源码下来编译. 在此之前, 请确保自己装了git 并且配置了全局用户名. 有些系统镜像(比如docker里面的那个)过于精简, 甚至连wget都没有. 不过考虑到这是树莓派而且这是Ubuntu Server, 所以应该这些都是有的. \n\n​\t首先是可以从GitHub上面clone 源码的\n\nconsole_bridge\n\n```bash\ngit clone git://github.com/ros/console_bridge.git\ncd console_bridge\ncmake .\nmake\nsudo make install\n```\n\n\n\ngtenst\n\n```bash\nsudo apt-get install libgtest-dev\nsudo apt-get install cmake # install cmake\ncd /usr/src/gtest\nsudo cmake CMakeLists.txt\nsudo make\n```\n\ntinyxml2\n\n这个说一下, 早些年这玩意儿就是tinyxml, 后来更新了以后就是tinyxml2, tinyxml的库就没了. 但是不知道为啥这个ROS里面还有一些包用的还是旧版本的tinyxml, 值得庆幸的是旧版的tinyxml可以用`apt`安装, 所以也顺利解决了这个问题\n\n```bash\ngit clone https://github.com/leethomason/tinyxml2.git\ncd tityxml.git\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n```\n\n然后就是sip\n\n这个涉及到一个很严肃的问题: python2 今年上半年停止支持了以后, pypi干脆连Python2的sip都不支持了. 所以这个本来可以用`pip`安装的东西, 到头来却要从源码编译\n\n```bash\nwget https://www.riverbankcomputing.com/static/Downloads/sip/4.19.19/sip-4.19.19tar.gz\ntar -xvfz sip-4.19.19.tar.gz\ncd sip-4.19.19.tar.gz\npython configure.py\nsudo make\nsudo make install\n```\n\n差不多就是这些了. \n\n这个时候就可以放心大胆地继续跑官网的那个教程里面的make环节了\n\n```bash\n ./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/melodic \n```\n\n这个命令注意一下, 官网上的是没有最后那个`--instal-space`这个参数的. 这个参数主要是用来指定安装的地方, 我个人建议最好还是指定一下, 尽可能缩小不同平台之间的差距, 提高代码的可移植性. \n\n然后就是, 为了能够获得与预编译版本相似的体验, 我个人建议不要依赖官网上的编译教程, 在最后设置环境的时候, 还是按照预编译安装的那个教程, 走这个命令: \n\n```bash\necho \"source /opt/ros/melodic/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n```\n\n\n\n​\t到此为止, 整个ROS就安装好了. ","source":"_posts/( 也许是 ) 全世界第一份在RaspberryPi4上安装ROS的教程.md","raw":"---\ntitle: (也许是)全世界第一份在RaspberryPi4上安装ROS-melodic的教程 # 标题\ndate: 2019/11/1 # 时间\ncategories: # 分类\n- Tutorial\ntags: # 标签\n- ROS\n- Ubuntu\n- Raspberry Pi\n---\n##### How to install ROS - Melodic On Raspberry Pi 4 with Ubuntu Server 19.10\n<!--more-->\n\n### 失踪人口回归\n\n长期以来被学校和各种各样其他的事物压榨得奄奄一息, 一度把自己弄到抑郁. 但经过这一番奋斗, 虽然依然压力很大, 但还是希望能够留下点东西, 不然学完了就学完了, 姑且不说久不用了会不会忘, 重要的是, 总需要一点东西逼迫自己写点东西. 于是, 还是希望每周能抽出一点时间来写点东西. \n\n### 源起\n\n​\t想做一个情绪机器人, 灵感来源于超能陆战队里的大白. 但是大白的这个形象从硬件上涉及很多问题, 根据曾灿辉的说法, 几乎不可能做到. 心血来潮想要参加微软的IC, 所以就想着, 要不做个球吧. 叫做Ba Ba'll. 名字起得很随便, 总之, 这玩意儿是一个机器人. \n\n​\t基本的思想就是树莓派作为大脑, 控制高级功能, 再用一个Arduino来作为小脑, 控制运动. RaspberryPi4刚刚出来, 4GB的RAM真的很爽. 不过官方的Raspberrybian还是一个32位的操作系统, 而且作为一个教育为导向的操作系统, 总觉得太Low了. ROS也并没有为了这个版本的debian设计过. 虽然一样没有为1910的Ubuntu设计, 但好歹也是Ubuntu. \n\n​\t不过Ubuntu还是有问题. 首先, 18.04 的LTS是不支持RP4的, 这玩意儿出来的时候RP4还没出来. 如果强行刷进去的话会直接没办法进系统. 第二, 即使是19.10 (eoan) 的Ubuntu server, 还是有个惊天bug导致了整个USB不能用. 因为这个USB的芯片需要一些有特殊要求的内存空间, 但是这个内存空间没有被好好划给芯片, 被系统其他部分占用了. 这个东西已经被一个内核补丁给搞定了, 但是在我的板子上解决这个问题还要重新编译内核, 这个可能可以留给以后去解决这个问题. \n\n​\t于是就有了我们这个并不完美的环境: 一块RP4, 一根网线 ( 用来连接SSH访问命令行) , 以及电源. 外带一个预安装版本的Ubuntu server 19.10 的arm64版本. \n\n### 正片开始\n\n​\t在RP4上安装ROS有以下几个基本问题:\n\n1.  ROS是为Ubuntu设计的, 其他的发行版只是顺便支持一下. 所以Raspberrybian是别想了, 乖乖按照Ubuntu官网上的指南安装Ubuntu. 在此之前, 很多人都是在RP上装Ubuntu mate. 这个mate虽然也是基于Ubuntu, 但是难保你这个定制的桌面环境会给你整出什么幺蛾子. 当然作为一个愿意折腾的人虽然我们不怕幺蛾子, 但是第一这玩意儿很浪费时间, 第二, 你想想一旦出了幺蛾子, 你觉不觉得Ubuntu server 的相关资料要比一个小众的mate要多得多? \n2.  ROS的预编译版本是为x86的设备编译的, 虽然也有arm64的版本, 但无论是哪个预编译版本, 都只支持bionic(18.04). 这就意味着仅有19.10能支持的树莓派也别想用预编译版本了, 只能从源码编译. \n3.  正如之前所说, ROS的依赖关系检查和安装是由一个专门的工具 (`rorsdep`) 来完成的. 这玩意儿是python写的, 而Cpython的解释器是c写的. 虽然自己从源码编译理论上能够保证任何有GCC的平台就能用上ROS, 然鹅这个愚蠢的`rosdep`根本不认识刚发布不久的19.10. 你在使用`rosdep`检查和处理依赖的时候会报一堆说不认识你这个OS版本. 这就意味着你只能自己找依赖. \n\n\n\n​\t首先先记得换一下镜像源. 镜像源的问题已经老生常谈了. 网上有很多资料, 总的来说, 就是换掉`/etc/apt/source.list`里面的域名. 我原本以为这个应该是一个很简单那的东西, 但是我发现好多人根本不看版本, 直接上CSDN上面照抄, 结果一个1604的版本换了个1804的镜像源, 报了一堆错. \n\n​\t哦, 也有一堆人根本不知道镜像源是什么, 我原本以为机器人队质量会高一点, 没想到一堆人还不知道linux是啥...\n\n​\t嗯, 中国的高考制度让中国优秀的大学里充斥着90%的精通考试的学生, 但这群学生一旦遇到考试之外的东西, 完全不知道怎么下手. 而中国的大学为了保证这群学生不至于太惨, 只好调整自己的考试和考核模式, 即让考试考得好的人评价好, 而实际的工程能力和学习能力, who cares? 我非常理解这种举动, 因为大家都是这样上来的, 所有人都是既得利益者. 所以只能牺牲那极少数的, 工程OK但考试不强的, 来希图那三分之一考试比较好的人里面, 能够萌生出更极少数的, 工程能力强的人. \n\n### 官网上的能用的部分\n\n1.  安装`bootstrap`依赖. \n\n    ```bash\n    sudo apt-get install python-rosdep python-rosinstall-generator python-wstool python-rosinstall build-essential\n    ```\n\n2.  初始化 `rosdep`\n\n    ```bash\n    sudo rosdep init\n    rosdep update\n    ```\n\n3.  创建`catkin`工作区\n\n    ```bash\n    mkdir ~/ros_catkin_ws\n    cd ~/ros_catkin_ws\n    ```\n\n4.  然后用`wstool`把源码下载下来\n\n    ```bash\n    rosinstall_generator desktop --rosdistro melodic --deps --tar > melodic-desktop.rosinstall\n    wstool init -j8 src melodic-desktop.rosinstall\n    ```\n\n    这里安装的是带桌面组件的ROS melodic. 可以根据需要选择其他版本, 也可以选择命令行, 不带桌面组件. 因为目前还处在开发阶段, 等到实际跑起来的时候就不需要桌面了, 直接上命令行的 Bare Bones 版本. \n\n\n\n​\t好, 官网上能用的部分就到这儿了. 接下来按照官网上的东西会出现各种各样的问题, 我们解决问题的漫漫长路也是从这里开始的.. \n\n### 解决依赖\n\n​\t到目前为止, 按照官网上的东西都能够正常跑通. 接下来就是要解决依赖的问题了. 官网上的命令是这样的:\n\n```\nrosdep install --from-paths src --ignore-src --rosdistro melodic -y\n```\n\n\n\n到这里会报一堆错, 大概的意思就是劳资不认识你这个系统版本. 因为咱们这个系统是19.10, 它不认识是正常的. \n\n​\t这个时候我们可以先行找到一些 (有可能) 需要安装并且可以被安装的依赖, 简单来说, 看看上面告诉你什么包没找到, 就在`apt`里面安装这个包. \n\n```bash\nsudo apt install python-xxx -y\n```\n\n当然, 你就算安装了这些包, 再次跑一边检查依赖的命令还是会报同样的错误, 也许缺的包少一些了, 但问题还没有被解决. \n\n​\t我在走这一步的时候, 先后尝试了很多种花式安装, 先是用`apt`安装了一遍, 又用`pip`安装了一遍, 但是还是没有解决这个问题, 索性就不去管他, 直接开始编译. \n\n### 踩完了坑之后的做法\n\n​\t如果你根本不关心我在这个过程当中遇到的艰难险阻和朴实无华却行之有效的调试方法, 你可以直接跑一遍接下来的命令, 然后直接开始编译. \n\n​\t首先是可以用`apt`或者`pip`直接安装的: \n\n```bash\nsudo apt-get install cmake libblkid-dev e2fslibs-dev libboost-all-dev libaudit-dev libeigen3-dev python-empy liblog4cxx-dev tinyxml-dev qt5-default python-pyqt5 python-lz4 python3-lz4 liburdfdom-dev libzip2 libogre-1.9.0-dev libogre-1.9.0v5  libyaml-cpp-dev libyaml-cpp0.6  libassimp-dev assimp-utils libassimp4 python-pyassimp python3-pyassimp  python-netifaces python3-netifaces\n```\n\n然后就是有一个很尴尬的事情, 有些依赖我也不知道是哪个包出了问题, 所以索性就把所有有可能的包装上了. 我猜有一堆人不知道`apt`还有`apt search`这个命令的, 你可以试试用`apt search`一些缺的, 然后把看起来有用的都装上, 最后解决了这两个东西的依赖问题. 鉴于我也不知最后到底是哪个包起作用, 读者可以自己试着做一下. \n\n```bash\napt search lz4\napt search bzip2\napt search opencv\n```\n\n这里说一下, lz4我主要挑了一些介绍或者名字里面有ros和lz4的. 另外, bzip2应该就是libzip之类的库需要装, 所以可以不用把所有搜索出来的都装上, 有选择性地装上就可以了. \n\n有一些东西需要自己下载源码下来编译. 在此之前, 请确保自己装了git 并且配置了全局用户名. 有些系统镜像(比如docker里面的那个)过于精简, 甚至连wget都没有. 不过考虑到这是树莓派而且这是Ubuntu Server, 所以应该这些都是有的. \n\n​\t首先是可以从GitHub上面clone 源码的\n\nconsole_bridge\n\n```bash\ngit clone git://github.com/ros/console_bridge.git\ncd console_bridge\ncmake .\nmake\nsudo make install\n```\n\n\n\ngtenst\n\n```bash\nsudo apt-get install libgtest-dev\nsudo apt-get install cmake # install cmake\ncd /usr/src/gtest\nsudo cmake CMakeLists.txt\nsudo make\n```\n\ntinyxml2\n\n这个说一下, 早些年这玩意儿就是tinyxml, 后来更新了以后就是tinyxml2, tinyxml的库就没了. 但是不知道为啥这个ROS里面还有一些包用的还是旧版本的tinyxml, 值得庆幸的是旧版的tinyxml可以用`apt`安装, 所以也顺利解决了这个问题\n\n```bash\ngit clone https://github.com/leethomason/tinyxml2.git\ncd tityxml.git\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n```\n\n然后就是sip\n\n这个涉及到一个很严肃的问题: python2 今年上半年停止支持了以后, pypi干脆连Python2的sip都不支持了. 所以这个本来可以用`pip`安装的东西, 到头来却要从源码编译\n\n```bash\nwget https://www.riverbankcomputing.com/static/Downloads/sip/4.19.19/sip-4.19.19tar.gz\ntar -xvfz sip-4.19.19.tar.gz\ncd sip-4.19.19.tar.gz\npython configure.py\nsudo make\nsudo make install\n```\n\n差不多就是这些了. \n\n这个时候就可以放心大胆地继续跑官网的那个教程里面的make环节了\n\n```bash\n ./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/melodic \n```\n\n这个命令注意一下, 官网上的是没有最后那个`--instal-space`这个参数的. 这个参数主要是用来指定安装的地方, 我个人建议最好还是指定一下, 尽可能缩小不同平台之间的差距, 提高代码的可移植性. \n\n然后就是, 为了能够获得与预编译版本相似的体验, 我个人建议不要依赖官网上的编译教程, 在最后设置环境的时候, 还是按照预编译安装的那个教程, 走这个命令: \n\n```bash\necho \"source /opt/ros/melodic/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\n```\n\n\n\n​\t到此为止, 整个ROS就安装好了. ","slug":"( 也许是 ) 全世界第一份在RaspberryPi4上安装ROS的教程","published":1,"updated":"2020-05-05T16:16:19.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9u4lyaz0000s2s91cfce364","content":"<h5 id=\"How-to-install-ROS-Melodic-On-Raspberry-Pi-4-with-Ubuntu-Server-19-10\"><a href=\"#How-to-install-ROS-Melodic-On-Raspberry-Pi-4-with-Ubuntu-Server-19-10\" class=\"headerlink\" title=\"How to install ROS - Melodic On Raspberry Pi 4 with Ubuntu Server 19.10\"></a>How to install ROS - Melodic On Raspberry Pi 4 with Ubuntu Server 19.10</h5><a id=\"more\"></a>\n\n<h3 id=\"失踪人口回归\"><a href=\"#失踪人口回归\" class=\"headerlink\" title=\"失踪人口回归\"></a>失踪人口回归</h3><p>长期以来被学校和各种各样其他的事物压榨得奄奄一息, 一度把自己弄到抑郁. 但经过这一番奋斗, 虽然依然压力很大, 但还是希望能够留下点东西, 不然学完了就学完了, 姑且不说久不用了会不会忘, 重要的是, 总需要一点东西逼迫自己写点东西. 于是, 还是希望每周能抽出一点时间来写点东西. </p>\n<h3 id=\"源起\"><a href=\"#源起\" class=\"headerlink\" title=\"源起\"></a>源起</h3><p>​    想做一个情绪机器人, 灵感来源于超能陆战队里的大白. 但是大白的这个形象从硬件上涉及很多问题, 根据曾灿辉的说法, 几乎不可能做到. 心血来潮想要参加微软的IC, 所以就想着, 要不做个球吧. 叫做Ba Ba’ll. 名字起得很随便, 总之, 这玩意儿是一个机器人. </p>\n<p>​    基本的思想就是树莓派作为大脑, 控制高级功能, 再用一个Arduino来作为小脑, 控制运动. RaspberryPi4刚刚出来, 4GB的RAM真的很爽. 不过官方的Raspberrybian还是一个32位的操作系统, 而且作为一个教育为导向的操作系统, 总觉得太Low了. ROS也并没有为了这个版本的debian设计过. 虽然一样没有为1910的Ubuntu设计, 但好歹也是Ubuntu. </p>\n<p>​    不过Ubuntu还是有问题. 首先, 18.04 的LTS是不支持RP4的, 这玩意儿出来的时候RP4还没出来. 如果强行刷进去的话会直接没办法进系统. 第二, 即使是19.10 (eoan) 的Ubuntu server, 还是有个惊天bug导致了整个USB不能用. 因为这个USB的芯片需要一些有特殊要求的内存空间, 但是这个内存空间没有被好好划给芯片, 被系统其他部分占用了. 这个东西已经被一个内核补丁给搞定了, 但是在我的板子上解决这个问题还要重新编译内核, 这个可能可以留给以后去解决这个问题. </p>\n<p>​    于是就有了我们这个并不完美的环境: 一块RP4, 一根网线 ( 用来连接SSH访问命令行) , 以及电源. 外带一个预安装版本的Ubuntu server 19.10 的arm64版本. </p>\n<h3 id=\"正片开始\"><a href=\"#正片开始\" class=\"headerlink\" title=\"正片开始\"></a>正片开始</h3><p>​    在RP4上安装ROS有以下几个基本问题:</p>\n<ol>\n<li>ROS是为Ubuntu设计的, 其他的发行版只是顺便支持一下. 所以Raspberrybian是别想了, 乖乖按照Ubuntu官网上的指南安装Ubuntu. 在此之前, 很多人都是在RP上装Ubuntu mate. 这个mate虽然也是基于Ubuntu, 但是难保你这个定制的桌面环境会给你整出什么幺蛾子. 当然作为一个愿意折腾的人虽然我们不怕幺蛾子, 但是第一这玩意儿很浪费时间, 第二, 你想想一旦出了幺蛾子, 你觉不觉得Ubuntu server 的相关资料要比一个小众的mate要多得多? </li>\n<li>ROS的预编译版本是为x86的设备编译的, 虽然也有arm64的版本, 但无论是哪个预编译版本, 都只支持bionic(18.04). 这就意味着仅有19.10能支持的树莓派也别想用预编译版本了, 只能从源码编译. </li>\n<li>正如之前所说, ROS的依赖关系检查和安装是由一个专门的工具 (<code>rorsdep</code>) 来完成的. 这玩意儿是python写的, 而Cpython的解释器是c写的. 虽然自己从源码编译理论上能够保证任何有GCC的平台就能用上ROS, 然鹅这个愚蠢的<code>rosdep</code>根本不认识刚发布不久的19.10. 你在使用<code>rosdep</code>检查和处理依赖的时候会报一堆说不认识你这个OS版本. 这就意味着你只能自己找依赖. </li>\n</ol>\n<p>​    首先先记得换一下镜像源. 镜像源的问题已经老生常谈了. 网上有很多资料, 总的来说, 就是换掉<code>/etc/apt/source.list</code>里面的域名. 我原本以为这个应该是一个很简单那的东西, 但是我发现好多人根本不看版本, 直接上CSDN上面照抄, 结果一个1604的版本换了个1804的镜像源, 报了一堆错. </p>\n<p>​    哦, 也有一堆人根本不知道镜像源是什么, 我原本以为机器人队质量会高一点, 没想到一堆人还不知道linux是啥…</p>\n<p>​    嗯, 中国的高考制度让中国优秀的大学里充斥着90%的精通考试的学生, 但这群学生一旦遇到考试之外的东西, 完全不知道怎么下手. 而中国的大学为了保证这群学生不至于太惨, 只好调整自己的考试和考核模式, 即让考试考得好的人评价好, 而实际的工程能力和学习能力, who cares? 我非常理解这种举动, 因为大家都是这样上来的, 所有人都是既得利益者. 所以只能牺牲那极少数的, 工程OK但考试不强的, 来希图那三分之一考试比较好的人里面, 能够萌生出更极少数的, 工程能力强的人. </p>\n<h3 id=\"官网上的能用的部分\"><a href=\"#官网上的能用的部分\" class=\"headerlink\" title=\"官网上的能用的部分\"></a>官网上的能用的部分</h3><ol>\n<li><p>安装<code>bootstrap</code>依赖. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-rosdep python-rosinstall-generator python-wstool python-rosinstall build-essential</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化 <code>rosdep</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rosdep init</span><br><span class=\"line\">rosdep update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建<code>catkin</code>工作区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/ros_catkin_ws</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后用<code>wstool</code>把源码下载下来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosinstall_generator desktop --rosdistro melodic --deps --tar &gt; melodic-desktop.rosinstall</span><br><span class=\"line\">wstool init -j8 src melodic-desktop.rosinstall</span><br></pre></td></tr></table></figure>\n\n<p>这里安装的是带桌面组件的ROS melodic. 可以根据需要选择其他版本, 也可以选择命令行, 不带桌面组件. 因为目前还处在开发阶段, 等到实际跑起来的时候就不需要桌面了, 直接上命令行的 Bare Bones 版本. </p>\n</li>\n</ol>\n<p>​    好, 官网上能用的部分就到这儿了. 接下来按照官网上的东西会出现各种各样的问题, 我们解决问题的漫漫长路也是从这里开始的.. </p>\n<h3 id=\"解决依赖\"><a href=\"#解决依赖\" class=\"headerlink\" title=\"解决依赖\"></a>解决依赖</h3><p>​    到目前为止, 按照官网上的东西都能够正常跑通. 接下来就是要解决依赖的问题了. 官网上的命令是这样的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosdep install --from-paths src --ignore-src --rosdistro melodic -y</span><br></pre></td></tr></table></figure>\n\n\n\n<p>到这里会报一堆错, 大概的意思就是劳资不认识你这个系统版本. 因为咱们这个系统是19.10, 它不认识是正常的. </p>\n<p>​    这个时候我们可以先行找到一些 (有可能) 需要安装并且可以被安装的依赖, 简单来说, 看看上面告诉你什么包没找到, 就在<code>apt</code>里面安装这个包. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-xxx -y</span><br></pre></td></tr></table></figure>\n\n<p>当然, 你就算安装了这些包, 再次跑一边检查依赖的命令还是会报同样的错误, 也许缺的包少一些了, 但问题还没有被解决. </p>\n<p>​    我在走这一步的时候, 先后尝试了很多种花式安装, 先是用<code>apt</code>安装了一遍, 又用<code>pip</code>安装了一遍, 但是还是没有解决这个问题, 索性就不去管他, 直接开始编译. </p>\n<h3 id=\"踩完了坑之后的做法\"><a href=\"#踩完了坑之后的做法\" class=\"headerlink\" title=\"踩完了坑之后的做法\"></a>踩完了坑之后的做法</h3><p>​    如果你根本不关心我在这个过程当中遇到的艰难险阻和朴实无华却行之有效的调试方法, 你可以直接跑一遍接下来的命令, 然后直接开始编译. </p>\n<p>​    首先是可以用<code>apt</code>或者<code>pip</code>直接安装的: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install cmake libblkid-dev e2fslibs-dev libboost-all-dev libaudit-dev libeigen3-dev python-empy liblog4cxx-dev tinyxml-dev qt5-default python-pyqt5 python-lz4 python3-lz4 liburdfdom-dev libzip2 libogre-1.9.0-dev libogre-1.9.0v5  libyaml-cpp-dev libyaml-cpp0.6  libassimp-dev assimp-utils libassimp4 python-pyassimp python3-pyassimp  python-netifaces python3-netifaces</span><br></pre></td></tr></table></figure>\n\n<p>然后就是有一个很尴尬的事情, 有些依赖我也不知道是哪个包出了问题, 所以索性就把所有有可能的包装上了. 我猜有一堆人不知道<code>apt</code>还有<code>apt search</code>这个命令的, 你可以试试用<code>apt search</code>一些缺的, 然后把看起来有用的都装上, 最后解决了这两个东西的依赖问题. 鉴于我也不知最后到底是哪个包起作用, 读者可以自己试着做一下. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt search lz4</span><br><span class=\"line\">apt search bzip2</span><br><span class=\"line\">apt search opencv</span><br></pre></td></tr></table></figure>\n\n<p>这里说一下, lz4我主要挑了一些介绍或者名字里面有ros和lz4的. 另外, bzip2应该就是libzip之类的库需要装, 所以可以不用把所有搜索出来的都装上, 有选择性地装上就可以了. </p>\n<p>有一些东西需要自己下载源码下来编译. 在此之前, 请确保自己装了git 并且配置了全局用户名. 有些系统镜像(比如docker里面的那个)过于精简, 甚至连wget都没有. 不过考虑到这是树莓派而且这是Ubuntu Server, 所以应该这些都是有的. </p>\n<p>​    首先是可以从GitHub上面clone 源码的</p>\n<p>console_bridge</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/ros/console_bridge.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> console_bridge</span><br><span class=\"line\">cmake .</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>gtenst</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libgtest-dev</span><br><span class=\"line\">sudo apt-get install cmake <span class=\"comment\"># install cmake</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src/gtest</span><br><span class=\"line\">sudo cmake CMakeLists.txt</span><br><span class=\"line\">sudo make</span><br></pre></td></tr></table></figure>\n\n<p>tinyxml2</p>\n<p>这个说一下, 早些年这玩意儿就是tinyxml, 后来更新了以后就是tinyxml2, tinyxml的库就没了. 但是不知道为啥这个ROS里面还有一些包用的还是旧版本的tinyxml, 值得庆幸的是旧版的tinyxml可以用<code>apt</code>安装, 所以也顺利解决了这个问题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/leethomason/tinyxml2.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> tityxml.git</span><br><span class=\"line\">mkdir build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake ..</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>然后就是sip</p>\n<p>这个涉及到一个很严肃的问题: python2 今年上半年停止支持了以后, pypi干脆连Python2的sip都不支持了. 所以这个本来可以用<code>pip</code>安装的东西, 到头来却要从源码编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.riverbankcomputing.com/static/Downloads/sip/4.19.19/sip-4.19.19tar.gz</span><br><span class=\"line\">tar -xvfz sip-4.19.19.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> sip-4.19.19.tar.gz</span><br><span class=\"line\">python configure.py</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>差不多就是这些了. </p>\n<p>这个时候就可以放心大胆地继续跑官网的那个教程里面的make环节了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/melodic</span><br></pre></td></tr></table></figure>\n\n<p>这个命令注意一下, 官网上的是没有最后那个<code>--instal-space</code>这个参数的. 这个参数主要是用来指定安装的地方, 我个人建议最好还是指定一下, 尽可能缩小不同平台之间的差距, 提高代码的可移植性. </p>\n<p>然后就是, 为了能够获得与预编译版本相似的体验, 我个人建议不要依赖官网上的编译教程, 在最后设置环境的时候, 还是按照预编译安装的那个教程, 走这个命令: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"source /opt/ros/melodic/setup.bash\"</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    到此为止, 整个ROS就安装好了. </p>\n","site":{"data":{}},"excerpt":"<h5 id=\"How-to-install-ROS-Melodic-On-Raspberry-Pi-4-with-Ubuntu-Server-19-10\"><a href=\"#How-to-install-ROS-Melodic-On-Raspberry-Pi-4-with-Ubuntu-Server-19-10\" class=\"headerlink\" title=\"How to install ROS - Melodic On Raspberry Pi 4 with Ubuntu Server 19.10\"></a>How to install ROS - Melodic On Raspberry Pi 4 with Ubuntu Server 19.10</h5>","more":"<h3 id=\"失踪人口回归\"><a href=\"#失踪人口回归\" class=\"headerlink\" title=\"失踪人口回归\"></a>失踪人口回归</h3><p>长期以来被学校和各种各样其他的事物压榨得奄奄一息, 一度把自己弄到抑郁. 但经过这一番奋斗, 虽然依然压力很大, 但还是希望能够留下点东西, 不然学完了就学完了, 姑且不说久不用了会不会忘, 重要的是, 总需要一点东西逼迫自己写点东西. 于是, 还是希望每周能抽出一点时间来写点东西. </p>\n<h3 id=\"源起\"><a href=\"#源起\" class=\"headerlink\" title=\"源起\"></a>源起</h3><p>​    想做一个情绪机器人, 灵感来源于超能陆战队里的大白. 但是大白的这个形象从硬件上涉及很多问题, 根据曾灿辉的说法, 几乎不可能做到. 心血来潮想要参加微软的IC, 所以就想着, 要不做个球吧. 叫做Ba Ba’ll. 名字起得很随便, 总之, 这玩意儿是一个机器人. </p>\n<p>​    基本的思想就是树莓派作为大脑, 控制高级功能, 再用一个Arduino来作为小脑, 控制运动. RaspberryPi4刚刚出来, 4GB的RAM真的很爽. 不过官方的Raspberrybian还是一个32位的操作系统, 而且作为一个教育为导向的操作系统, 总觉得太Low了. ROS也并没有为了这个版本的debian设计过. 虽然一样没有为1910的Ubuntu设计, 但好歹也是Ubuntu. </p>\n<p>​    不过Ubuntu还是有问题. 首先, 18.04 的LTS是不支持RP4的, 这玩意儿出来的时候RP4还没出来. 如果强行刷进去的话会直接没办法进系统. 第二, 即使是19.10 (eoan) 的Ubuntu server, 还是有个惊天bug导致了整个USB不能用. 因为这个USB的芯片需要一些有特殊要求的内存空间, 但是这个内存空间没有被好好划给芯片, 被系统其他部分占用了. 这个东西已经被一个内核补丁给搞定了, 但是在我的板子上解决这个问题还要重新编译内核, 这个可能可以留给以后去解决这个问题. </p>\n<p>​    于是就有了我们这个并不完美的环境: 一块RP4, 一根网线 ( 用来连接SSH访问命令行) , 以及电源. 外带一个预安装版本的Ubuntu server 19.10 的arm64版本. </p>\n<h3 id=\"正片开始\"><a href=\"#正片开始\" class=\"headerlink\" title=\"正片开始\"></a>正片开始</h3><p>​    在RP4上安装ROS有以下几个基本问题:</p>\n<ol>\n<li>ROS是为Ubuntu设计的, 其他的发行版只是顺便支持一下. 所以Raspberrybian是别想了, 乖乖按照Ubuntu官网上的指南安装Ubuntu. 在此之前, 很多人都是在RP上装Ubuntu mate. 这个mate虽然也是基于Ubuntu, 但是难保你这个定制的桌面环境会给你整出什么幺蛾子. 当然作为一个愿意折腾的人虽然我们不怕幺蛾子, 但是第一这玩意儿很浪费时间, 第二, 你想想一旦出了幺蛾子, 你觉不觉得Ubuntu server 的相关资料要比一个小众的mate要多得多? </li>\n<li>ROS的预编译版本是为x86的设备编译的, 虽然也有arm64的版本, 但无论是哪个预编译版本, 都只支持bionic(18.04). 这就意味着仅有19.10能支持的树莓派也别想用预编译版本了, 只能从源码编译. </li>\n<li>正如之前所说, ROS的依赖关系检查和安装是由一个专门的工具 (<code>rorsdep</code>) 来完成的. 这玩意儿是python写的, 而Cpython的解释器是c写的. 虽然自己从源码编译理论上能够保证任何有GCC的平台就能用上ROS, 然鹅这个愚蠢的<code>rosdep</code>根本不认识刚发布不久的19.10. 你在使用<code>rosdep</code>检查和处理依赖的时候会报一堆说不认识你这个OS版本. 这就意味着你只能自己找依赖. </li>\n</ol>\n<p>​    首先先记得换一下镜像源. 镜像源的问题已经老生常谈了. 网上有很多资料, 总的来说, 就是换掉<code>/etc/apt/source.list</code>里面的域名. 我原本以为这个应该是一个很简单那的东西, 但是我发现好多人根本不看版本, 直接上CSDN上面照抄, 结果一个1604的版本换了个1804的镜像源, 报了一堆错. </p>\n<p>​    哦, 也有一堆人根本不知道镜像源是什么, 我原本以为机器人队质量会高一点, 没想到一堆人还不知道linux是啥…</p>\n<p>​    嗯, 中国的高考制度让中国优秀的大学里充斥着90%的精通考试的学生, 但这群学生一旦遇到考试之外的东西, 完全不知道怎么下手. 而中国的大学为了保证这群学生不至于太惨, 只好调整自己的考试和考核模式, 即让考试考得好的人评价好, 而实际的工程能力和学习能力, who cares? 我非常理解这种举动, 因为大家都是这样上来的, 所有人都是既得利益者. 所以只能牺牲那极少数的, 工程OK但考试不强的, 来希图那三分之一考试比较好的人里面, 能够萌生出更极少数的, 工程能力强的人. </p>\n<h3 id=\"官网上的能用的部分\"><a href=\"#官网上的能用的部分\" class=\"headerlink\" title=\"官网上的能用的部分\"></a>官网上的能用的部分</h3><ol>\n<li><p>安装<code>bootstrap</code>依赖. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-rosdep python-rosinstall-generator python-wstool python-rosinstall build-essential</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化 <code>rosdep</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rosdep init</span><br><span class=\"line\">rosdep update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建<code>catkin</code>工作区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/ros_catkin_ws</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后用<code>wstool</code>把源码下载下来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosinstall_generator desktop --rosdistro melodic --deps --tar &gt; melodic-desktop.rosinstall</span><br><span class=\"line\">wstool init -j8 src melodic-desktop.rosinstall</span><br></pre></td></tr></table></figure>\n\n<p>这里安装的是带桌面组件的ROS melodic. 可以根据需要选择其他版本, 也可以选择命令行, 不带桌面组件. 因为目前还处在开发阶段, 等到实际跑起来的时候就不需要桌面了, 直接上命令行的 Bare Bones 版本. </p>\n</li>\n</ol>\n<p>​    好, 官网上能用的部分就到这儿了. 接下来按照官网上的东西会出现各种各样的问题, 我们解决问题的漫漫长路也是从这里开始的.. </p>\n<h3 id=\"解决依赖\"><a href=\"#解决依赖\" class=\"headerlink\" title=\"解决依赖\"></a>解决依赖</h3><p>​    到目前为止, 按照官网上的东西都能够正常跑通. 接下来就是要解决依赖的问题了. 官网上的命令是这样的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosdep install --from-paths src --ignore-src --rosdistro melodic -y</span><br></pre></td></tr></table></figure>\n\n\n\n<p>到这里会报一堆错, 大概的意思就是劳资不认识你这个系统版本. 因为咱们这个系统是19.10, 它不认识是正常的. </p>\n<p>​    这个时候我们可以先行找到一些 (有可能) 需要安装并且可以被安装的依赖, 简单来说, 看看上面告诉你什么包没找到, 就在<code>apt</code>里面安装这个包. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-xxx -y</span><br></pre></td></tr></table></figure>\n\n<p>当然, 你就算安装了这些包, 再次跑一边检查依赖的命令还是会报同样的错误, 也许缺的包少一些了, 但问题还没有被解决. </p>\n<p>​    我在走这一步的时候, 先后尝试了很多种花式安装, 先是用<code>apt</code>安装了一遍, 又用<code>pip</code>安装了一遍, 但是还是没有解决这个问题, 索性就不去管他, 直接开始编译. </p>\n<h3 id=\"踩完了坑之后的做法\"><a href=\"#踩完了坑之后的做法\" class=\"headerlink\" title=\"踩完了坑之后的做法\"></a>踩完了坑之后的做法</h3><p>​    如果你根本不关心我在这个过程当中遇到的艰难险阻和朴实无华却行之有效的调试方法, 你可以直接跑一遍接下来的命令, 然后直接开始编译. </p>\n<p>​    首先是可以用<code>apt</code>或者<code>pip</code>直接安装的: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install cmake libblkid-dev e2fslibs-dev libboost-all-dev libaudit-dev libeigen3-dev python-empy liblog4cxx-dev tinyxml-dev qt5-default python-pyqt5 python-lz4 python3-lz4 liburdfdom-dev libzip2 libogre-1.9.0-dev libogre-1.9.0v5  libyaml-cpp-dev libyaml-cpp0.6  libassimp-dev assimp-utils libassimp4 python-pyassimp python3-pyassimp  python-netifaces python3-netifaces</span><br></pre></td></tr></table></figure>\n\n<p>然后就是有一个很尴尬的事情, 有些依赖我也不知道是哪个包出了问题, 所以索性就把所有有可能的包装上了. 我猜有一堆人不知道<code>apt</code>还有<code>apt search</code>这个命令的, 你可以试试用<code>apt search</code>一些缺的, 然后把看起来有用的都装上, 最后解决了这两个东西的依赖问题. 鉴于我也不知最后到底是哪个包起作用, 读者可以自己试着做一下. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt search lz4</span><br><span class=\"line\">apt search bzip2</span><br><span class=\"line\">apt search opencv</span><br></pre></td></tr></table></figure>\n\n<p>这里说一下, lz4我主要挑了一些介绍或者名字里面有ros和lz4的. 另外, bzip2应该就是libzip之类的库需要装, 所以可以不用把所有搜索出来的都装上, 有选择性地装上就可以了. </p>\n<p>有一些东西需要自己下载源码下来编译. 在此之前, 请确保自己装了git 并且配置了全局用户名. 有些系统镜像(比如docker里面的那个)过于精简, 甚至连wget都没有. 不过考虑到这是树莓派而且这是Ubuntu Server, 所以应该这些都是有的. </p>\n<p>​    首先是可以从GitHub上面clone 源码的</p>\n<p>console_bridge</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/ros/console_bridge.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> console_bridge</span><br><span class=\"line\">cmake .</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>gtenst</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libgtest-dev</span><br><span class=\"line\">sudo apt-get install cmake <span class=\"comment\"># install cmake</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src/gtest</span><br><span class=\"line\">sudo cmake CMakeLists.txt</span><br><span class=\"line\">sudo make</span><br></pre></td></tr></table></figure>\n\n<p>tinyxml2</p>\n<p>这个说一下, 早些年这玩意儿就是tinyxml, 后来更新了以后就是tinyxml2, tinyxml的库就没了. 但是不知道为啥这个ROS里面还有一些包用的还是旧版本的tinyxml, 值得庆幸的是旧版的tinyxml可以用<code>apt</code>安装, 所以也顺利解决了这个问题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/leethomason/tinyxml2.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> tityxml.git</span><br><span class=\"line\">mkdir build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake ..</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>然后就是sip</p>\n<p>这个涉及到一个很严肃的问题: python2 今年上半年停止支持了以后, pypi干脆连Python2的sip都不支持了. 所以这个本来可以用<code>pip</code>安装的东西, 到头来却要从源码编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.riverbankcomputing.com/static/Downloads/sip/4.19.19/sip-4.19.19tar.gz</span><br><span class=\"line\">tar -xvfz sip-4.19.19.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> sip-4.19.19.tar.gz</span><br><span class=\"line\">python configure.py</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>差不多就是这些了. </p>\n<p>这个时候就可以放心大胆地继续跑官网的那个教程里面的make环节了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/melodic</span><br></pre></td></tr></table></figure>\n\n<p>这个命令注意一下, 官网上的是没有最后那个<code>--instal-space</code>这个参数的. 这个参数主要是用来指定安装的地方, 我个人建议最好还是指定一下, 尽可能缩小不同平台之间的差距, 提高代码的可移植性. </p>\n<p>然后就是, 为了能够获得与预编译版本相似的体验, 我个人建议不要依赖官网上的编译教程, 在最后设置环境的时候, 还是按照预编译安装的那个教程, 走这个命令: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"source /opt/ros/melodic/setup.bash\"</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    到此为止, 整个ROS就安装好了. </p>"},{"title":"2019年各大高校自主招生政策解读","date":"2019-06-07T16:00:00.000Z","_content":" 2019年各大高校的自主招生工作正在进行, 目前已有半数高校已经发布了自主招生简章. 笔者作为曾经的自主招生的受益者 , 同时作为各位考生忠实的陪伴者, 在此对截止目前公布的各大高校的自主招生简章进行粗浅的解读, 仅供参考.\n\n<!--more-->\n### 进行自招的学校数量没有太大变化. \n\n目前已经公布自主招生简章的学校包括但不限于北京科技大学, 北京化工大学, 北京邮电大学, 北京林业大学, 北京中医药大学, 北京师范大学, 北京语言大学, 中国传媒大学, 对外经贸大学, 武汉大学, 厦门大学, 中山大学, 中南大学, 中南财经政法大学等.  \n\n​\t根据阳光高考网的公示, 今年进行自主招生的学校较往年相比没有太大变化, 厦门大学, 武汉大学等往年较为热门的自招学校都发布了自己的招生简章. \n\n### 自招政策明显收紧\n\n目前已经公布自招简章的学校当中, 大多数学校的招生政策都有较大调整, 主要呈现出以下几个特点:\n\n1. 五大学科竞赛的成为唯一必要条件, 其他各大竞赛不再作为硬性条件. \n\n   绝大多数的学校在自招简章中都明确表示, 申请参加自招的考生应当在全国数学\\物理\\化学\\生物\\信息竞赛中, 获得省级赛区二等奖以上的奖项, 一些学校甚至要求全国三等甚至二等奖. 并且包括厦门大学, 中山大学, 武汉理工大学在内的多所学校都明确五大学科竞赛的奖项是唯一必要条件. 其他竞赛不再作为申请参加自招的条件. 也就是说, 在许多学校的自招中, 五大学科竞赛的奖项将成为唯一的\"敲门砖\", 没有五大学科竞赛的获奖将在自招中被绝大多数学校拒之门外. \n\n2. 专利、论文不再作为申请的参考资料\n\n   许多学校都在自招简章中明确注明, 考生所取得的专利和论文发表不再作为申报材料. 也就是说, 专利和论文不再作为自招当中的加分项. 这可以说是杜绝了专利和论文造假的现象. \n\n3. 体测成绩将作为评审的重要参考\n\n   多个学校已经明确公布了考核方案, 其中体测作为一个重要考核项逐渐成为一个重要的参考. 多个学校已经明确注明, 体测成绩将作为考核的重要参考, 这也对考生的体质水平提出了更高要求. \n\n4. 降分幅度大幅收紧\n\n   多个学校的录取政策中, 基本上都要求考生达到高校在考生所在省份模拟投档线下20-50分, 一些曾经\"一本线录取\"等政策在今年各大高校的招生简章中消声觅迹. \n\n### 自招政策的收紧带来的三大影响\n\n可见, 今年的呃自主招生政策较往年相比大幅收紧, 对硬性指标的要求更加明确, 曾经常见的\"其他具有学科特长和创新潜质\"等条件都不再作为申请条件. 这将会给今年的自招带来至少以下几个影响. \n\n1. 一些把自招当作捷径的考生将寸步难行\n\n   自招不再是一个用来逃避高考的捷径，自招的硬性指标要求更高，对于一些特定的学科特长考核更加严格。对于硬性指标不过硬，没有相应的学科竞赛获奖，或者体质不达标的考生，在这样的政策下将寸步难行。而希图利用一些无良中介机构进行论文和专利造假的考生，在这样的政策下也将举步维艰。\n\n2. 文科生在自招中的路越来越窄\n\n   许多高校的招生政策明确五大学科竞赛成为唯一的申请条件的情况下，除非文科生在这某个学科竞赛上有较强的学科特长的体现，否则将难以在这样明显偏向理科的门槛上取得优势。\n\n3. **各种软性比赛，其他社会实践等软性能力的体现对后期竞争更为重要**\n\n   硬性指标门槛的提高，使得通过门槛的竞争者的差距急剧缩小，在基本的硬性指标的竞争力之外，各种软性指标的竞争力显得更为重要。在这种背景下，包括商赛、模联、机器人和各种社会实践活动，志愿者、义工活动等软性指标将成为重要的参考依据。当竞争者之间的其他条件相似的情况下，具有相关奖项和证书的竞争者无疑更具优势。\n\n\n\n\n\n总的来说, 在当今教育公平性愈显重要性的背景下, 自主招生作为高校在高考之外选拔具有特殊的学科特长和创新潜质的优秀学生的手段, 对申请者的基本学科能力等硬性指标和综合素质等软性指标都提出了更高的要求, 而作为申请者, 不仅要注重提高硬性指标以达到门槛, 更重要的是在综合素质和能力等软性指标上为自己积累竞争力, 才能以足够充分的准备面对新形势下的自主招生. \n\n","source":"_posts/2019年各大高校自主招生政策解读.md","raw":"---\ntitle: 2019年各大高校自主招生政策解读 # 标题\ndate: 2019/6/8 # 时间\ncategories: # 分类\n- Other\ntags: # 标签\n- 自主招生\n---\n 2019年各大高校的自主招生工作正在进行, 目前已有半数高校已经发布了自主招生简章. 笔者作为曾经的自主招生的受益者 , 同时作为各位考生忠实的陪伴者, 在此对截止目前公布的各大高校的自主招生简章进行粗浅的解读, 仅供参考.\n\n<!--more-->\n### 进行自招的学校数量没有太大变化. \n\n目前已经公布自主招生简章的学校包括但不限于北京科技大学, 北京化工大学, 北京邮电大学, 北京林业大学, 北京中医药大学, 北京师范大学, 北京语言大学, 中国传媒大学, 对外经贸大学, 武汉大学, 厦门大学, 中山大学, 中南大学, 中南财经政法大学等.  \n\n​\t根据阳光高考网的公示, 今年进行自主招生的学校较往年相比没有太大变化, 厦门大学, 武汉大学等往年较为热门的自招学校都发布了自己的招生简章. \n\n### 自招政策明显收紧\n\n目前已经公布自招简章的学校当中, 大多数学校的招生政策都有较大调整, 主要呈现出以下几个特点:\n\n1. 五大学科竞赛的成为唯一必要条件, 其他各大竞赛不再作为硬性条件. \n\n   绝大多数的学校在自招简章中都明确表示, 申请参加自招的考生应当在全国数学\\物理\\化学\\生物\\信息竞赛中, 获得省级赛区二等奖以上的奖项, 一些学校甚至要求全国三等甚至二等奖. 并且包括厦门大学, 中山大学, 武汉理工大学在内的多所学校都明确五大学科竞赛的奖项是唯一必要条件. 其他竞赛不再作为申请参加自招的条件. 也就是说, 在许多学校的自招中, 五大学科竞赛的奖项将成为唯一的\"敲门砖\", 没有五大学科竞赛的获奖将在自招中被绝大多数学校拒之门外. \n\n2. 专利、论文不再作为申请的参考资料\n\n   许多学校都在自招简章中明确注明, 考生所取得的专利和论文发表不再作为申报材料. 也就是说, 专利和论文不再作为自招当中的加分项. 这可以说是杜绝了专利和论文造假的现象. \n\n3. 体测成绩将作为评审的重要参考\n\n   多个学校已经明确公布了考核方案, 其中体测作为一个重要考核项逐渐成为一个重要的参考. 多个学校已经明确注明, 体测成绩将作为考核的重要参考, 这也对考生的体质水平提出了更高要求. \n\n4. 降分幅度大幅收紧\n\n   多个学校的录取政策中, 基本上都要求考生达到高校在考生所在省份模拟投档线下20-50分, 一些曾经\"一本线录取\"等政策在今年各大高校的招生简章中消声觅迹. \n\n### 自招政策的收紧带来的三大影响\n\n可见, 今年的呃自主招生政策较往年相比大幅收紧, 对硬性指标的要求更加明确, 曾经常见的\"其他具有学科特长和创新潜质\"等条件都不再作为申请条件. 这将会给今年的自招带来至少以下几个影响. \n\n1. 一些把自招当作捷径的考生将寸步难行\n\n   自招不再是一个用来逃避高考的捷径，自招的硬性指标要求更高，对于一些特定的学科特长考核更加严格。对于硬性指标不过硬，没有相应的学科竞赛获奖，或者体质不达标的考生，在这样的政策下将寸步难行。而希图利用一些无良中介机构进行论文和专利造假的考生，在这样的政策下也将举步维艰。\n\n2. 文科生在自招中的路越来越窄\n\n   许多高校的招生政策明确五大学科竞赛成为唯一的申请条件的情况下，除非文科生在这某个学科竞赛上有较强的学科特长的体现，否则将难以在这样明显偏向理科的门槛上取得优势。\n\n3. **各种软性比赛，其他社会实践等软性能力的体现对后期竞争更为重要**\n\n   硬性指标门槛的提高，使得通过门槛的竞争者的差距急剧缩小，在基本的硬性指标的竞争力之外，各种软性指标的竞争力显得更为重要。在这种背景下，包括商赛、模联、机器人和各种社会实践活动，志愿者、义工活动等软性指标将成为重要的参考依据。当竞争者之间的其他条件相似的情况下，具有相关奖项和证书的竞争者无疑更具优势。\n\n\n\n\n\n总的来说, 在当今教育公平性愈显重要性的背景下, 自主招生作为高校在高考之外选拔具有特殊的学科特长和创新潜质的优秀学生的手段, 对申请者的基本学科能力等硬性指标和综合素质等软性指标都提出了更高的要求, 而作为申请者, 不仅要注重提高硬性指标以达到门槛, 更重要的是在综合素质和能力等软性指标上为自己积累竞争力, 才能以足够充分的准备面对新形势下的自主招生. \n\n","slug":"2019年各大高校自主招生政策解读","published":1,"updated":"2020-05-05T16:16:19.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9u4lyba0002s2s9dxbbe8f5","content":"<p> 2019年各大高校的自主招生工作正在进行, 目前已有半数高校已经发布了自主招生简章. 笔者作为曾经的自主招生的受益者 , 同时作为各位考生忠实的陪伴者, 在此对截止目前公布的各大高校的自主招生简章进行粗浅的解读, 仅供参考.</p>\n<a id=\"more\"></a>\n<h3 id=\"进行自招的学校数量没有太大变化\"><a href=\"#进行自招的学校数量没有太大变化\" class=\"headerlink\" title=\"进行自招的学校数量没有太大变化.\"></a>进行自招的学校数量没有太大变化.</h3><p>目前已经公布自主招生简章的学校包括但不限于北京科技大学, 北京化工大学, 北京邮电大学, 北京林业大学, 北京中医药大学, 北京师范大学, 北京语言大学, 中国传媒大学, 对外经贸大学, 武汉大学, 厦门大学, 中山大学, 中南大学, 中南财经政法大学等.  </p>\n<p>​    根据阳光高考网的公示, 今年进行自主招生的学校较往年相比没有太大变化, 厦门大学, 武汉大学等往年较为热门的自招学校都发布了自己的招生简章. </p>\n<h3 id=\"自招政策明显收紧\"><a href=\"#自招政策明显收紧\" class=\"headerlink\" title=\"自招政策明显收紧\"></a>自招政策明显收紧</h3><p>目前已经公布自招简章的学校当中, 大多数学校的招生政策都有较大调整, 主要呈现出以下几个特点:</p>\n<ol>\n<li><p>五大学科竞赛的成为唯一必要条件, 其他各大竞赛不再作为硬性条件. </p>\n<p>绝大多数的学校在自招简章中都明确表示, 申请参加自招的考生应当在全国数学\\物理\\化学\\生物\\信息竞赛中, 获得省级赛区二等奖以上的奖项, 一些学校甚至要求全国三等甚至二等奖. 并且包括厦门大学, 中山大学, 武汉理工大学在内的多所学校都明确五大学科竞赛的奖项是唯一必要条件. 其他竞赛不再作为申请参加自招的条件. 也就是说, 在许多学校的自招中, 五大学科竞赛的奖项将成为唯一的”敲门砖”, 没有五大学科竞赛的获奖将在自招中被绝大多数学校拒之门外. </p>\n</li>\n<li><p>专利、论文不再作为申请的参考资料</p>\n<p>许多学校都在自招简章中明确注明, 考生所取得的专利和论文发表不再作为申报材料. 也就是说, 专利和论文不再作为自招当中的加分项. 这可以说是杜绝了专利和论文造假的现象. </p>\n</li>\n<li><p>体测成绩将作为评审的重要参考</p>\n<p>多个学校已经明确公布了考核方案, 其中体测作为一个重要考核项逐渐成为一个重要的参考. 多个学校已经明确注明, 体测成绩将作为考核的重要参考, 这也对考生的体质水平提出了更高要求. </p>\n</li>\n<li><p>降分幅度大幅收紧</p>\n<p>多个学校的录取政策中, 基本上都要求考生达到高校在考生所在省份模拟投档线下20-50分, 一些曾经”一本线录取”等政策在今年各大高校的招生简章中消声觅迹. </p>\n</li>\n</ol>\n<h3 id=\"自招政策的收紧带来的三大影响\"><a href=\"#自招政策的收紧带来的三大影响\" class=\"headerlink\" title=\"自招政策的收紧带来的三大影响\"></a>自招政策的收紧带来的三大影响</h3><p>可见, 今年的呃自主招生政策较往年相比大幅收紧, 对硬性指标的要求更加明确, 曾经常见的”其他具有学科特长和创新潜质”等条件都不再作为申请条件. 这将会给今年的自招带来至少以下几个影响. </p>\n<ol>\n<li><p>一些把自招当作捷径的考生将寸步难行</p>\n<p>自招不再是一个用来逃避高考的捷径，自招的硬性指标要求更高，对于一些特定的学科特长考核更加严格。对于硬性指标不过硬，没有相应的学科竞赛获奖，或者体质不达标的考生，在这样的政策下将寸步难行。而希图利用一些无良中介机构进行论文和专利造假的考生，在这样的政策下也将举步维艰。</p>\n</li>\n<li><p>文科生在自招中的路越来越窄</p>\n<p>许多高校的招生政策明确五大学科竞赛成为唯一的申请条件的情况下，除非文科生在这某个学科竞赛上有较强的学科特长的体现，否则将难以在这样明显偏向理科的门槛上取得优势。</p>\n</li>\n<li><p><strong>各种软性比赛，其他社会实践等软性能力的体现对后期竞争更为重要</strong></p>\n<p>硬性指标门槛的提高，使得通过门槛的竞争者的差距急剧缩小，在基本的硬性指标的竞争力之外，各种软性指标的竞争力显得更为重要。在这种背景下，包括商赛、模联、机器人和各种社会实践活动，志愿者、义工活动等软性指标将成为重要的参考依据。当竞争者之间的其他条件相似的情况下，具有相关奖项和证书的竞争者无疑更具优势。</p>\n</li>\n</ol>\n<p>总的来说, 在当今教育公平性愈显重要性的背景下, 自主招生作为高校在高考之外选拔具有特殊的学科特长和创新潜质的优秀学生的手段, 对申请者的基本学科能力等硬性指标和综合素质等软性指标都提出了更高的要求, 而作为申请者, 不仅要注重提高硬性指标以达到门槛, 更重要的是在综合素质和能力等软性指标上为自己积累竞争力, 才能以足够充分的准备面对新形势下的自主招生. </p>\n","site":{"data":{}},"excerpt":"<p> 2019年各大高校的自主招生工作正在进行, 目前已有半数高校已经发布了自主招生简章. 笔者作为曾经的自主招生的受益者 , 同时作为各位考生忠实的陪伴者, 在此对截止目前公布的各大高校的自主招生简章进行粗浅的解读, 仅供参考.</p>","more":"<h3 id=\"进行自招的学校数量没有太大变化\"><a href=\"#进行自招的学校数量没有太大变化\" class=\"headerlink\" title=\"进行自招的学校数量没有太大变化.\"></a>进行自招的学校数量没有太大变化.</h3><p>目前已经公布自主招生简章的学校包括但不限于北京科技大学, 北京化工大学, 北京邮电大学, 北京林业大学, 北京中医药大学, 北京师范大学, 北京语言大学, 中国传媒大学, 对外经贸大学, 武汉大学, 厦门大学, 中山大学, 中南大学, 中南财经政法大学等.  </p>\n<p>​    根据阳光高考网的公示, 今年进行自主招生的学校较往年相比没有太大变化, 厦门大学, 武汉大学等往年较为热门的自招学校都发布了自己的招生简章. </p>\n<h3 id=\"自招政策明显收紧\"><a href=\"#自招政策明显收紧\" class=\"headerlink\" title=\"自招政策明显收紧\"></a>自招政策明显收紧</h3><p>目前已经公布自招简章的学校当中, 大多数学校的招生政策都有较大调整, 主要呈现出以下几个特点:</p>\n<ol>\n<li><p>五大学科竞赛的成为唯一必要条件, 其他各大竞赛不再作为硬性条件. </p>\n<p>绝大多数的学校在自招简章中都明确表示, 申请参加自招的考生应当在全国数学\\物理\\化学\\生物\\信息竞赛中, 获得省级赛区二等奖以上的奖项, 一些学校甚至要求全国三等甚至二等奖. 并且包括厦门大学, 中山大学, 武汉理工大学在内的多所学校都明确五大学科竞赛的奖项是唯一必要条件. 其他竞赛不再作为申请参加自招的条件. 也就是说, 在许多学校的自招中, 五大学科竞赛的奖项将成为唯一的”敲门砖”, 没有五大学科竞赛的获奖将在自招中被绝大多数学校拒之门外. </p>\n</li>\n<li><p>专利、论文不再作为申请的参考资料</p>\n<p>许多学校都在自招简章中明确注明, 考生所取得的专利和论文发表不再作为申报材料. 也就是说, 专利和论文不再作为自招当中的加分项. 这可以说是杜绝了专利和论文造假的现象. </p>\n</li>\n<li><p>体测成绩将作为评审的重要参考</p>\n<p>多个学校已经明确公布了考核方案, 其中体测作为一个重要考核项逐渐成为一个重要的参考. 多个学校已经明确注明, 体测成绩将作为考核的重要参考, 这也对考生的体质水平提出了更高要求. </p>\n</li>\n<li><p>降分幅度大幅收紧</p>\n<p>多个学校的录取政策中, 基本上都要求考生达到高校在考生所在省份模拟投档线下20-50分, 一些曾经”一本线录取”等政策在今年各大高校的招生简章中消声觅迹. </p>\n</li>\n</ol>\n<h3 id=\"自招政策的收紧带来的三大影响\"><a href=\"#自招政策的收紧带来的三大影响\" class=\"headerlink\" title=\"自招政策的收紧带来的三大影响\"></a>自招政策的收紧带来的三大影响</h3><p>可见, 今年的呃自主招生政策较往年相比大幅收紧, 对硬性指标的要求更加明确, 曾经常见的”其他具有学科特长和创新潜质”等条件都不再作为申请条件. 这将会给今年的自招带来至少以下几个影响. </p>\n<ol>\n<li><p>一些把自招当作捷径的考生将寸步难行</p>\n<p>自招不再是一个用来逃避高考的捷径，自招的硬性指标要求更高，对于一些特定的学科特长考核更加严格。对于硬性指标不过硬，没有相应的学科竞赛获奖，或者体质不达标的考生，在这样的政策下将寸步难行。而希图利用一些无良中介机构进行论文和专利造假的考生，在这样的政策下也将举步维艰。</p>\n</li>\n<li><p>文科生在自招中的路越来越窄</p>\n<p>许多高校的招生政策明确五大学科竞赛成为唯一的申请条件的情况下，除非文科生在这某个学科竞赛上有较强的学科特长的体现，否则将难以在这样明显偏向理科的门槛上取得优势。</p>\n</li>\n<li><p><strong>各种软性比赛，其他社会实践等软性能力的体现对后期竞争更为重要</strong></p>\n<p>硬性指标门槛的提高，使得通过门槛的竞争者的差距急剧缩小，在基本的硬性指标的竞争力之外，各种软性指标的竞争力显得更为重要。在这种背景下，包括商赛、模联、机器人和各种社会实践活动，志愿者、义工活动等软性指标将成为重要的参考依据。当竞争者之间的其他条件相似的情况下，具有相关奖项和证书的竞争者无疑更具优势。</p>\n</li>\n</ol>\n<p>总的来说, 在当今教育公平性愈显重要性的背景下, 自主招生作为高校在高考之外选拔具有特殊的学科特长和创新潜质的优秀学生的手段, 对申请者的基本学科能力等硬性指标和综合素质等软性指标都提出了更高的要求, 而作为申请者, 不仅要注重提高硬性指标以达到门槛, 更重要的是在综合素质和能力等软性指标上为自己积累竞争力, 才能以足够充分的准备面对新形势下的自主招生. </p>"},{"titlie":"C++ Iterator","date":"2020-05-05T16:00:00.000Z","_content":"我真的不知道我之前写的那个迭代器的总结去哪里了...实在不行就再写一遍呗...\n\n<!--more-->\n\n### 什么是迭代器, 为什么要有迭代器\n\n​\tSTL提供了很多种容器, 像什么array, vector之类的, 迭代器是能够提供一个统一的操作接口, 虽然不同容器的迭代器对象本身不同, 但暴露出来的接口是一样的, 可以通过同样的接口对其进行同样(至少是相似)的操作. \n\n### 迭代器的分类\n\n迭代器的动作分成读和写两种, 其实针对容器来说就是输入和输出两种, 一种是输入迭代器, 一种是输出迭代器. 输入迭代器的输入是指针对容器来说的, 往容器里写数据叫输入, 从容器往程序里输出数据叫输出. \n\n此外, 根据迭代器的迭代方向, 可以分为正向迭代器, 反向迭代器, 随机访问迭代器, 双向迭代器几种不同的类型. 其中, 输入迭代器是典型的单项迭代器, 它只能递增但是不能倒退. 输入出迭代器也是单通行的. 双向迭代器则是可以具有正向迭代器所有特性的同时, 附加支持了两种递减运算, 即 `++i` 和 `i++` . \n\n通常来说, 比较常用的是随机访问迭代器, 它具有双向迭代器所有的特性, 同时支持了随机访问的操作, 比如指针增加的运算, 以及对于元素进行排序的关系运算符. \n\n到这儿你会发现, 迭代器其实是分三六九等的, 最高级的是随机访问迭代器, 它具备前述所有迭代器的所有功能的同时, 支持了一些其他类型迭代器不支持的功能. 当然, 这样做的代价自然是开销比较大. 如果你的程序对性能过于敏感, 则需要考虑这些区别, 否则可以直接使用随机访问迭代器. \n\n各种迭代器的类型并不是确定的, 只是一种概念性的描述. 在具体的实现上, 是在每个容器类都定义了一个类级 `typedef` 的名称 `iterator` . 比如 `vector<int>` 类的迭代器类型就是 `vector<int>::iterator`. 然而, 这个类的文档也指出, `vector` 的迭代器是随机访问迭代器, 它允许使用基于任何迭代器类型的算法. 同样, `list<int>` 的迭代器就是 `list<int>::iterator`.  再比如说, STL写了一个双向链表, 这个双向链表具备一个双向迭代器, 但是这个迭代器不能使用基于随机访问的算法, 但是可以使用双向迭代器支持的算法. \n\n### 常见的迭代器模型\n\n#### 1. 将指针用作迭代器\n\n迭代器其实就是广义的指针, 而且指针也满足了迭代器的所有要求. 因为迭代器是STL算法的接口(interface), 而指针是迭代器, 因此, STL算法可以使用指着来对基于指针的非STL容器进行操作. 这样做可以把STL写好的算法用在自己的一些数据结构上, 而不仅仅是STL容器. 比如STL算法可以用于数组, 用 `sort()` 进行排序. \n\n`sort()` 接受指向容器第一个元素的迭代器和指向超尾的迭代器作为参数. 我们现在假设有一个 `double` 型的数组叫 `Receipts` , 我们拿它作为例子, 进行升序排序: \n\n```c++\nconst int SIZE = 100;\ndouble Recipts[SIZE];\n```\n\n现在找出你想传进去的参数, 分别是 `&Reciptes[0]` 和 `&Reciptes[SIZE]` , 因此你可以按照这个函数的调用来对它进行排序: \n\n```c++\nsort(Reciptes, Reciptes[SIZE]);\n```\n\n当然, 你也可以用其他的STL函数, 比如 `copy()` , 甚至你可以把你的数组`copy()`到屏幕上, 只需要把它copy给`ostream_iterator` 就行. \n\n```c++\n#include <iterator>\nostream_iterator<int, char> out_iter(cout, \" \");\ncopy(dice.begin(), dice.end(), out_iter);\n```\n\n\n\n#### 2. 其他有用的迭代器\n\n除了 `ostream_iterator`, 头文件 `<iterator>`还提供了其他的一些预定义迭代器类型, 比如`reverse_iterator`, `back_insert_iterator`, `front_insert_iterator`和`insert_iterator`. 这些各有千秋, 你可以找官方文档查看这些内容. ","source":"_posts/C++迭代器.md","raw":"---\ntitlie: C++ Iterator\ndate: 2020/5/6\ncategories: \n- Tuorial\ntags: \n- C++\n- libstd\n---\n我真的不知道我之前写的那个迭代器的总结去哪里了...实在不行就再写一遍呗...\n\n<!--more-->\n\n### 什么是迭代器, 为什么要有迭代器\n\n​\tSTL提供了很多种容器, 像什么array, vector之类的, 迭代器是能够提供一个统一的操作接口, 虽然不同容器的迭代器对象本身不同, 但暴露出来的接口是一样的, 可以通过同样的接口对其进行同样(至少是相似)的操作. \n\n### 迭代器的分类\n\n迭代器的动作分成读和写两种, 其实针对容器来说就是输入和输出两种, 一种是输入迭代器, 一种是输出迭代器. 输入迭代器的输入是指针对容器来说的, 往容器里写数据叫输入, 从容器往程序里输出数据叫输出. \n\n此外, 根据迭代器的迭代方向, 可以分为正向迭代器, 反向迭代器, 随机访问迭代器, 双向迭代器几种不同的类型. 其中, 输入迭代器是典型的单项迭代器, 它只能递增但是不能倒退. 输入出迭代器也是单通行的. 双向迭代器则是可以具有正向迭代器所有特性的同时, 附加支持了两种递减运算, 即 `++i` 和 `i++` . \n\n通常来说, 比较常用的是随机访问迭代器, 它具有双向迭代器所有的特性, 同时支持了随机访问的操作, 比如指针增加的运算, 以及对于元素进行排序的关系运算符. \n\n到这儿你会发现, 迭代器其实是分三六九等的, 最高级的是随机访问迭代器, 它具备前述所有迭代器的所有功能的同时, 支持了一些其他类型迭代器不支持的功能. 当然, 这样做的代价自然是开销比较大. 如果你的程序对性能过于敏感, 则需要考虑这些区别, 否则可以直接使用随机访问迭代器. \n\n各种迭代器的类型并不是确定的, 只是一种概念性的描述. 在具体的实现上, 是在每个容器类都定义了一个类级 `typedef` 的名称 `iterator` . 比如 `vector<int>` 类的迭代器类型就是 `vector<int>::iterator`. 然而, 这个类的文档也指出, `vector` 的迭代器是随机访问迭代器, 它允许使用基于任何迭代器类型的算法. 同样, `list<int>` 的迭代器就是 `list<int>::iterator`.  再比如说, STL写了一个双向链表, 这个双向链表具备一个双向迭代器, 但是这个迭代器不能使用基于随机访问的算法, 但是可以使用双向迭代器支持的算法. \n\n### 常见的迭代器模型\n\n#### 1. 将指针用作迭代器\n\n迭代器其实就是广义的指针, 而且指针也满足了迭代器的所有要求. 因为迭代器是STL算法的接口(interface), 而指针是迭代器, 因此, STL算法可以使用指着来对基于指针的非STL容器进行操作. 这样做可以把STL写好的算法用在自己的一些数据结构上, 而不仅仅是STL容器. 比如STL算法可以用于数组, 用 `sort()` 进行排序. \n\n`sort()` 接受指向容器第一个元素的迭代器和指向超尾的迭代器作为参数. 我们现在假设有一个 `double` 型的数组叫 `Receipts` , 我们拿它作为例子, 进行升序排序: \n\n```c++\nconst int SIZE = 100;\ndouble Recipts[SIZE];\n```\n\n现在找出你想传进去的参数, 分别是 `&Reciptes[0]` 和 `&Reciptes[SIZE]` , 因此你可以按照这个函数的调用来对它进行排序: \n\n```c++\nsort(Reciptes, Reciptes[SIZE]);\n```\n\n当然, 你也可以用其他的STL函数, 比如 `copy()` , 甚至你可以把你的数组`copy()`到屏幕上, 只需要把它copy给`ostream_iterator` 就行. \n\n```c++\n#include <iterator>\nostream_iterator<int, char> out_iter(cout, \" \");\ncopy(dice.begin(), dice.end(), out_iter);\n```\n\n\n\n#### 2. 其他有用的迭代器\n\n除了 `ostream_iterator`, 头文件 `<iterator>`还提供了其他的一些预定义迭代器类型, 比如`reverse_iterator`, `back_insert_iterator`, `front_insert_iterator`和`insert_iterator`. 这些各有千秋, 你可以找官方文档查看这些内容. ","slug":"C++迭代器","published":1,"updated":"2020-05-05T16:22:59.354Z","title":"C++迭代器","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9u4lybh0006s2s93tfh5xfa","content":"<p>我真的不知道我之前写的那个迭代器的总结去哪里了…实在不行就再写一遍呗…</p>\n<a id=\"more\"></a>\n\n<h3 id=\"什么是迭代器-为什么要有迭代器\"><a href=\"#什么是迭代器-为什么要有迭代器\" class=\"headerlink\" title=\"什么是迭代器, 为什么要有迭代器\"></a>什么是迭代器, 为什么要有迭代器</h3><p>​    STL提供了很多种容器, 像什么array, vector之类的, 迭代器是能够提供一个统一的操作接口, 虽然不同容器的迭代器对象本身不同, 但暴露出来的接口是一样的, 可以通过同样的接口对其进行同样(至少是相似)的操作. </p>\n<h3 id=\"迭代器的分类\"><a href=\"#迭代器的分类\" class=\"headerlink\" title=\"迭代器的分类\"></a>迭代器的分类</h3><p>迭代器的动作分成读和写两种, 其实针对容器来说就是输入和输出两种, 一种是输入迭代器, 一种是输出迭代器. 输入迭代器的输入是指针对容器来说的, 往容器里写数据叫输入, 从容器往程序里输出数据叫输出. </p>\n<p>此外, 根据迭代器的迭代方向, 可以分为正向迭代器, 反向迭代器, 随机访问迭代器, 双向迭代器几种不同的类型. 其中, 输入迭代器是典型的单项迭代器, 它只能递增但是不能倒退. 输入出迭代器也是单通行的. 双向迭代器则是可以具有正向迭代器所有特性的同时, 附加支持了两种递减运算, 即 <code>++i</code> 和 <code>i++</code> . </p>\n<p>通常来说, 比较常用的是随机访问迭代器, 它具有双向迭代器所有的特性, 同时支持了随机访问的操作, 比如指针增加的运算, 以及对于元素进行排序的关系运算符. </p>\n<p>到这儿你会发现, 迭代器其实是分三六九等的, 最高级的是随机访问迭代器, 它具备前述所有迭代器的所有功能的同时, 支持了一些其他类型迭代器不支持的功能. 当然, 这样做的代价自然是开销比较大. 如果你的程序对性能过于敏感, 则需要考虑这些区别, 否则可以直接使用随机访问迭代器. </p>\n<p>各种迭代器的类型并不是确定的, 只是一种概念性的描述. 在具体的实现上, 是在每个容器类都定义了一个类级 <code>typedef</code> 的名称 <code>iterator</code> . 比如 <code>vector&lt;int&gt;</code> 类的迭代器类型就是 <code>vector&lt;int&gt;::iterator</code>. 然而, 这个类的文档也指出, <code>vector</code> 的迭代器是随机访问迭代器, 它允许使用基于任何迭代器类型的算法. 同样, <code>list&lt;int&gt;</code> 的迭代器就是 <code>list&lt;int&gt;::iterator</code>.  再比如说, STL写了一个双向链表, 这个双向链表具备一个双向迭代器, 但是这个迭代器不能使用基于随机访问的算法, 但是可以使用双向迭代器支持的算法. </p>\n<h3 id=\"常见的迭代器模型\"><a href=\"#常见的迭代器模型\" class=\"headerlink\" title=\"常见的迭代器模型\"></a>常见的迭代器模型</h3><h4 id=\"1-将指针用作迭代器\"><a href=\"#1-将指针用作迭代器\" class=\"headerlink\" title=\"1. 将指针用作迭代器\"></a>1. 将指针用作迭代器</h4><p>迭代器其实就是广义的指针, 而且指针也满足了迭代器的所有要求. 因为迭代器是STL算法的接口(interface), 而指针是迭代器, 因此, STL算法可以使用指着来对基于指针的非STL容器进行操作. 这样做可以把STL写好的算法用在自己的一些数据结构上, 而不仅仅是STL容器. 比如STL算法可以用于数组, 用 <code>sort()</code> 进行排序. </p>\n<p><code>sort()</code> 接受指向容器第一个元素的迭代器和指向超尾的迭代器作为参数. 我们现在假设有一个 <code>double</code> 型的数组叫 <code>Receipts</code> , 我们拿它作为例子, 进行升序排序: </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> SIZE = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> Recipts[SIZE];</span><br></pre></td></tr></table></figure>\n\n<p>现在找出你想传进去的参数, 分别是 <code>&amp;Reciptes[0]</code> 和 <code>&amp;Reciptes[SIZE]</code> , 因此你可以按照这个函数的调用来对它进行排序: </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort(Reciptes, Reciptes[SIZE]);</span><br></pre></td></tr></table></figure>\n\n<p>当然, 你也可以用其他的STL函数, 比如 <code>copy()</code> , 甚至你可以把你的数组<code>copy()</code>到屏幕上, 只需要把它copy给<code>ostream_iterator</code> 就行. </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\">ostream_iterator&lt;int, char&gt; out_iter(cout, \" \");</span><br><span class=\"line\">copy(dice.<span class=\"built_in\">begin</span>(), dice.<span class=\"built_in\">end</span>(), out_iter);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-其他有用的迭代器\"><a href=\"#2-其他有用的迭代器\" class=\"headerlink\" title=\"2. 其他有用的迭代器\"></a>2. 其他有用的迭代器</h4><p>除了 <code>ostream_iterator</code>, 头文件 <code>&lt;iterator&gt;</code>还提供了其他的一些预定义迭代器类型, 比如<code>reverse_iterator</code>, <code>back_insert_iterator</code>, <code>front_insert_iterator</code>和<code>insert_iterator</code>. 这些各有千秋, 你可以找官方文档查看这些内容. </p>\n","site":{"data":{}},"excerpt":"<p>我真的不知道我之前写的那个迭代器的总结去哪里了…实在不行就再写一遍呗…</p>","more":"<h3 id=\"什么是迭代器-为什么要有迭代器\"><a href=\"#什么是迭代器-为什么要有迭代器\" class=\"headerlink\" title=\"什么是迭代器, 为什么要有迭代器\"></a>什么是迭代器, 为什么要有迭代器</h3><p>​    STL提供了很多种容器, 像什么array, vector之类的, 迭代器是能够提供一个统一的操作接口, 虽然不同容器的迭代器对象本身不同, 但暴露出来的接口是一样的, 可以通过同样的接口对其进行同样(至少是相似)的操作. </p>\n<h3 id=\"迭代器的分类\"><a href=\"#迭代器的分类\" class=\"headerlink\" title=\"迭代器的分类\"></a>迭代器的分类</h3><p>迭代器的动作分成读和写两种, 其实针对容器来说就是输入和输出两种, 一种是输入迭代器, 一种是输出迭代器. 输入迭代器的输入是指针对容器来说的, 往容器里写数据叫输入, 从容器往程序里输出数据叫输出. </p>\n<p>此外, 根据迭代器的迭代方向, 可以分为正向迭代器, 反向迭代器, 随机访问迭代器, 双向迭代器几种不同的类型. 其中, 输入迭代器是典型的单项迭代器, 它只能递增但是不能倒退. 输入出迭代器也是单通行的. 双向迭代器则是可以具有正向迭代器所有特性的同时, 附加支持了两种递减运算, 即 <code>++i</code> 和 <code>i++</code> . </p>\n<p>通常来说, 比较常用的是随机访问迭代器, 它具有双向迭代器所有的特性, 同时支持了随机访问的操作, 比如指针增加的运算, 以及对于元素进行排序的关系运算符. </p>\n<p>到这儿你会发现, 迭代器其实是分三六九等的, 最高级的是随机访问迭代器, 它具备前述所有迭代器的所有功能的同时, 支持了一些其他类型迭代器不支持的功能. 当然, 这样做的代价自然是开销比较大. 如果你的程序对性能过于敏感, 则需要考虑这些区别, 否则可以直接使用随机访问迭代器. </p>\n<p>各种迭代器的类型并不是确定的, 只是一种概念性的描述. 在具体的实现上, 是在每个容器类都定义了一个类级 <code>typedef</code> 的名称 <code>iterator</code> . 比如 <code>vector&lt;int&gt;</code> 类的迭代器类型就是 <code>vector&lt;int&gt;::iterator</code>. 然而, 这个类的文档也指出, <code>vector</code> 的迭代器是随机访问迭代器, 它允许使用基于任何迭代器类型的算法. 同样, <code>list&lt;int&gt;</code> 的迭代器就是 <code>list&lt;int&gt;::iterator</code>.  再比如说, STL写了一个双向链表, 这个双向链表具备一个双向迭代器, 但是这个迭代器不能使用基于随机访问的算法, 但是可以使用双向迭代器支持的算法. </p>\n<h3 id=\"常见的迭代器模型\"><a href=\"#常见的迭代器模型\" class=\"headerlink\" title=\"常见的迭代器模型\"></a>常见的迭代器模型</h3><h4 id=\"1-将指针用作迭代器\"><a href=\"#1-将指针用作迭代器\" class=\"headerlink\" title=\"1. 将指针用作迭代器\"></a>1. 将指针用作迭代器</h4><p>迭代器其实就是广义的指针, 而且指针也满足了迭代器的所有要求. 因为迭代器是STL算法的接口(interface), 而指针是迭代器, 因此, STL算法可以使用指着来对基于指针的非STL容器进行操作. 这样做可以把STL写好的算法用在自己的一些数据结构上, 而不仅仅是STL容器. 比如STL算法可以用于数组, 用 <code>sort()</code> 进行排序. </p>\n<p><code>sort()</code> 接受指向容器第一个元素的迭代器和指向超尾的迭代器作为参数. 我们现在假设有一个 <code>double</code> 型的数组叫 <code>Receipts</code> , 我们拿它作为例子, 进行升序排序: </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> SIZE = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> Recipts[SIZE];</span><br></pre></td></tr></table></figure>\n\n<p>现在找出你想传进去的参数, 分别是 <code>&amp;Reciptes[0]</code> 和 <code>&amp;Reciptes[SIZE]</code> , 因此你可以按照这个函数的调用来对它进行排序: </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort(Reciptes, Reciptes[SIZE]);</span><br></pre></td></tr></table></figure>\n\n<p>当然, 你也可以用其他的STL函数, 比如 <code>copy()</code> , 甚至你可以把你的数组<code>copy()</code>到屏幕上, 只需要把它copy给<code>ostream_iterator</code> 就行. </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\">ostream_iterator&lt;int, char&gt; out_iter(cout, \" \");</span><br><span class=\"line\">copy(dice.<span class=\"built_in\">begin</span>(), dice.<span class=\"built_in\">end</span>(), out_iter);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-其他有用的迭代器\"><a href=\"#2-其他有用的迭代器\" class=\"headerlink\" title=\"2. 其他有用的迭代器\"></a>2. 其他有用的迭代器</h4><p>除了 <code>ostream_iterator</code>, 头文件 <code>&lt;iterator&gt;</code>还提供了其他的一些预定义迭代器类型, 比如<code>reverse_iterator</code>, <code>back_insert_iterator</code>, <code>front_insert_iterator</code>和<code>insert_iterator</code>. 这些各有千秋, 你可以找官方文档查看这些内容. </p>"},{"title":"Crazy Install  ROS melodic on Raspberry Pi 4 with Ubuntu Server 1910","date":"2019-10-31T16:00:00.000Z","_content":"Install 1910\n<!--more--->\n\nHowever, the mouse and keyboard , actually the whole USB port are useless.\n\nInstall ROS melodic from source as the tutorial on the wiki.ros.org/melodic/installation/ubuntu. \n\nWhen resolving Dependencies:\n\nSome dependencies not found in the repository for eoan. \n\nThat's ok to set the official repository ros-latest.list to bionic. \n\nInstall the dependences manually one by one.\n\nBuild the catkin workspace. \n\n\"console bridge\" problem:\n\n```bash\ngit clone git://github.com/ros/console_bridge.git\ncd console_bridge\ncmake .\nmake\nsudo make install\n```\n\n\"boots lib\" problem:\n\n```bash\nsudo apt-get install cmake libblkid-dev e2fslibs-dev libboost-all-dev libaudit-dev\n```\n\n\"gtenst\"problems:\n\n```bash\n\nudo apt-get install libgtest-dev\nsudo apt-get install cmake # install cmake\ncd /usr/src/gtest\nsudo cmake CMakeLists.txt\nsudo make\n\n```\n\n\n\n\n\neigen3 probrems\n\n```bash\nsudo apt install libeigen3-dev\n```\n\n\n\nno module named sigconfig \n\n```bash\nwget https://www.riverbankcomputing.com/static/Downloads/sip/4.19/sip-4.19.tar.gz\ntar -xvfz sip-4.19.tar.gz\ncd sip-4.19.tar.gz\npython configure.py\nsudo make\nsudo make install\n```\n\nempy:\n\n```bash\nsudo apt install python-empy\n```\n\ntinyxml2\n\n```bash\ngit clone https://github.com/leethomason/tinyxml2.git\ncd tityxml.git\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n```\n\n\n\nnot found sudo LOG4CXX\n\n```bash\nsudo apt-get install liblog4cxx-dev\n```\n\ntinyxml1\n\n````bash\nsudo apt install tinyxml-dev\n````\n\n\n\ntested: \n\n```bash\n\nsudo apt-get install libfontconfig1-dev libdbus-1-dev libfreetype6-dev libudev-dev libicu-dev libsqlite3-dev libxslt1-dev libssl-dev libasound2-dev libavcodec-dev libavformat-dev libswscale-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev gstreamer-tools gstreamer0.10-plugins-good gstreamer0.10-plugins-bad libraspberrypi-dev libpulse-dev libx11-dev libglib2.0-dev libcups2-dev freetds-dev libsqlite0-dev libpq-dev libiodbc2-dev libmysqlclient-dev firebird-dev libpng12-dev libjpeg9-dev libgst-dev libxext-dev libxcb1 libxcb1-dev\nlibx11-xcb1 libx11-xcb-dev libxcb-keysyms1 libxcb-keysyms1-dev libxcb-image0 libxcb-image0-dev libxcb-shm0 libxcb-shm0-dev libxcb-icccm4 libxcb-icccm4-dev libxcb-sync1 libxcb-sync-dev libxcb-render-util0 libxcb-render-util0-dev libxcb-xfixes0-dev libxrender-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-glx0-dev libxi-dev libdrm-dev libssl-dev libxcb-xinerama0 libxcb-xinerama0-dev\n```\n\n\n\n\n\nqt5-widgets\n\n```bash\nsudo apt install qt5-default\n```\n\n\n\npyqt5\n\n```bash\nsudo apt install python-pyqt5\n```\n\n\n\n\n\n'SIP_NULLPTR'\n\n```\nwget https://www.riverbankcomputing.com/static/Downloads/sip/4.19/sip-4.49.tar.gz\ntar -xvfz sip-4.49.tar.gz\ncd sip-4.49.tar.gz\npython configure.py\nsudo make\nsudo make install\n```\n\n\n\nlz4\n\n```bash\nsudo apt install python-lz4 python3-lz4\n```\n\nit not use\n\ntry everything you can search in apt about lz4\n\nseems lz4 and ros about would be work?\n\n\n\nurdfdom_header:\n\n```bash\nsudo apt insatll liburdfdom-dev\n```\n\n\n\nbzip2\n\ntry everything you can fine in `apt search ` about bzip2\n\n\n\nopencv\n\ninstall everything about opencv, actually you will use it later them all. \n\n\n\n\"OGRE\"\n\n```bash\nsudo apt install libogre-1.9.0-dev libogre-1.9.0v5\n```\n\n\"yaml-cpp\"\n\n```bash'\nsudo apt install libyaml-cpp-dev libyaml-cpp0.6\n```\n\nasssmp:\n\n```bash\nsudo apt install libassimp-dev assimp-utils libassimp4 python-pyassimp python3-pyassimp\n```\n\n\n\n\n\nAfter installation:\n\nroscore:\n\nnetiface\n\n````bash\npip install netifaces\n#or\nsudo apt install python-netifaces python3-netifaces\n````\n\n\n\nThe main idea of debug the dependences is apt search the package name. ","source":"_posts/Crazy Install  ROS melodic on Raspberry Pi 4 with Ubuntu Server 1910.md","raw":"---\ntitle: Crazy Install  ROS melodic on Raspberry Pi 4 with Ubuntu Server 1910 # 标题\ndate: 2019/11/1 # 时间\ncategories: # 分类\n- Experience\ntags: # 标签\n- ROS\n- Ubuntu\n- Raspberry Pi\n---\nInstall 1910\n<!--more--->\n\nHowever, the mouse and keyboard , actually the whole USB port are useless.\n\nInstall ROS melodic from source as the tutorial on the wiki.ros.org/melodic/installation/ubuntu. \n\nWhen resolving Dependencies:\n\nSome dependencies not found in the repository for eoan. \n\nThat's ok to set the official repository ros-latest.list to bionic. \n\nInstall the dependences manually one by one.\n\nBuild the catkin workspace. \n\n\"console bridge\" problem:\n\n```bash\ngit clone git://github.com/ros/console_bridge.git\ncd console_bridge\ncmake .\nmake\nsudo make install\n```\n\n\"boots lib\" problem:\n\n```bash\nsudo apt-get install cmake libblkid-dev e2fslibs-dev libboost-all-dev libaudit-dev\n```\n\n\"gtenst\"problems:\n\n```bash\n\nudo apt-get install libgtest-dev\nsudo apt-get install cmake # install cmake\ncd /usr/src/gtest\nsudo cmake CMakeLists.txt\nsudo make\n\n```\n\n\n\n\n\neigen3 probrems\n\n```bash\nsudo apt install libeigen3-dev\n```\n\n\n\nno module named sigconfig \n\n```bash\nwget https://www.riverbankcomputing.com/static/Downloads/sip/4.19/sip-4.19.tar.gz\ntar -xvfz sip-4.19.tar.gz\ncd sip-4.19.tar.gz\npython configure.py\nsudo make\nsudo make install\n```\n\nempy:\n\n```bash\nsudo apt install python-empy\n```\n\ntinyxml2\n\n```bash\ngit clone https://github.com/leethomason/tinyxml2.git\ncd tityxml.git\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n```\n\n\n\nnot found sudo LOG4CXX\n\n```bash\nsudo apt-get install liblog4cxx-dev\n```\n\ntinyxml1\n\n````bash\nsudo apt install tinyxml-dev\n````\n\n\n\ntested: \n\n```bash\n\nsudo apt-get install libfontconfig1-dev libdbus-1-dev libfreetype6-dev libudev-dev libicu-dev libsqlite3-dev libxslt1-dev libssl-dev libasound2-dev libavcodec-dev libavformat-dev libswscale-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev gstreamer-tools gstreamer0.10-plugins-good gstreamer0.10-plugins-bad libraspberrypi-dev libpulse-dev libx11-dev libglib2.0-dev libcups2-dev freetds-dev libsqlite0-dev libpq-dev libiodbc2-dev libmysqlclient-dev firebird-dev libpng12-dev libjpeg9-dev libgst-dev libxext-dev libxcb1 libxcb1-dev\nlibx11-xcb1 libx11-xcb-dev libxcb-keysyms1 libxcb-keysyms1-dev libxcb-image0 libxcb-image0-dev libxcb-shm0 libxcb-shm0-dev libxcb-icccm4 libxcb-icccm4-dev libxcb-sync1 libxcb-sync-dev libxcb-render-util0 libxcb-render-util0-dev libxcb-xfixes0-dev libxrender-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-glx0-dev libxi-dev libdrm-dev libssl-dev libxcb-xinerama0 libxcb-xinerama0-dev\n```\n\n\n\n\n\nqt5-widgets\n\n```bash\nsudo apt install qt5-default\n```\n\n\n\npyqt5\n\n```bash\nsudo apt install python-pyqt5\n```\n\n\n\n\n\n'SIP_NULLPTR'\n\n```\nwget https://www.riverbankcomputing.com/static/Downloads/sip/4.19/sip-4.49.tar.gz\ntar -xvfz sip-4.49.tar.gz\ncd sip-4.49.tar.gz\npython configure.py\nsudo make\nsudo make install\n```\n\n\n\nlz4\n\n```bash\nsudo apt install python-lz4 python3-lz4\n```\n\nit not use\n\ntry everything you can search in apt about lz4\n\nseems lz4 and ros about would be work?\n\n\n\nurdfdom_header:\n\n```bash\nsudo apt insatll liburdfdom-dev\n```\n\n\n\nbzip2\n\ntry everything you can fine in `apt search ` about bzip2\n\n\n\nopencv\n\ninstall everything about opencv, actually you will use it later them all. \n\n\n\n\"OGRE\"\n\n```bash\nsudo apt install libogre-1.9.0-dev libogre-1.9.0v5\n```\n\n\"yaml-cpp\"\n\n```bash'\nsudo apt install libyaml-cpp-dev libyaml-cpp0.6\n```\n\nasssmp:\n\n```bash\nsudo apt install libassimp-dev assimp-utils libassimp4 python-pyassimp python3-pyassimp\n```\n\n\n\n\n\nAfter installation:\n\nroscore:\n\nnetiface\n\n````bash\npip install netifaces\n#or\nsudo apt install python-netifaces python3-netifaces\n````\n\n\n\nThe main idea of debug the dependences is apt search the package name. ","slug":"Crazy Install  ROS melodic on Raspberry Pi 4 with Ubuntu Server 1910","published":1,"updated":"2020-05-05T16:16:19.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9u4lybm0008s2s9agta1twu","content":"<p>Install 1910</p>\n<a id=\"more\"></a>\n\n<p>However, the mouse and keyboard , actually the whole USB port are useless.</p>\n<p>Install ROS melodic from source as the tutorial on the wiki.ros.org/melodic/installation/ubuntu. </p>\n<p>When resolving Dependencies:</p>\n<p>Some dependencies not found in the repository for eoan. </p>\n<p>That’s ok to set the official repository ros-latest.list to bionic. </p>\n<p>Install the dependences manually one by one.</p>\n<p>Build the catkin workspace. </p>\n<p>“console bridge” problem:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/ros/console_bridge.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> console_bridge</span><br><span class=\"line\">cmake .</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>“boots lib” problem:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install cmake libblkid-dev e2fslibs-dev libboost-all-dev libaudit-dev</span><br></pre></td></tr></table></figure>\n\n<p>“gtenst”problems:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">udo apt-get install libgtest-dev</span><br><span class=\"line\">sudo apt-get install cmake <span class=\"comment\"># install cmake</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src/gtest</span><br><span class=\"line\">sudo cmake CMakeLists.txt</span><br><span class=\"line\">sudo make</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>eigen3 probrems</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libeigen3-dev</span><br></pre></td></tr></table></figure>\n\n\n\n<p>no module named sigconfig </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.riverbankcomputing.com/static/Downloads/sip/4.19/sip-4.19.tar.gz</span><br><span class=\"line\">tar -xvfz sip-4.19.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> sip-4.19.tar.gz</span><br><span class=\"line\">python configure.py</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>empy:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-empy</span><br></pre></td></tr></table></figure>\n\n<p>tinyxml2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/leethomason/tinyxml2.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> tityxml.git</span><br><span class=\"line\">mkdir build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake ..</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>not found sudo LOG4CXX</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install liblog4cxx-dev</span><br></pre></td></tr></table></figure>\n\n<p>tinyxml1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install tinyxml-dev</span><br></pre></td></tr></table></figure>\n\n\n\n<p>tested: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install libfontconfig1-dev libdbus-1-dev libfreetype6-dev libudev-dev libicu-dev libsqlite3-dev libxslt1-dev libssl-dev libasound2-dev libavcodec-dev libavformat-dev libswscale-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev gstreamer-tools gstreamer0.10-plugins-good gstreamer0.10-plugins-bad libraspberrypi-dev libpulse-dev libx11-dev libglib2.0-dev libcups2-dev freetds-dev libsqlite0-dev libpq-dev libiodbc2-dev libmysqlclient-dev firebird-dev libpng12-dev libjpeg9-dev libgst-dev libxext-dev libxcb1 libxcb1-dev</span><br><span class=\"line\">libx11-xcb1 libx11-xcb-dev libxcb-keysyms1 libxcb-keysyms1-dev libxcb-image0 libxcb-image0-dev libxcb-shm0 libxcb-shm0-dev libxcb-icccm4 libxcb-icccm4-dev libxcb-sync1 libxcb-sync-dev libxcb-render-util0 libxcb-render-util0-dev libxcb-xfixes0-dev libxrender-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-glx0-dev libxi-dev libdrm-dev libssl-dev libxcb-xinerama0 libxcb-xinerama0-dev</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>qt5-widgets</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install qt5-default</span><br></pre></td></tr></table></figure>\n\n\n\n<p>pyqt5</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-pyqt5</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>‘SIP_NULLPTR’</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;www.riverbankcomputing.com&#x2F;static&#x2F;Downloads&#x2F;sip&#x2F;4.19&#x2F;sip-4.49.tar.gz</span><br><span class=\"line\">tar -xvfz sip-4.49.tar.gz</span><br><span class=\"line\">cd sip-4.49.tar.gz</span><br><span class=\"line\">python configure.py</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>lz4</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-lz4 python3-lz4</span><br></pre></td></tr></table></figure>\n\n<p>it not use</p>\n<p>try everything you can search in apt about lz4</p>\n<p>seems lz4 and ros about would be work?</p>\n<p>urdfdom_header:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt insatll liburdfdom-dev</span><br></pre></td></tr></table></figure>\n\n\n\n<p>bzip2</p>\n<p>try everything you can fine in <code>apt search</code> about bzip2</p>\n<p>opencv</p>\n<p>install everything about opencv, actually you will use it later them all. </p>\n<p>“OGRE”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libogre-1.9.0-dev libogre-1.9.0v5</span><br></pre></td></tr></table></figure>\n\n<p>“yaml-cpp”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libyaml-cpp-dev libyaml-cpp0.6</span><br></pre></td></tr></table></figure>\n\n<p>asssmp:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libassimp-dev assimp-utils libassimp4 python-pyassimp python3-pyassimp</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>After installation:</p>\n<p>roscore:</p>\n<p>netiface</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install netifaces</span><br><span class=\"line\"><span class=\"comment\">#or</span></span><br><span class=\"line\">sudo apt install python-netifaces python3-netifaces</span><br></pre></td></tr></table></figure>\n\n\n\n<p>The main idea of debug the dependences is apt search the package name. </p>\n","site":{"data":{}},"excerpt":"<p>Install 1910</p>","more":"<p>However, the mouse and keyboard , actually the whole USB port are useless.</p>\n<p>Install ROS melodic from source as the tutorial on the wiki.ros.org/melodic/installation/ubuntu. </p>\n<p>When resolving Dependencies:</p>\n<p>Some dependencies not found in the repository for eoan. </p>\n<p>That’s ok to set the official repository ros-latest.list to bionic. </p>\n<p>Install the dependences manually one by one.</p>\n<p>Build the catkin workspace. </p>\n<p>“console bridge” problem:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/ros/console_bridge.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> console_bridge</span><br><span class=\"line\">cmake .</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>“boots lib” problem:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install cmake libblkid-dev e2fslibs-dev libboost-all-dev libaudit-dev</span><br></pre></td></tr></table></figure>\n\n<p>“gtenst”problems:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">udo apt-get install libgtest-dev</span><br><span class=\"line\">sudo apt-get install cmake <span class=\"comment\"># install cmake</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src/gtest</span><br><span class=\"line\">sudo cmake CMakeLists.txt</span><br><span class=\"line\">sudo make</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>eigen3 probrems</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libeigen3-dev</span><br></pre></td></tr></table></figure>\n\n\n\n<p>no module named sigconfig </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.riverbankcomputing.com/static/Downloads/sip/4.19/sip-4.19.tar.gz</span><br><span class=\"line\">tar -xvfz sip-4.19.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> sip-4.19.tar.gz</span><br><span class=\"line\">python configure.py</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>empy:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-empy</span><br></pre></td></tr></table></figure>\n\n<p>tinyxml2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/leethomason/tinyxml2.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> tityxml.git</span><br><span class=\"line\">mkdir build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake ..</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>not found sudo LOG4CXX</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install liblog4cxx-dev</span><br></pre></td></tr></table></figure>\n\n<p>tinyxml1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install tinyxml-dev</span><br></pre></td></tr></table></figure>\n\n\n\n<p>tested: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install libfontconfig1-dev libdbus-1-dev libfreetype6-dev libudev-dev libicu-dev libsqlite3-dev libxslt1-dev libssl-dev libasound2-dev libavcodec-dev libavformat-dev libswscale-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev gstreamer-tools gstreamer0.10-plugins-good gstreamer0.10-plugins-bad libraspberrypi-dev libpulse-dev libx11-dev libglib2.0-dev libcups2-dev freetds-dev libsqlite0-dev libpq-dev libiodbc2-dev libmysqlclient-dev firebird-dev libpng12-dev libjpeg9-dev libgst-dev libxext-dev libxcb1 libxcb1-dev</span><br><span class=\"line\">libx11-xcb1 libx11-xcb-dev libxcb-keysyms1 libxcb-keysyms1-dev libxcb-image0 libxcb-image0-dev libxcb-shm0 libxcb-shm0-dev libxcb-icccm4 libxcb-icccm4-dev libxcb-sync1 libxcb-sync-dev libxcb-render-util0 libxcb-render-util0-dev libxcb-xfixes0-dev libxrender-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-glx0-dev libxi-dev libdrm-dev libssl-dev libxcb-xinerama0 libxcb-xinerama0-dev</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>qt5-widgets</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install qt5-default</span><br></pre></td></tr></table></figure>\n\n\n\n<p>pyqt5</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-pyqt5</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>‘SIP_NULLPTR’</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;www.riverbankcomputing.com&#x2F;static&#x2F;Downloads&#x2F;sip&#x2F;4.19&#x2F;sip-4.49.tar.gz</span><br><span class=\"line\">tar -xvfz sip-4.49.tar.gz</span><br><span class=\"line\">cd sip-4.49.tar.gz</span><br><span class=\"line\">python configure.py</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>lz4</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-lz4 python3-lz4</span><br></pre></td></tr></table></figure>\n\n<p>it not use</p>\n<p>try everything you can search in apt about lz4</p>\n<p>seems lz4 and ros about would be work?</p>\n<p>urdfdom_header:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt insatll liburdfdom-dev</span><br></pre></td></tr></table></figure>\n\n\n\n<p>bzip2</p>\n<p>try everything you can fine in <code>apt search</code> about bzip2</p>\n<p>opencv</p>\n<p>install everything about opencv, actually you will use it later them all. </p>\n<p>“OGRE”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libogre-1.9.0-dev libogre-1.9.0v5</span><br></pre></td></tr></table></figure>\n\n<p>“yaml-cpp”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libyaml-cpp-dev libyaml-cpp0.6</span><br></pre></td></tr></table></figure>\n\n<p>asssmp:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libassimp-dev assimp-utils libassimp4 python-pyassimp python3-pyassimp</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>After installation:</p>\n<p>roscore:</p>\n<p>netiface</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install netifaces</span><br><span class=\"line\"><span class=\"comment\">#or</span></span><br><span class=\"line\">sudo apt install python-netifaces python3-netifaces</span><br></pre></td></tr></table></figure>\n\n\n\n<p>The main idea of debug the dependences is apt search the package name. </p>"},{"title":"Hello World!","date":"2019-06-07T16:00:00.000Z","_content":"​\t大家好, 我是Charlie, 是这个博客的创作人和维护人。\n<!--more-->\n\n​\t这个博客创建并于2019年6月8日发布第一篇文章《Hello，world！》，这是这个博客的第一篇文章，用于致敬支持我搭建起这个博客的所有的知识的发现者和创造者。\n\n​\t这是我的个人博客，纵然到了今天，已经不再有多少人拥有和使用博客，但我仍然坚信，在信息高度快餐化、碎片化的今天，一篇篇经过了深思熟虑的，或技术，或思考的文章，更能够承载起属于人类智慧的力量。\n\n​\t在此之前，我曾在我的云服务器上运行了我的第一个网站，用于服务于我高中阶段所致力于创建和维护的社团。如今，我会从此开始，走向更远的地方。\n\n​\t感谢每一个陪伴和关注的人。\n\n","source":"_posts/Hello, World!.md","raw":"---\ntitle: Hello World! # 标题\ndate: 2019/6/8 # 时间\ncategories: # 分类\n- Other\ntags: # 标签\n- Hello\n---\n​\t大家好, 我是Charlie, 是这个博客的创作人和维护人。\n<!--more-->\n\n​\t这个博客创建并于2019年6月8日发布第一篇文章《Hello，world！》，这是这个博客的第一篇文章，用于致敬支持我搭建起这个博客的所有的知识的发现者和创造者。\n\n​\t这是我的个人博客，纵然到了今天，已经不再有多少人拥有和使用博客，但我仍然坚信，在信息高度快餐化、碎片化的今天，一篇篇经过了深思熟虑的，或技术，或思考的文章，更能够承载起属于人类智慧的力量。\n\n​\t在此之前，我曾在我的云服务器上运行了我的第一个网站，用于服务于我高中阶段所致力于创建和维护的社团。如今，我会从此开始，走向更远的地方。\n\n​\t感谢每一个陪伴和关注的人。\n\n","slug":"Hello, World!","published":1,"updated":"2020-05-05T16:16:19.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9u4lybp000as2s9gdn93cgw","content":"<p>​    大家好, 我是Charlie, 是这个博客的创作人和维护人。</p>\n<a id=\"more\"></a>\n\n<p>​    这个博客创建并于2019年6月8日发布第一篇文章《Hello，world！》，这是这个博客的第一篇文章，用于致敬支持我搭建起这个博客的所有的知识的发现者和创造者。</p>\n<p>​    这是我的个人博客，纵然到了今天，已经不再有多少人拥有和使用博客，但我仍然坚信，在信息高度快餐化、碎片化的今天，一篇篇经过了深思熟虑的，或技术，或思考的文章，更能够承载起属于人类智慧的力量。</p>\n<p>​    在此之前，我曾在我的云服务器上运行了我的第一个网站，用于服务于我高中阶段所致力于创建和维护的社团。如今，我会从此开始，走向更远的地方。</p>\n<p>​    感谢每一个陪伴和关注的人。</p>\n","site":{"data":{}},"excerpt":"<p>​    大家好, 我是Charlie, 是这个博客的创作人和维护人。</p>","more":"<p>​    这个博客创建并于2019年6月8日发布第一篇文章《Hello，world！》，这是这个博客的第一篇文章，用于致敬支持我搭建起这个博客的所有的知识的发现者和创造者。</p>\n<p>​    这是我的个人博客，纵然到了今天，已经不再有多少人拥有和使用博客，但我仍然坚信，在信息高度快餐化、碎片化的今天，一篇篇经过了深思熟虑的，或技术，或思考的文章，更能够承载起属于人类智慧的力量。</p>\n<p>​    在此之前，我曾在我的云服务器上运行了我的第一个网站，用于服务于我高中阶段所致力于创建和维护的社团。如今，我会从此开始，走向更远的地方。</p>\n<p>​    感谢每一个陪伴和关注的人。</p>"},{"title":"ROS安装时的raw.gihubusercontent.com连不上咋办# 标题","date":"2019-10-31T16:00:00.000Z","_content":"1. 连不上是因为一些众所周知的原因...\n\n2. 解决思路:\n\n   1. 科学上网\n   2. 换一个能连上的\n   \n<!--more-->\n\n3. 我自己搭建了一个镜像, 简单来说, 你可以直接吧域名`raw.githubusercontent.com`改成`mirrors.vankyle.cn`, 其他的可以照原样. \n\n4. 修改的地方: 有以下几个\n\n   1. rosdistro下的`__init__.py`里定义了一个常量叫`DEFAULT_INDEX_URL`\n   2. rosdistro下`github.py`下有两个函数, 一个`package_xml_in_parents`里面的`url`这个变量\n   3. 还是这个文件下有个`_get_url_contents(url)`里面也是有个叫`url`的变量\n   4. rosdep下有三个\n      1. gbpdistro_support.py的`FURTER_GBPDISTRO_URL`\n      2. rep3.py的REP3_TARGETS_URL\n      3. sources_list.py的`DEFAULT_SOURCES_LIST_URL`\n\n   以上这几个地方的`raw.githubusercontent.com`全部改成mirrors.vankyle.cn就可以了\n\n\n\n报这个错是因为https://raw.githubusercontent.com/ros/rosdistro/这个的库里的raw文件没办法直接下载下来, 那我们就直接把这个库clone到一个我们可以下载的地方就好了. \n所以我自己搭了一个镜像, 用起来有点麻烦, 但是可以解决问题. 简单来说, 就是把那个域名raw.githubusercontent.com改成我的镜像网址mirrors.vankyle.cn\n具体的修改方法如下:\n找到/usr/lib/python2.7/dist-packages/这个目录, 这个目录下有两个地方需要改:, 一个rosdep2, 一个rosdistro. \n这两个地方下面有几个.py文件里定义了Url, 把那个Url里面的域名修改一下就可以了. 这几个URL的位置如下: \n\n1. rosdistro下的`__init__.py`里定义了一个常量叫`DEFAULT_INDEX_URL`\n2. rosdistro下`github.py`下有两个函数, 一个`package_xml_in_parents`里面的`url`这个变量\n3. 还是这个文件下有个`_get_url_contents(url)`里面也是有个叫`url`的变量\n4. rosdep下有三个\n   1. gbpdistro_support.py的`FURTER_GBPDISTRO_URL`\n   2. rep3.py的`REP3_TARGETS_URL`\n   3.  sources_list.py的`DEFAULT_SOURCES_LIST_URL`\n\n如果你找到这几个文件, 就可以看见这几个url都是https://raw.githubusercontent.com/xxxxxx的, 把里面的raw.guthubusercontent.com改成我的镜像mirrors.vankyle.cn就可以了\n\n提示: vim里面可以用:%s/被替换的内容/替换成的内容/g (g表示见到就替换, 全文都这样)来实现替换\n\n毕竟是个人的土办法, 当然, 也可以科学x网, 或者换一个其他的靠谱的源. mirrors.vankyle.cn这个源是我自己搭建的, 可能不是很快, 但能用了. \n\n仅供参考, 如果有帮助, 不胜荣幸. 如果有更好的办法, 欢迎讨论\n\n","source":"_posts/ROS安装时的raw.gihubusercontent.com连不上咋办.md","raw":"---\ntitle: ROS安装时的raw.gihubusercontent.com连不上咋办# 标题\ndate: 2019/11/1 # 时间\ncategories: # 分类\n- Experience\ntags: # 标签\n- ROS\n- Ubuntu\n---\n1. 连不上是因为一些众所周知的原因...\n\n2. 解决思路:\n\n   1. 科学上网\n   2. 换一个能连上的\n   \n<!--more-->\n\n3. 我自己搭建了一个镜像, 简单来说, 你可以直接吧域名`raw.githubusercontent.com`改成`mirrors.vankyle.cn`, 其他的可以照原样. \n\n4. 修改的地方: 有以下几个\n\n   1. rosdistro下的`__init__.py`里定义了一个常量叫`DEFAULT_INDEX_URL`\n   2. rosdistro下`github.py`下有两个函数, 一个`package_xml_in_parents`里面的`url`这个变量\n   3. 还是这个文件下有个`_get_url_contents(url)`里面也是有个叫`url`的变量\n   4. rosdep下有三个\n      1. gbpdistro_support.py的`FURTER_GBPDISTRO_URL`\n      2. rep3.py的REP3_TARGETS_URL\n      3. sources_list.py的`DEFAULT_SOURCES_LIST_URL`\n\n   以上这几个地方的`raw.githubusercontent.com`全部改成mirrors.vankyle.cn就可以了\n\n\n\n报这个错是因为https://raw.githubusercontent.com/ros/rosdistro/这个的库里的raw文件没办法直接下载下来, 那我们就直接把这个库clone到一个我们可以下载的地方就好了. \n所以我自己搭了一个镜像, 用起来有点麻烦, 但是可以解决问题. 简单来说, 就是把那个域名raw.githubusercontent.com改成我的镜像网址mirrors.vankyle.cn\n具体的修改方法如下:\n找到/usr/lib/python2.7/dist-packages/这个目录, 这个目录下有两个地方需要改:, 一个rosdep2, 一个rosdistro. \n这两个地方下面有几个.py文件里定义了Url, 把那个Url里面的域名修改一下就可以了. 这几个URL的位置如下: \n\n1. rosdistro下的`__init__.py`里定义了一个常量叫`DEFAULT_INDEX_URL`\n2. rosdistro下`github.py`下有两个函数, 一个`package_xml_in_parents`里面的`url`这个变量\n3. 还是这个文件下有个`_get_url_contents(url)`里面也是有个叫`url`的变量\n4. rosdep下有三个\n   1. gbpdistro_support.py的`FURTER_GBPDISTRO_URL`\n   2. rep3.py的`REP3_TARGETS_URL`\n   3.  sources_list.py的`DEFAULT_SOURCES_LIST_URL`\n\n如果你找到这几个文件, 就可以看见这几个url都是https://raw.githubusercontent.com/xxxxxx的, 把里面的raw.guthubusercontent.com改成我的镜像mirrors.vankyle.cn就可以了\n\n提示: vim里面可以用:%s/被替换的内容/替换成的内容/g (g表示见到就替换, 全文都这样)来实现替换\n\n毕竟是个人的土办法, 当然, 也可以科学x网, 或者换一个其他的靠谱的源. mirrors.vankyle.cn这个源是我自己搭建的, 可能不是很快, 但能用了. \n\n仅供参考, 如果有帮助, 不胜荣幸. 如果有更好的办法, 欢迎讨论\n\n","slug":"ROS安装时的raw.gihubusercontent.com连不上咋办","published":1,"updated":"2020-05-05T16:16:19.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9u4lybs000ds2s98edxa4ls","content":"<ol>\n<li><p>连不上是因为一些众所周知的原因…</p>\n</li>\n<li><p>解决思路:</p>\n<ol>\n<li>科学上网</li>\n<li>换一个能连上的</li>\n</ol>\n</li>\n</ol>\n<a id=\"more\"></a>\n\n<ol start=\"3\">\n<li><p>我自己搭建了一个镜像, 简单来说, 你可以直接吧域名<code>raw.githubusercontent.com</code>改成<code>mirrors.vankyle.cn</code>, 其他的可以照原样. </p>\n</li>\n<li><p>修改的地方: 有以下几个</p>\n<ol>\n<li>rosdistro下的<code>__init__.py</code>里定义了一个常量叫<code>DEFAULT_INDEX_URL</code></li>\n<li>rosdistro下<code>github.py</code>下有两个函数, 一个<code>package_xml_in_parents</code>里面的<code>url</code>这个变量</li>\n<li>还是这个文件下有个<code>_get_url_contents(url)</code>里面也是有个叫<code>url</code>的变量</li>\n<li>rosdep下有三个<ol>\n<li>gbpdistro_support.py的<code>FURTER_GBPDISTRO_URL</code></li>\n<li>rep3.py的REP3_TARGETS_URL</li>\n<li>sources_list.py的<code>DEFAULT_SOURCES_LIST_URL</code></li>\n</ol>\n</li>\n</ol>\n<p>以上这几个地方的<code>raw.githubusercontent.com</code>全部改成mirrors.vankyle.cn就可以了</p>\n</li>\n</ol>\n<p>报这个错是因为<a href=\"https://raw.githubusercontent.com/ros/rosdistro/这个的库里的raw文件没办法直接下载下来\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/ros/rosdistro/这个的库里的raw文件没办法直接下载下来</a>, 那我们就直接把这个库clone到一个我们可以下载的地方就好了.<br>所以我自己搭了一个镜像, 用起来有点麻烦, 但是可以解决问题. 简单来说, 就是把那个域名raw.githubusercontent.com改成我的镜像网址mirrors.vankyle.cn<br>具体的修改方法如下:<br>找到/usr/lib/python2.7/dist-packages/这个目录, 这个目录下有两个地方需要改:, 一个rosdep2, 一个rosdistro.<br>这两个地方下面有几个.py文件里定义了Url, 把那个Url里面的域名修改一下就可以了. 这几个URL的位置如下: </p>\n<ol>\n<li>rosdistro下的<code>__init__.py</code>里定义了一个常量叫<code>DEFAULT_INDEX_URL</code></li>\n<li>rosdistro下<code>github.py</code>下有两个函数, 一个<code>package_xml_in_parents</code>里面的<code>url</code>这个变量</li>\n<li>还是这个文件下有个<code>_get_url_contents(url)</code>里面也是有个叫<code>url</code>的变量</li>\n<li>rosdep下有三个<ol>\n<li>gbpdistro_support.py的<code>FURTER_GBPDISTRO_URL</code></li>\n<li>rep3.py的<code>REP3_TARGETS_URL</code></li>\n<li>sources_list.py的<code>DEFAULT_SOURCES_LIST_URL</code></li>\n</ol>\n</li>\n</ol>\n<p>如果你找到这几个文件, 就可以看见这几个url都是<a href=\"https://raw.githubusercontent.com/xxxxxx的\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/xxxxxx的</a>, 把里面的raw.guthubusercontent.com改成我的镜像mirrors.vankyle.cn就可以了</p>\n<p>提示: vim里面可以用:%s/被替换的内容/替换成的内容/g (g表示见到就替换, 全文都这样)来实现替换</p>\n<p>毕竟是个人的土办法, 当然, 也可以科学x网, 或者换一个其他的靠谱的源. mirrors.vankyle.cn这个源是我自己搭建的, 可能不是很快, 但能用了. </p>\n<p>仅供参考, 如果有帮助, 不胜荣幸. 如果有更好的办法, 欢迎讨论</p>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>连不上是因为一些众所周知的原因…</p>\n</li>\n<li><p>解决思路:</p>\n<ol>\n<li>科学上网</li>\n<li>换一个能连上的</li>\n</ol>\n</li>\n</ol>","more":"<ol start=\"3\">\n<li><p>我自己搭建了一个镜像, 简单来说, 你可以直接吧域名<code>raw.githubusercontent.com</code>改成<code>mirrors.vankyle.cn</code>, 其他的可以照原样. </p>\n</li>\n<li><p>修改的地方: 有以下几个</p>\n<ol>\n<li>rosdistro下的<code>__init__.py</code>里定义了一个常量叫<code>DEFAULT_INDEX_URL</code></li>\n<li>rosdistro下<code>github.py</code>下有两个函数, 一个<code>package_xml_in_parents</code>里面的<code>url</code>这个变量</li>\n<li>还是这个文件下有个<code>_get_url_contents(url)</code>里面也是有个叫<code>url</code>的变量</li>\n<li>rosdep下有三个<ol>\n<li>gbpdistro_support.py的<code>FURTER_GBPDISTRO_URL</code></li>\n<li>rep3.py的REP3_TARGETS_URL</li>\n<li>sources_list.py的<code>DEFAULT_SOURCES_LIST_URL</code></li>\n</ol>\n</li>\n</ol>\n<p>以上这几个地方的<code>raw.githubusercontent.com</code>全部改成mirrors.vankyle.cn就可以了</p>\n</li>\n</ol>\n<p>报这个错是因为<a href=\"https://raw.githubusercontent.com/ros/rosdistro/这个的库里的raw文件没办法直接下载下来\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/ros/rosdistro/这个的库里的raw文件没办法直接下载下来</a>, 那我们就直接把这个库clone到一个我们可以下载的地方就好了.<br>所以我自己搭了一个镜像, 用起来有点麻烦, 但是可以解决问题. 简单来说, 就是把那个域名raw.githubusercontent.com改成我的镜像网址mirrors.vankyle.cn<br>具体的修改方法如下:<br>找到/usr/lib/python2.7/dist-packages/这个目录, 这个目录下有两个地方需要改:, 一个rosdep2, 一个rosdistro.<br>这两个地方下面有几个.py文件里定义了Url, 把那个Url里面的域名修改一下就可以了. 这几个URL的位置如下: </p>\n<ol>\n<li>rosdistro下的<code>__init__.py</code>里定义了一个常量叫<code>DEFAULT_INDEX_URL</code></li>\n<li>rosdistro下<code>github.py</code>下有两个函数, 一个<code>package_xml_in_parents</code>里面的<code>url</code>这个变量</li>\n<li>还是这个文件下有个<code>_get_url_contents(url)</code>里面也是有个叫<code>url</code>的变量</li>\n<li>rosdep下有三个<ol>\n<li>gbpdistro_support.py的<code>FURTER_GBPDISTRO_URL</code></li>\n<li>rep3.py的<code>REP3_TARGETS_URL</code></li>\n<li>sources_list.py的<code>DEFAULT_SOURCES_LIST_URL</code></li>\n</ol>\n</li>\n</ol>\n<p>如果你找到这几个文件, 就可以看见这几个url都是<a href=\"https://raw.githubusercontent.com/xxxxxx的\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/xxxxxx的</a>, 把里面的raw.guthubusercontent.com改成我的镜像mirrors.vankyle.cn就可以了</p>\n<p>提示: vim里面可以用:%s/被替换的内容/替换成的内容/g (g表示见到就替换, 全文都这样)来实现替换</p>\n<p>毕竟是个人的土办法, 当然, 也可以科学x网, 或者换一个其他的靠谱的源. mirrors.vankyle.cn这个源是我自己搭建的, 可能不是很快, 但能用了. </p>\n<p>仅供参考, 如果有帮助, 不胜荣幸. 如果有更好的办法, 欢迎讨论</p>"},{"title":"在多台机器上运行ROS-理论篇","date":"2020-02-28T15:58:22.000Z","_content":"\n​\t由于仿真需要, 准备在同一个局域网内开多个容器进行多机协同演练. 这需要在一个局域网内把多个机器的节点链接起来. 查阅官网的教程, 记录如下, 之后可能会补一个实操篇, 记录自己的操作流程.\n<!--more-->\n### 概述\n\nROS设计的灵魂就在于其分布式计算。一个优秀的节点不需要考虑在哪台机器上运行，它允许实时分配计算量以最大化的利用系统资源。(有一个特例——驱动节点必须运行在跟硬件设备有物理连接的机器上）。在多个机器人上使用ROS是一件很简单的事，你只需要记住一下几点：  \n\n- 你只需要一个master，只要在一个机器上运行它就可以了。 \n- 所有节点都必须通过配置 `ROS_MASTER_URI`连接到同一个master。 \n- 任意两台机器间任意两端口都必须要有完整的、双向连接的网络。(参考[ROS/NetworkSetup](http://wiki.ros.org/ROS/NetworkSetup)). \n- 每台机器都必须向其他机器广播其能够解析的名字。(参考 [ROS/NetworkSetup](http://wiki.ros.org/ROS/NetworkSetup)). \n\n###　跨机器运行的 Talker / listener\n\n假如说我们希望在两台机器上分别运行talker / listener， 主机名分别为 **marvin** 和 **hal**.登陆主机名为｀`marvin`的机器,你只要: \n\n```sh\nssh marvin@192.168.0.1\n```\n\n同样的方法可以登陆`hal`. \n\n你还需配置ROS_IP为当前的局域网ip地址。(利用ifconfig指令可以查看你当前的ip地址）。其次，很有可能你的主机名不能够被其他机器解析，所以保险的方法是利用 ssh hostname@local_ip的方式进行登陆(如*ssh [turtlebot@192.168.1.100](mailto:turtlebot@192.168.1.100)*)。再者，ROS_MASTER_URI最好也用运行master的那台机器的ip地址来替换主机名（如：*export ROS_MASTER_URI=http://192.168.1.100:11311*) \n\n### 启动 Listener\n\n在`hal`机器上启用Listener, 并且配置ROS_MASTER_URL来使用`hal`机器上的Master. 你也可以在其他机器上运行master。\n\n```sh\nssh marvin@192.168.0.1\nexport ROS_MASTER_URL=http://hal:11311\nrosrun rospy_tutorial talker.py\n```\n\n小惊喜: 现在你可以看到机器**hal**上的listener正在接收来自**marvin**机器上talker发布的消息。 \n\n请注意，talker / listener启动的顺序是没有要求的， 唯一的要求就是master必须先于节点启动。 \n\n### 反向测试\n\n现在我们来尝试一下反向测试。终止talker和listener的运行，但仍然保留master在机器 **hal**上，然后让talker和listerner交换机器运行。 \n\n首先，在机器**marvin**启动listerner: \n\n```sh\nssh marvin@192.168.0.1\nexport ROS_MASTER_URI=http://hal:11311\nrosrun rospy_tutorials listener.py\n```\n\n然后在机器**hal**上启动talker: \n\n```sh\nssh hal@192.168.0.2\nexport ROS_MASTER_URI=http://hal:11311\nrosrun rospy_tutorials talker.py\n```\n\n### 运行出错\n\n如果没有取得如上预期的效果，那么很有可能是你的网络配置出错了。参考[ROS/NetworkSetup](http://wiki.ros.org/ROS/NetworkSetup)重新配置你的网络。 \n\n","source":"_posts/Run-ROS-on-Multiple-Machines.md","raw":"---\ntitle: '在多台机器上运行ROS-理论篇'\ndate: 2020-02-28 23:58:22\ncategory: Tutorial\ntags: \n- ROS\n- Network\n---\n\n​\t由于仿真需要, 准备在同一个局域网内开多个容器进行多机协同演练. 这需要在一个局域网内把多个机器的节点链接起来. 查阅官网的教程, 记录如下, 之后可能会补一个实操篇, 记录自己的操作流程.\n<!--more-->\n### 概述\n\nROS设计的灵魂就在于其分布式计算。一个优秀的节点不需要考虑在哪台机器上运行，它允许实时分配计算量以最大化的利用系统资源。(有一个特例——驱动节点必须运行在跟硬件设备有物理连接的机器上）。在多个机器人上使用ROS是一件很简单的事，你只需要记住一下几点：  \n\n- 你只需要一个master，只要在一个机器上运行它就可以了。 \n- 所有节点都必须通过配置 `ROS_MASTER_URI`连接到同一个master。 \n- 任意两台机器间任意两端口都必须要有完整的、双向连接的网络。(参考[ROS/NetworkSetup](http://wiki.ros.org/ROS/NetworkSetup)). \n- 每台机器都必须向其他机器广播其能够解析的名字。(参考 [ROS/NetworkSetup](http://wiki.ros.org/ROS/NetworkSetup)). \n\n###　跨机器运行的 Talker / listener\n\n假如说我们希望在两台机器上分别运行talker / listener， 主机名分别为 **marvin** 和 **hal**.登陆主机名为｀`marvin`的机器,你只要: \n\n```sh\nssh marvin@192.168.0.1\n```\n\n同样的方法可以登陆`hal`. \n\n你还需配置ROS_IP为当前的局域网ip地址。(利用ifconfig指令可以查看你当前的ip地址）。其次，很有可能你的主机名不能够被其他机器解析，所以保险的方法是利用 ssh hostname@local_ip的方式进行登陆(如*ssh [turtlebot@192.168.1.100](mailto:turtlebot@192.168.1.100)*)。再者，ROS_MASTER_URI最好也用运行master的那台机器的ip地址来替换主机名（如：*export ROS_MASTER_URI=http://192.168.1.100:11311*) \n\n### 启动 Listener\n\n在`hal`机器上启用Listener, 并且配置ROS_MASTER_URL来使用`hal`机器上的Master. 你也可以在其他机器上运行master。\n\n```sh\nssh marvin@192.168.0.1\nexport ROS_MASTER_URL=http://hal:11311\nrosrun rospy_tutorial talker.py\n```\n\n小惊喜: 现在你可以看到机器**hal**上的listener正在接收来自**marvin**机器上talker发布的消息。 \n\n请注意，talker / listener启动的顺序是没有要求的， 唯一的要求就是master必须先于节点启动。 \n\n### 反向测试\n\n现在我们来尝试一下反向测试。终止talker和listener的运行，但仍然保留master在机器 **hal**上，然后让talker和listerner交换机器运行。 \n\n首先，在机器**marvin**启动listerner: \n\n```sh\nssh marvin@192.168.0.1\nexport ROS_MASTER_URI=http://hal:11311\nrosrun rospy_tutorials listener.py\n```\n\n然后在机器**hal**上启动talker: \n\n```sh\nssh hal@192.168.0.2\nexport ROS_MASTER_URI=http://hal:11311\nrosrun rospy_tutorials talker.py\n```\n\n### 运行出错\n\n如果没有取得如上预期的效果，那么很有可能是你的网络配置出错了。参考[ROS/NetworkSetup](http://wiki.ros.org/ROS/NetworkSetup)重新配置你的网络。 \n\n","slug":"Run-ROS-on-Multiple-Machines","published":1,"updated":"2020-05-05T16:16:19.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9u4lybv000es2s97twc4c9g","content":"<p>​    由于仿真需要, 准备在同一个局域网内开多个容器进行多机协同演练. 这需要在一个局域网内把多个机器的节点链接起来. 查阅官网的教程, 记录如下, 之后可能会补一个实操篇, 记录自己的操作流程.</p>\n<a id=\"more\"></a>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>ROS设计的灵魂就在于其分布式计算。一个优秀的节点不需要考虑在哪台机器上运行，它允许实时分配计算量以最大化的利用系统资源。(有一个特例——驱动节点必须运行在跟硬件设备有物理连接的机器上）。在多个机器人上使用ROS是一件很简单的事，你只需要记住一下几点：  </p>\n<ul>\n<li>你只需要一个master，只要在一个机器上运行它就可以了。 </li>\n<li>所有节点都必须通过配置 <code>ROS_MASTER_URI</code>连接到同一个master。 </li>\n<li>任意两台机器间任意两端口都必须要有完整的、双向连接的网络。(参考<a href=\"http://wiki.ros.org/ROS/NetworkSetup\" target=\"_blank\" rel=\"noopener\">ROS/NetworkSetup</a>). </li>\n<li>每台机器都必须向其他机器广播其能够解析的名字。(参考 <a href=\"http://wiki.ros.org/ROS/NetworkSetup\" target=\"_blank\" rel=\"noopener\">ROS/NetworkSetup</a>). </li>\n</ul>\n<p>###　跨机器运行的 Talker / listener</p>\n<p>假如说我们希望在两台机器上分别运行talker / listener， 主机名分别为 <strong>marvin</strong> 和 <strong>hal</strong>.登陆主机名为｀<code>marvin</code>的机器,你只要: </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh marvin@192.168.0.1</span><br></pre></td></tr></table></figure>\n\n<p>同样的方法可以登陆<code>hal</code>. </p>\n<p>你还需配置ROS_IP为当前的局域网ip地址。(利用ifconfig指令可以查看你当前的ip地址）。其次，很有可能你的主机名不能够被其他机器解析，所以保险的方法是利用 ssh hostname@local_ip的方式进行登陆(如<em>ssh <a href=\"mailto:turtlebot@192.168.1.100\">turtlebot@192.168.1.100</a></em>)。再者，ROS_MASTER_URI最好也用运行master的那台机器的ip地址来替换主机名（如：<em>export ROS_MASTER_URI=<a href=\"http://192.168.1.100:11311\" target=\"_blank\" rel=\"noopener\">http://192.168.1.100:11311</a></em>) </p>\n<h3 id=\"启动-Listener\"><a href=\"#启动-Listener\" class=\"headerlink\" title=\"启动 Listener\"></a>启动 Listener</h3><p>在<code>hal</code>机器上启用Listener, 并且配置ROS_MASTER_URL来使用<code>hal</code>机器上的Master. 你也可以在其他机器上运行master。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh marvin@192.168.0.1</span><br><span class=\"line\"><span class=\"built_in\">export</span> ROS_MASTER_URL=http://hal:11311</span><br><span class=\"line\">rosrun rospy_tutorial talker.py</span><br></pre></td></tr></table></figure>\n\n<p>小惊喜: 现在你可以看到机器<strong>hal</strong>上的listener正在接收来自<strong>marvin</strong>机器上talker发布的消息。 </p>\n<p>请注意，talker / listener启动的顺序是没有要求的， 唯一的要求就是master必须先于节点启动。 </p>\n<h3 id=\"反向测试\"><a href=\"#反向测试\" class=\"headerlink\" title=\"反向测试\"></a>反向测试</h3><p>现在我们来尝试一下反向测试。终止talker和listener的运行，但仍然保留master在机器 <strong>hal</strong>上，然后让talker和listerner交换机器运行。 </p>\n<p>首先，在机器<strong>marvin</strong>启动listerner: </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh marvin@192.168.0.1</span><br><span class=\"line\"><span class=\"built_in\">export</span> ROS_MASTER_URI=http://hal:11311</span><br><span class=\"line\">rosrun rospy_tutorials listener.py</span><br></pre></td></tr></table></figure>\n\n<p>然后在机器<strong>hal</strong>上启动talker: </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh hal@192.168.0.2</span><br><span class=\"line\"><span class=\"built_in\">export</span> ROS_MASTER_URI=http://hal:11311</span><br><span class=\"line\">rosrun rospy_tutorials talker.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行出错\"><a href=\"#运行出错\" class=\"headerlink\" title=\"运行出错\"></a>运行出错</h3><p>如果没有取得如上预期的效果，那么很有可能是你的网络配置出错了。参考<a href=\"http://wiki.ros.org/ROS/NetworkSetup\" target=\"_blank\" rel=\"noopener\">ROS/NetworkSetup</a>重新配置你的网络。 </p>\n","site":{"data":{}},"excerpt":"<p>​    由于仿真需要, 准备在同一个局域网内开多个容器进行多机协同演练. 这需要在一个局域网内把多个机器的节点链接起来. 查阅官网的教程, 记录如下, 之后可能会补一个实操篇, 记录自己的操作流程.</p>","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>ROS设计的灵魂就在于其分布式计算。一个优秀的节点不需要考虑在哪台机器上运行，它允许实时分配计算量以最大化的利用系统资源。(有一个特例——驱动节点必须运行在跟硬件设备有物理连接的机器上）。在多个机器人上使用ROS是一件很简单的事，你只需要记住一下几点：  </p>\n<ul>\n<li>你只需要一个master，只要在一个机器上运行它就可以了。 </li>\n<li>所有节点都必须通过配置 <code>ROS_MASTER_URI</code>连接到同一个master。 </li>\n<li>任意两台机器间任意两端口都必须要有完整的、双向连接的网络。(参考<a href=\"http://wiki.ros.org/ROS/NetworkSetup\" target=\"_blank\" rel=\"noopener\">ROS/NetworkSetup</a>). </li>\n<li>每台机器都必须向其他机器广播其能够解析的名字。(参考 <a href=\"http://wiki.ros.org/ROS/NetworkSetup\" target=\"_blank\" rel=\"noopener\">ROS/NetworkSetup</a>). </li>\n</ul>\n<p>###　跨机器运行的 Talker / listener</p>\n<p>假如说我们希望在两台机器上分别运行talker / listener， 主机名分别为 <strong>marvin</strong> 和 <strong>hal</strong>.登陆主机名为｀<code>marvin</code>的机器,你只要: </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh marvin@192.168.0.1</span><br></pre></td></tr></table></figure>\n\n<p>同样的方法可以登陆<code>hal</code>. </p>\n<p>你还需配置ROS_IP为当前的局域网ip地址。(利用ifconfig指令可以查看你当前的ip地址）。其次，很有可能你的主机名不能够被其他机器解析，所以保险的方法是利用 ssh hostname@local_ip的方式进行登陆(如<em>ssh <a href=\"mailto:turtlebot@192.168.1.100\">turtlebot@192.168.1.100</a></em>)。再者，ROS_MASTER_URI最好也用运行master的那台机器的ip地址来替换主机名（如：<em>export ROS_MASTER_URI=<a href=\"http://192.168.1.100:11311\" target=\"_blank\" rel=\"noopener\">http://192.168.1.100:11311</a></em>) </p>\n<h3 id=\"启动-Listener\"><a href=\"#启动-Listener\" class=\"headerlink\" title=\"启动 Listener\"></a>启动 Listener</h3><p>在<code>hal</code>机器上启用Listener, 并且配置ROS_MASTER_URL来使用<code>hal</code>机器上的Master. 你也可以在其他机器上运行master。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh marvin@192.168.0.1</span><br><span class=\"line\"><span class=\"built_in\">export</span> ROS_MASTER_URL=http://hal:11311</span><br><span class=\"line\">rosrun rospy_tutorial talker.py</span><br></pre></td></tr></table></figure>\n\n<p>小惊喜: 现在你可以看到机器<strong>hal</strong>上的listener正在接收来自<strong>marvin</strong>机器上talker发布的消息。 </p>\n<p>请注意，talker / listener启动的顺序是没有要求的， 唯一的要求就是master必须先于节点启动。 </p>\n<h3 id=\"反向测试\"><a href=\"#反向测试\" class=\"headerlink\" title=\"反向测试\"></a>反向测试</h3><p>现在我们来尝试一下反向测试。终止talker和listener的运行，但仍然保留master在机器 <strong>hal</strong>上，然后让talker和listerner交换机器运行。 </p>\n<p>首先，在机器<strong>marvin</strong>启动listerner: </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh marvin@192.168.0.1</span><br><span class=\"line\"><span class=\"built_in\">export</span> ROS_MASTER_URI=http://hal:11311</span><br><span class=\"line\">rosrun rospy_tutorials listener.py</span><br></pre></td></tr></table></figure>\n\n<p>然后在机器<strong>hal</strong>上启动talker: </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh hal@192.168.0.2</span><br><span class=\"line\"><span class=\"built_in\">export</span> ROS_MASTER_URI=http://hal:11311</span><br><span class=\"line\">rosrun rospy_tutorials talker.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行出错\"><a href=\"#运行出错\" class=\"headerlink\" title=\"运行出错\"></a>运行出错</h3><p>如果没有取得如上预期的效果，那么很有可能是你的网络配置出错了。参考<a href=\"http://wiki.ros.org/ROS/NetworkSetup\" target=\"_blank\" rel=\"noopener\">ROS/NetworkSetup</a>重新配置你的网络。 </p>"},{"title":"std::vector","date":"2020-03-03T10:50:03.000Z","_content":"\n今天做题的时候用到了`std::vector`, 这里记录一下，内容主要来自《C++标准库》这本书。\n\n<!--more-->\n\n根据C++standard，vector是以dynamic array实现的。在使用之前需要包含头文件`<vector>`\n\n```c++\n#include <vector>\n```\n\n### 大小和容量\n\nVector本身效率很高，但代价是需要分配出更大的空间。所以相比起一些手动算法，在空间控制上可能没那么理想。\n\n想要获得当前vector内的元素个数，可以使用`size()`方法。\n\n```c++\n//std::vector<int> coll\ncoll.size()\n```\n\n可以直接返回一个整数，其大小是这个vector内的元素个数。\n\n如果这个vector是空的，则`coll.empty()`会返回`true`。\n\n除此之外，还涉及一个问题就是一个vector的容量（Capacity）。特别是如果你需要使用频繁、大规模地使用Vector可以改变长度这个特性的话，尤其需要注意。因为vector在运行过程中可能会重新分配空间，这将导致地址发生变化，如果不做任何措施，原有的引用、指针和迭代器等都可能会失效。而且重新分配内存很耗时间。序偶一你需要好好考虑容量问题。\n\n​\t你可以使用`reserve()`来保留适当的容量以避免因容量不够而重新分配内存：\n\n```c++\nstd::vector<int> v;\nv.reserve(80);//reserve memroy for 80 elements\n```\n\n但vector不能像string那样用`reserve()`来减小容量。vector的容量不能缩减(但长度可以缩减)。如果给`reserve()`的参数小于当前容量，什么也不会发生。\n\n### 几种比较常见的操作\n\n`c.empty()`: 返回是否为空\n\n`c.size()`：返回元素个数\n\n`c.max_size()`发挥元素个数之最大可能量\n\n`c.assign(n, elem)`: 复制n个elem赋给C\n\n`c.assign(begin, end)`: 将区间[begin, end)内的元素赋给c\n\n`c.assign(initlist)`: 用初始值列表给c赋值\n\n`c1.swap()`或`swap(c1, c2)`: 置换c1和c2的数据\n\n#### 访问操作\n\n`c[index]`(不检查范围)或`c.at(index)`（检查范围）\n\n`c.front()`返回首元素\n\n`c.back()`返回末尾元素\n\n### 迭代器相关\n\n`c.begin()`, `c.end()`返回一个random-access iterator指向首、尾元素\n\n`c.cbegin()`, `c.cend()` 返回一个const ramdom-access iterator指向首、尾元素\n\n`c.rbegin()`, `c.rend()`, `c.crbegin()`, `c.crend()`返回反向迭代的首尾元素迭代器\n\n#### 利用迭代器的一些操作\n\n`c.push_back(elem)`: 附加一个elem拷贝于末尾\n\n`c.pop_back()`: ...上面的逆操作\n\n`c.insert()`支持以下参数列表：\n\n`pos, elem`\n\n`pos, n, elem`\n\n`pos, begin, end`\n\n`pos, initlist`\n\n`c.emplace(pos, args...)`\n\n`e.emplace_back(args...)`\n\n`c.erase(pos)`: 移除pos这个iterator上的元素\n\n`e.erase(begin, end)`： 移除从begin到end中间所有的元素\n\n所以如果你想移除“与某个值相等”的元素，虽然vector没有直接提供，但是可以通过其他一些辅助函数来实现。比如，你可以通过下面这个语句将所有值为val的元素移除\n\n```c++\n#include<algorithm>//提供remove函数的声明\nstd::vector<elem> coll;\n...\n//remove al elements with value val\ncoll.erase(remove(coll.begin(), coll.end(), val), coll.end());\n```\n\n如果你想只删除值一样的第一个元素：\n\n```c++\nstd::vector<elem> coll;\n...\nstd::vector<elem>::iterator pos;\npos=find(coll.begin(), coll.end(), val);\nif(pos!=coll.end())\n{\n    coll.erase(pos);\n}\n```\n\n\n\n###　关于Vector的异常处理\n\n除非用户自定义了新的异常，或者标准异常（比如`bad_alloc`), `c.at()`是唯一一个标准认可的可以抛出异常的函数. 其他的函数，基本都不会抛出异常，甚至标准还保证类似`push_back()`这样的方法绝对不会抛出异常。\n\n","source":"_posts/std-vector.md","raw":"---\ntitle: 'std::vector'\ndate: 2020-03-03 18:50:03\ntags: \n- C++\n- libstd\n---\n\n今天做题的时候用到了`std::vector`, 这里记录一下，内容主要来自《C++标准库》这本书。\n\n<!--more-->\n\n根据C++standard，vector是以dynamic array实现的。在使用之前需要包含头文件`<vector>`\n\n```c++\n#include <vector>\n```\n\n### 大小和容量\n\nVector本身效率很高，但代价是需要分配出更大的空间。所以相比起一些手动算法，在空间控制上可能没那么理想。\n\n想要获得当前vector内的元素个数，可以使用`size()`方法。\n\n```c++\n//std::vector<int> coll\ncoll.size()\n```\n\n可以直接返回一个整数，其大小是这个vector内的元素个数。\n\n如果这个vector是空的，则`coll.empty()`会返回`true`。\n\n除此之外，还涉及一个问题就是一个vector的容量（Capacity）。特别是如果你需要使用频繁、大规模地使用Vector可以改变长度这个特性的话，尤其需要注意。因为vector在运行过程中可能会重新分配空间，这将导致地址发生变化，如果不做任何措施，原有的引用、指针和迭代器等都可能会失效。而且重新分配内存很耗时间。序偶一你需要好好考虑容量问题。\n\n​\t你可以使用`reserve()`来保留适当的容量以避免因容量不够而重新分配内存：\n\n```c++\nstd::vector<int> v;\nv.reserve(80);//reserve memroy for 80 elements\n```\n\n但vector不能像string那样用`reserve()`来减小容量。vector的容量不能缩减(但长度可以缩减)。如果给`reserve()`的参数小于当前容量，什么也不会发生。\n\n### 几种比较常见的操作\n\n`c.empty()`: 返回是否为空\n\n`c.size()`：返回元素个数\n\n`c.max_size()`发挥元素个数之最大可能量\n\n`c.assign(n, elem)`: 复制n个elem赋给C\n\n`c.assign(begin, end)`: 将区间[begin, end)内的元素赋给c\n\n`c.assign(initlist)`: 用初始值列表给c赋值\n\n`c1.swap()`或`swap(c1, c2)`: 置换c1和c2的数据\n\n#### 访问操作\n\n`c[index]`(不检查范围)或`c.at(index)`（检查范围）\n\n`c.front()`返回首元素\n\n`c.back()`返回末尾元素\n\n### 迭代器相关\n\n`c.begin()`, `c.end()`返回一个random-access iterator指向首、尾元素\n\n`c.cbegin()`, `c.cend()` 返回一个const ramdom-access iterator指向首、尾元素\n\n`c.rbegin()`, `c.rend()`, `c.crbegin()`, `c.crend()`返回反向迭代的首尾元素迭代器\n\n#### 利用迭代器的一些操作\n\n`c.push_back(elem)`: 附加一个elem拷贝于末尾\n\n`c.pop_back()`: ...上面的逆操作\n\n`c.insert()`支持以下参数列表：\n\n`pos, elem`\n\n`pos, n, elem`\n\n`pos, begin, end`\n\n`pos, initlist`\n\n`c.emplace(pos, args...)`\n\n`e.emplace_back(args...)`\n\n`c.erase(pos)`: 移除pos这个iterator上的元素\n\n`e.erase(begin, end)`： 移除从begin到end中间所有的元素\n\n所以如果你想移除“与某个值相等”的元素，虽然vector没有直接提供，但是可以通过其他一些辅助函数来实现。比如，你可以通过下面这个语句将所有值为val的元素移除\n\n```c++\n#include<algorithm>//提供remove函数的声明\nstd::vector<elem> coll;\n...\n//remove al elements with value val\ncoll.erase(remove(coll.begin(), coll.end(), val), coll.end());\n```\n\n如果你想只删除值一样的第一个元素：\n\n```c++\nstd::vector<elem> coll;\n...\nstd::vector<elem>::iterator pos;\npos=find(coll.begin(), coll.end(), val);\nif(pos!=coll.end())\n{\n    coll.erase(pos);\n}\n```\n\n\n\n###　关于Vector的异常处理\n\n除非用户自定义了新的异常，或者标准异常（比如`bad_alloc`), `c.at()`是唯一一个标准认可的可以抛出异常的函数. 其他的函数，基本都不会抛出异常，甚至标准还保证类似`push_back()`这样的方法绝对不会抛出异常。\n\n","slug":"std-vector","published":1,"updated":"2020-05-05T16:16:19.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9u4lybz000js2s981j5eydu","content":"<p>今天做题的时候用到了<code>std::vector</code>, 这里记录一下，内容主要来自《C++标准库》这本书。</p>\n<a id=\"more\"></a>\n\n<p>根据C++standard，vector是以dynamic array实现的。在使用之前需要包含头文件<code>&lt;vector&gt;</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"大小和容量\"><a href=\"#大小和容量\" class=\"headerlink\" title=\"大小和容量\"></a>大小和容量</h3><p>Vector本身效率很高，但代价是需要分配出更大的空间。所以相比起一些手动算法，在空间控制上可能没那么理想。</p>\n<p>想要获得当前vector内的元素个数，可以使用<code>size()</code>方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//std::vector&lt;int&gt; coll</span></span><br><span class=\"line\">coll.<span class=\"built_in\">size</span>()</span><br></pre></td></tr></table></figure>\n\n<p>可以直接返回一个整数，其大小是这个vector内的元素个数。</p>\n<p>如果这个vector是空的，则<code>coll.empty()</code>会返回<code>true</code>。</p>\n<p>除此之外，还涉及一个问题就是一个vector的容量（Capacity）。特别是如果你需要使用频繁、大规模地使用Vector可以改变长度这个特性的话，尤其需要注意。因为vector在运行过程中可能会重新分配空间，这将导致地址发生变化，如果不做任何措施，原有的引用、指针和迭代器等都可能会失效。而且重新分配内存很耗时间。序偶一你需要好好考虑容量问题。</p>\n<p>​    你可以使用<code>reserve()</code>来保留适当的容量以避免因容量不够而重新分配内存：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">v.reserve(<span class=\"number\">80</span>);<span class=\"comment\">//reserve memroy for 80 elements</span></span><br></pre></td></tr></table></figure>\n\n<p>但vector不能像string那样用<code>reserve()</code>来减小容量。vector的容量不能缩减(但长度可以缩减)。如果给<code>reserve()</code>的参数小于当前容量，什么也不会发生。</p>\n<h3 id=\"几种比较常见的操作\"><a href=\"#几种比较常见的操作\" class=\"headerlink\" title=\"几种比较常见的操作\"></a>几种比较常见的操作</h3><p><code>c.empty()</code>: 返回是否为空</p>\n<p><code>c.size()</code>：返回元素个数</p>\n<p><code>c.max_size()</code>发挥元素个数之最大可能量</p>\n<p><code>c.assign(n, elem)</code>: 复制n个elem赋给C</p>\n<p><code>c.assign(begin, end)</code>: 将区间[begin, end)内的元素赋给c</p>\n<p><code>c.assign(initlist)</code>: 用初始值列表给c赋值</p>\n<p><code>c1.swap()</code>或<code>swap(c1, c2)</code>: 置换c1和c2的数据</p>\n<h4 id=\"访问操作\"><a href=\"#访问操作\" class=\"headerlink\" title=\"访问操作\"></a>访问操作</h4><p><code>c[index]</code>(不检查范围)或<code>c.at(index)</code>（检查范围）</p>\n<p><code>c.front()</code>返回首元素</p>\n<p><code>c.back()</code>返回末尾元素</p>\n<h3 id=\"迭代器相关\"><a href=\"#迭代器相关\" class=\"headerlink\" title=\"迭代器相关\"></a>迭代器相关</h3><p><code>c.begin()</code>, <code>c.end()</code>返回一个random-access iterator指向首、尾元素</p>\n<p><code>c.cbegin()</code>, <code>c.cend()</code> 返回一个const ramdom-access iterator指向首、尾元素</p>\n<p><code>c.rbegin()</code>, <code>c.rend()</code>, <code>c.crbegin()</code>, <code>c.crend()</code>返回反向迭代的首尾元素迭代器</p>\n<h4 id=\"利用迭代器的一些操作\"><a href=\"#利用迭代器的一些操作\" class=\"headerlink\" title=\"利用迭代器的一些操作\"></a>利用迭代器的一些操作</h4><p><code>c.push_back(elem)</code>: 附加一个elem拷贝于末尾</p>\n<p><code>c.pop_back()</code>: …上面的逆操作</p>\n<p><code>c.insert()</code>支持以下参数列表：</p>\n<p><code>pos, elem</code></p>\n<p><code>pos, n, elem</code></p>\n<p><code>pos, begin, end</code></p>\n<p><code>pos, initlist</code></p>\n<p><code>c.emplace(pos, args...)</code></p>\n<p><code>e.emplace_back(args...)</code></p>\n<p><code>c.erase(pos)</code>: 移除pos这个iterator上的元素</p>\n<p><code>e.erase(begin, end)</code>： 移除从begin到end中间所有的元素</p>\n<p>所以如果你想移除“与某个值相等”的元素，虽然vector没有直接提供，但是可以通过其他一些辅助函数来实现。比如，你可以通过下面这个语句将所有值为val的元素移除</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;//提供remove函数的声明</span></span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;elem&gt; coll;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">//remove al elements with value val</span></span><br><span class=\"line\">coll.erase(<span class=\"built_in\">remove</span>(coll.<span class=\"built_in\">begin</span>(), coll.<span class=\"built_in\">end</span>(), val), coll.<span class=\"built_in\">end</span>());</span><br></pre></td></tr></table></figure>\n\n<p>如果你想只删除值一样的第一个元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;elem&gt; coll;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;elem&gt;::iterator pos;</span><br><span class=\"line\">pos=<span class=\"built_in\">find</span>(coll.<span class=\"built_in\">begin</span>(), coll.<span class=\"built_in\">end</span>(), val);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(pos!=coll.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    coll.erase(pos);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>###　关于Vector的异常处理</p>\n<p>除非用户自定义了新的异常，或者标准异常（比如<code>bad_alloc</code>), <code>c.at()</code>是唯一一个标准认可的可以抛出异常的函数. 其他的函数，基本都不会抛出异常，甚至标准还保证类似<code>push_back()</code>这样的方法绝对不会抛出异常。</p>\n","site":{"data":{}},"excerpt":"<p>今天做题的时候用到了<code>std::vector</code>, 这里记录一下，内容主要来自《C++标准库》这本书。</p>","more":"<p>根据C++standard，vector是以dynamic array实现的。在使用之前需要包含头文件<code>&lt;vector&gt;</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"大小和容量\"><a href=\"#大小和容量\" class=\"headerlink\" title=\"大小和容量\"></a>大小和容量</h3><p>Vector本身效率很高，但代价是需要分配出更大的空间。所以相比起一些手动算法，在空间控制上可能没那么理想。</p>\n<p>想要获得当前vector内的元素个数，可以使用<code>size()</code>方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//std::vector&lt;int&gt; coll</span></span><br><span class=\"line\">coll.<span class=\"built_in\">size</span>()</span><br></pre></td></tr></table></figure>\n\n<p>可以直接返回一个整数，其大小是这个vector内的元素个数。</p>\n<p>如果这个vector是空的，则<code>coll.empty()</code>会返回<code>true</code>。</p>\n<p>除此之外，还涉及一个问题就是一个vector的容量（Capacity）。特别是如果你需要使用频繁、大规模地使用Vector可以改变长度这个特性的话，尤其需要注意。因为vector在运行过程中可能会重新分配空间，这将导致地址发生变化，如果不做任何措施，原有的引用、指针和迭代器等都可能会失效。而且重新分配内存很耗时间。序偶一你需要好好考虑容量问题。</p>\n<p>​    你可以使用<code>reserve()</code>来保留适当的容量以避免因容量不够而重新分配内存：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">v.reserve(<span class=\"number\">80</span>);<span class=\"comment\">//reserve memroy for 80 elements</span></span><br></pre></td></tr></table></figure>\n\n<p>但vector不能像string那样用<code>reserve()</code>来减小容量。vector的容量不能缩减(但长度可以缩减)。如果给<code>reserve()</code>的参数小于当前容量，什么也不会发生。</p>\n<h3 id=\"几种比较常见的操作\"><a href=\"#几种比较常见的操作\" class=\"headerlink\" title=\"几种比较常见的操作\"></a>几种比较常见的操作</h3><p><code>c.empty()</code>: 返回是否为空</p>\n<p><code>c.size()</code>：返回元素个数</p>\n<p><code>c.max_size()</code>发挥元素个数之最大可能量</p>\n<p><code>c.assign(n, elem)</code>: 复制n个elem赋给C</p>\n<p><code>c.assign(begin, end)</code>: 将区间[begin, end)内的元素赋给c</p>\n<p><code>c.assign(initlist)</code>: 用初始值列表给c赋值</p>\n<p><code>c1.swap()</code>或<code>swap(c1, c2)</code>: 置换c1和c2的数据</p>\n<h4 id=\"访问操作\"><a href=\"#访问操作\" class=\"headerlink\" title=\"访问操作\"></a>访问操作</h4><p><code>c[index]</code>(不检查范围)或<code>c.at(index)</code>（检查范围）</p>\n<p><code>c.front()</code>返回首元素</p>\n<p><code>c.back()</code>返回末尾元素</p>\n<h3 id=\"迭代器相关\"><a href=\"#迭代器相关\" class=\"headerlink\" title=\"迭代器相关\"></a>迭代器相关</h3><p><code>c.begin()</code>, <code>c.end()</code>返回一个random-access iterator指向首、尾元素</p>\n<p><code>c.cbegin()</code>, <code>c.cend()</code> 返回一个const ramdom-access iterator指向首、尾元素</p>\n<p><code>c.rbegin()</code>, <code>c.rend()</code>, <code>c.crbegin()</code>, <code>c.crend()</code>返回反向迭代的首尾元素迭代器</p>\n<h4 id=\"利用迭代器的一些操作\"><a href=\"#利用迭代器的一些操作\" class=\"headerlink\" title=\"利用迭代器的一些操作\"></a>利用迭代器的一些操作</h4><p><code>c.push_back(elem)</code>: 附加一个elem拷贝于末尾</p>\n<p><code>c.pop_back()</code>: …上面的逆操作</p>\n<p><code>c.insert()</code>支持以下参数列表：</p>\n<p><code>pos, elem</code></p>\n<p><code>pos, n, elem</code></p>\n<p><code>pos, begin, end</code></p>\n<p><code>pos, initlist</code></p>\n<p><code>c.emplace(pos, args...)</code></p>\n<p><code>e.emplace_back(args...)</code></p>\n<p><code>c.erase(pos)</code>: 移除pos这个iterator上的元素</p>\n<p><code>e.erase(begin, end)</code>： 移除从begin到end中间所有的元素</p>\n<p>所以如果你想移除“与某个值相等”的元素，虽然vector没有直接提供，但是可以通过其他一些辅助函数来实现。比如，你可以通过下面这个语句将所有值为val的元素移除</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;//提供remove函数的声明</span></span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;elem&gt; coll;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">//remove al elements with value val</span></span><br><span class=\"line\">coll.erase(<span class=\"built_in\">remove</span>(coll.<span class=\"built_in\">begin</span>(), coll.<span class=\"built_in\">end</span>(), val), coll.<span class=\"built_in\">end</span>());</span><br></pre></td></tr></table></figure>\n\n<p>如果你想只删除值一样的第一个元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;elem&gt; coll;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;elem&gt;::iterator pos;</span><br><span class=\"line\">pos=<span class=\"built_in\">find</span>(coll.<span class=\"built_in\">begin</span>(), coll.<span class=\"built_in\">end</span>(), val);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(pos!=coll.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    coll.erase(pos);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>###　关于Vector的异常处理</p>\n<p>除非用户自定义了新的异常，或者标准异常（比如<code>bad_alloc</code>), <code>c.at()</code>是唯一一个标准认可的可以抛出异常的函数. 其他的函数，基本都不会抛出异常，甚至标准还保证类似<code>push_back()</code>这样的方法绝对不会抛出异常。</p>"},{"title":"关于我们这个机器人队","date":"2020-01-07T16:00:00.000Z","_content":"TUF到底是什么样的一群人\n<!--more-->\n### 关于我们这个机器人队\n\n#### 一\n\n​\t首先希望大家明白一点, 机器人并不是某个单一领域的事情, 而是一个高度综合, 学科交叉, 涉猎广泛的一个项目, 以至于独立成为了一个学科叫做**机器人学**(Robotics). 这个领域涉猎如此之广, 以至于单一的计算机, 或智能, 或自动化, 或软件工程, 或电子, 都不能独当一面地完成一个机器人比赛的全部工作. \n\n​\t其次, 至少以我个人的经历来看, 我对这个领域了解得越多, 学习得越深入, 越觉得这个领域知识树之广袤高深, 难以遍历.\n\n​\t而我们这样一个队伍, 在全国范围内, 实在是十分年轻的一个队伍, 以至于我们即将开展的很多工作, 既是在开创开创我们的道路, 也是在追赶其他队伍的步伐. 因此, 无论未来我们这个队伍的命运如何, 我都希望大家能够对我们即将开展的工作, 以及即将面对和学习的知识保有一颗敬畏之心, 正是那一番谦逊和求知的热情, 才是我们这个团队能够前进和进步的动力. \n\n​\t但值得庆幸的是, 我们这样一个队伍生来就带有工程师的光环, 在这样一个集体中我们不仅仅是一个\"职业考生\", 更是用我们手握的各种知识和工具去解决实际问题的工程师. 我们在这样一个环境里真正地会将大家所学应用到实际中, 并在此基础上, 接触某些领域内比较高深的知识, 那些你们当前阶段, 乃至整个本科阶段都不会讲的知识, 那些老师们上课漏掉了的知识. \n\n​\t正如我所说, 我们所面对的是一整棵知识树, 我们也许不能将其遍历, 但我们可以在这个过程中, 尽可能多摘取一些果实. \n\n\n\n#### 二\n\n​\t中国的学生从小都非常擅长一件事——考试。\n\n​\t老师和家长一直都告诉我们要好好学习，却从没有告诉我们什么是学习，学习和记忆的区别是什么，如何将学习学来的东西应用于我们的实践中。这也不奇怪，在过去的十多年里，同学们的生活是被一场一场考试分割开来的，你如果现在回想起你过去十数年的人生，无非就是这么几个阶段：上小学以前，考中学以前，中考以前，高考以前......让我们的这群孩子去用自己少有人生经历去面对人生中的诸多选择，真的是一件可恨又可悲的事情。\n\n​\t我们如今将大家招募过来并聚集在一起, 不仅是与大家分享工程师的光环, 抑或是跟大家共同完成一个机器人队的使命, 更是通过我们的方式, 帮助大家从考试这件事本身挣脱出来, 开始思考我们学到的东西会如何应用在我们的实际工程中, 并且通过理论去指导实践, 帮助我们在实践中能够以更高的效率实现我们的工作. \n\n​\t你们的老师也许告诉过你们C语言需要经过编译器编译才能运行, 但老师们未必告诉过你们常用的Code::Blocks使用的是GCC的Windows版本Min-GW, 也未必会告诉你们GCC-7默认使用的是C++14而GCC-5使用的是C++11. 老师们也许教过你们在Code::Blocks里点一下绿色的三角外加一个齿轮就可以让你的程序跑起来, 但未必告诉过你们要在Repository里面建立一个`Build`文件夹并在里面使用`cmake`来编译大型工程. 老师们也许告诉过你们如何求一个矩阵的特征值和特征向量, 但你们也许还不知道我们的机器人在进行状态估计的时候就是借用特征值和特征向量来解决各种各样的问题. \n\n​\t你们的老师也许会在大一的第二学期教你们如何用贝叶斯公式求一个事件的条件概率, 而我们就是要用同样的方式去估计机器人所处的状态和下个时刻机器人的决策有多大可能实现目的. \n\n​\t因此, 我需要提前跟大家说明白的是, 机器人的这些事情不会给你的考试成绩有立竿见影的提升, 也不会为你争取到更多的自习, 刷题的时间. 但我们希望能够做到把一群\"不奢望, 不绝望, 永远怀着热望\"的人聚集在一起, 并以不同的角度去理解我们的考试知识. \n\n​\t\n\n### 三\n\n​\t如果你问我, 来这个机器人队能收获什么, 我真的没办法像很多学生会部门那样跟大家保证会有什么样的收获, 我们不是一个官僚部门, 我们只是一支创新实验团队. \n\n​\t我们真的没有什么学霸带你飞, 最多也就是带你在大一大二就学完一大半的本科课程而已; \n\n​\t我们也没有什么保研出国秘籍, 顶天了就是给你一个世界冠军的荣耀而已;\n\n​\t我们也没有什么期末考试通关宝典, 也就是一群人一起相互讲题组队学习而已;\n\n​\t我们也没有什么团队福利, 也就是大家一起出去比个赛, 嗨一顿, 再回来接着干活儿而已;\n\n​\t我们也没有什么可以装逼的东西, 也就是别人一辈子都未必会接触到的知识, 和工程师的头衔而已. \n\n​\t作为一个年轻的团队, 我们几乎什么都没有, 我们所拥有的和即将拥有的, 都是我们一同创造的. \n\n\n\n### 四\n\n​\t说到底, 我们还是一个团队. \n\n​\t团队就意味着需要合作, 需要实现全局最优解, 而非局部最优解, 意味着需要共同面对困难, 共同承担风险, 也意味着共同分享荣誉, 共同分享收获. \n\n​\t我们不仅希望你足够牛X, 还希望你能够融入我们这个团队中, 为团队贡献力量的同时, 也在团队中成长. 我们即希望你能够听从指挥, 也希望你能够坚持自己的想法, 在必要的时候敢于提出问题, 敢于挑战权威, 敢于**据理**力争. \n\n​\t我们希望你能够按时按量完成任务, 同时能够\"知识改变命运\", 用自己的聪明才智找到高效轻松地解决问题的方法. 我们希望你能够对不合理的要求说不, 并给出更好的办法. 我们还希望你能够帮助团队中的伙伴, 共同成长和进步.\n\n​\t我们希望你能够承担起作为一个团队成员的责任, 不求你挑大梁, 但求你千万别来划水. ","source":"_posts/关于我们这个机器人队.md","raw":"---\ntitle: 关于我们这个机器人队 # 标题\ndate: 2020/1/8 # 时间\ncategories: # 分类\n- Publicity\ntags: # 标签\n- ROS\n- Robotics\n- xmu.edu.cn\n- xmu-tuf\n---\nTUF到底是什么样的一群人\n<!--more-->\n### 关于我们这个机器人队\n\n#### 一\n\n​\t首先希望大家明白一点, 机器人并不是某个单一领域的事情, 而是一个高度综合, 学科交叉, 涉猎广泛的一个项目, 以至于独立成为了一个学科叫做**机器人学**(Robotics). 这个领域涉猎如此之广, 以至于单一的计算机, 或智能, 或自动化, 或软件工程, 或电子, 都不能独当一面地完成一个机器人比赛的全部工作. \n\n​\t其次, 至少以我个人的经历来看, 我对这个领域了解得越多, 学习得越深入, 越觉得这个领域知识树之广袤高深, 难以遍历.\n\n​\t而我们这样一个队伍, 在全国范围内, 实在是十分年轻的一个队伍, 以至于我们即将开展的很多工作, 既是在开创开创我们的道路, 也是在追赶其他队伍的步伐. 因此, 无论未来我们这个队伍的命运如何, 我都希望大家能够对我们即将开展的工作, 以及即将面对和学习的知识保有一颗敬畏之心, 正是那一番谦逊和求知的热情, 才是我们这个团队能够前进和进步的动力. \n\n​\t但值得庆幸的是, 我们这样一个队伍生来就带有工程师的光环, 在这样一个集体中我们不仅仅是一个\"职业考生\", 更是用我们手握的各种知识和工具去解决实际问题的工程师. 我们在这样一个环境里真正地会将大家所学应用到实际中, 并在此基础上, 接触某些领域内比较高深的知识, 那些你们当前阶段, 乃至整个本科阶段都不会讲的知识, 那些老师们上课漏掉了的知识. \n\n​\t正如我所说, 我们所面对的是一整棵知识树, 我们也许不能将其遍历, 但我们可以在这个过程中, 尽可能多摘取一些果实. \n\n\n\n#### 二\n\n​\t中国的学生从小都非常擅长一件事——考试。\n\n​\t老师和家长一直都告诉我们要好好学习，却从没有告诉我们什么是学习，学习和记忆的区别是什么，如何将学习学来的东西应用于我们的实践中。这也不奇怪，在过去的十多年里，同学们的生活是被一场一场考试分割开来的，你如果现在回想起你过去十数年的人生，无非就是这么几个阶段：上小学以前，考中学以前，中考以前，高考以前......让我们的这群孩子去用自己少有人生经历去面对人生中的诸多选择，真的是一件可恨又可悲的事情。\n\n​\t我们如今将大家招募过来并聚集在一起, 不仅是与大家分享工程师的光环, 抑或是跟大家共同完成一个机器人队的使命, 更是通过我们的方式, 帮助大家从考试这件事本身挣脱出来, 开始思考我们学到的东西会如何应用在我们的实际工程中, 并且通过理论去指导实践, 帮助我们在实践中能够以更高的效率实现我们的工作. \n\n​\t你们的老师也许告诉过你们C语言需要经过编译器编译才能运行, 但老师们未必告诉过你们常用的Code::Blocks使用的是GCC的Windows版本Min-GW, 也未必会告诉你们GCC-7默认使用的是C++14而GCC-5使用的是C++11. 老师们也许教过你们在Code::Blocks里点一下绿色的三角外加一个齿轮就可以让你的程序跑起来, 但未必告诉过你们要在Repository里面建立一个`Build`文件夹并在里面使用`cmake`来编译大型工程. 老师们也许告诉过你们如何求一个矩阵的特征值和特征向量, 但你们也许还不知道我们的机器人在进行状态估计的时候就是借用特征值和特征向量来解决各种各样的问题. \n\n​\t你们的老师也许会在大一的第二学期教你们如何用贝叶斯公式求一个事件的条件概率, 而我们就是要用同样的方式去估计机器人所处的状态和下个时刻机器人的决策有多大可能实现目的. \n\n​\t因此, 我需要提前跟大家说明白的是, 机器人的这些事情不会给你的考试成绩有立竿见影的提升, 也不会为你争取到更多的自习, 刷题的时间. 但我们希望能够做到把一群\"不奢望, 不绝望, 永远怀着热望\"的人聚集在一起, 并以不同的角度去理解我们的考试知识. \n\n​\t\n\n### 三\n\n​\t如果你问我, 来这个机器人队能收获什么, 我真的没办法像很多学生会部门那样跟大家保证会有什么样的收获, 我们不是一个官僚部门, 我们只是一支创新实验团队. \n\n​\t我们真的没有什么学霸带你飞, 最多也就是带你在大一大二就学完一大半的本科课程而已; \n\n​\t我们也没有什么保研出国秘籍, 顶天了就是给你一个世界冠军的荣耀而已;\n\n​\t我们也没有什么期末考试通关宝典, 也就是一群人一起相互讲题组队学习而已;\n\n​\t我们也没有什么团队福利, 也就是大家一起出去比个赛, 嗨一顿, 再回来接着干活儿而已;\n\n​\t我们也没有什么可以装逼的东西, 也就是别人一辈子都未必会接触到的知识, 和工程师的头衔而已. \n\n​\t作为一个年轻的团队, 我们几乎什么都没有, 我们所拥有的和即将拥有的, 都是我们一同创造的. \n\n\n\n### 四\n\n​\t说到底, 我们还是一个团队. \n\n​\t团队就意味着需要合作, 需要实现全局最优解, 而非局部最优解, 意味着需要共同面对困难, 共同承担风险, 也意味着共同分享荣誉, 共同分享收获. \n\n​\t我们不仅希望你足够牛X, 还希望你能够融入我们这个团队中, 为团队贡献力量的同时, 也在团队中成长. 我们即希望你能够听从指挥, 也希望你能够坚持自己的想法, 在必要的时候敢于提出问题, 敢于挑战权威, 敢于**据理**力争. \n\n​\t我们希望你能够按时按量完成任务, 同时能够\"知识改变命运\", 用自己的聪明才智找到高效轻松地解决问题的方法. 我们希望你能够对不合理的要求说不, 并给出更好的办法. 我们还希望你能够帮助团队中的伙伴, 共同成长和进步.\n\n​\t我们希望你能够承担起作为一个团队成员的责任, 不求你挑大梁, 但求你千万别来划水. ","slug":"关于我们这个机器人队","published":1,"updated":"2020-05-05T16:16:19.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9u4lyc0000ls2s90epb5hu8","content":"<p>TUF到底是什么样的一群人</p>\n<a id=\"more\"></a>\n<h3 id=\"关于我们这个机器人队\"><a href=\"#关于我们这个机器人队\" class=\"headerlink\" title=\"关于我们这个机器人队\"></a>关于我们这个机器人队</h3><h4 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h4><p>​    首先希望大家明白一点, 机器人并不是某个单一领域的事情, 而是一个高度综合, 学科交叉, 涉猎广泛的一个项目, 以至于独立成为了一个学科叫做<strong>机器人学</strong>(Robotics). 这个领域涉猎如此之广, 以至于单一的计算机, 或智能, 或自动化, 或软件工程, 或电子, 都不能独当一面地完成一个机器人比赛的全部工作. </p>\n<p>​    其次, 至少以我个人的经历来看, 我对这个领域了解得越多, 学习得越深入, 越觉得这个领域知识树之广袤高深, 难以遍历.</p>\n<p>​    而我们这样一个队伍, 在全国范围内, 实在是十分年轻的一个队伍, 以至于我们即将开展的很多工作, 既是在开创开创我们的道路, 也是在追赶其他队伍的步伐. 因此, 无论未来我们这个队伍的命运如何, 我都希望大家能够对我们即将开展的工作, 以及即将面对和学习的知识保有一颗敬畏之心, 正是那一番谦逊和求知的热情, 才是我们这个团队能够前进和进步的动力. </p>\n<p>​    但值得庆幸的是, 我们这样一个队伍生来就带有工程师的光环, 在这样一个集体中我们不仅仅是一个”职业考生”, 更是用我们手握的各种知识和工具去解决实际问题的工程师. 我们在这样一个环境里真正地会将大家所学应用到实际中, 并在此基础上, 接触某些领域内比较高深的知识, 那些你们当前阶段, 乃至整个本科阶段都不会讲的知识, 那些老师们上课漏掉了的知识. </p>\n<p>​    正如我所说, 我们所面对的是一整棵知识树, 我们也许不能将其遍历, 但我们可以在这个过程中, 尽可能多摘取一些果实. </p>\n<h4 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h4><p>​    中国的学生从小都非常擅长一件事——考试。</p>\n<p>​    老师和家长一直都告诉我们要好好学习，却从没有告诉我们什么是学习，学习和记忆的区别是什么，如何将学习学来的东西应用于我们的实践中。这也不奇怪，在过去的十多年里，同学们的生活是被一场一场考试分割开来的，你如果现在回想起你过去十数年的人生，无非就是这么几个阶段：上小学以前，考中学以前，中考以前，高考以前……让我们的这群孩子去用自己少有人生经历去面对人生中的诸多选择，真的是一件可恨又可悲的事情。</p>\n<p>​    我们如今将大家招募过来并聚集在一起, 不仅是与大家分享工程师的光环, 抑或是跟大家共同完成一个机器人队的使命, 更是通过我们的方式, 帮助大家从考试这件事本身挣脱出来, 开始思考我们学到的东西会如何应用在我们的实际工程中, 并且通过理论去指导实践, 帮助我们在实践中能够以更高的效率实现我们的工作. </p>\n<p>​    你们的老师也许告诉过你们C语言需要经过编译器编译才能运行, 但老师们未必告诉过你们常用的Code::Blocks使用的是GCC的Windows版本Min-GW, 也未必会告诉你们GCC-7默认使用的是C++14而GCC-5使用的是C++11. 老师们也许教过你们在Code::Blocks里点一下绿色的三角外加一个齿轮就可以让你的程序跑起来, 但未必告诉过你们要在Repository里面建立一个<code>Build</code>文件夹并在里面使用<code>cmake</code>来编译大型工程. 老师们也许告诉过你们如何求一个矩阵的特征值和特征向量, 但你们也许还不知道我们的机器人在进行状态估计的时候就是借用特征值和特征向量来解决各种各样的问题. </p>\n<p>​    你们的老师也许会在大一的第二学期教你们如何用贝叶斯公式求一个事件的条件概率, 而我们就是要用同样的方式去估计机器人所处的状态和下个时刻机器人的决策有多大可能实现目的. </p>\n<p>​    因此, 我需要提前跟大家说明白的是, 机器人的这些事情不会给你的考试成绩有立竿见影的提升, 也不会为你争取到更多的自习, 刷题的时间. 但我们希望能够做到把一群”不奢望, 不绝望, 永远怀着热望”的人聚集在一起, 并以不同的角度去理解我们的考试知识. </p>\n<p>​    </p>\n<h3 id=\"三\"><a href=\"#三\" class=\"headerlink\" title=\"三\"></a>三</h3><p>​    如果你问我, 来这个机器人队能收获什么, 我真的没办法像很多学生会部门那样跟大家保证会有什么样的收获, 我们不是一个官僚部门, 我们只是一支创新实验团队. </p>\n<p>​    我们真的没有什么学霸带你飞, 最多也就是带你在大一大二就学完一大半的本科课程而已; </p>\n<p>​    我们也没有什么保研出国秘籍, 顶天了就是给你一个世界冠军的荣耀而已;</p>\n<p>​    我们也没有什么期末考试通关宝典, 也就是一群人一起相互讲题组队学习而已;</p>\n<p>​    我们也没有什么团队福利, 也就是大家一起出去比个赛, 嗨一顿, 再回来接着干活儿而已;</p>\n<p>​    我们也没有什么可以装逼的东西, 也就是别人一辈子都未必会接触到的知识, 和工程师的头衔而已. </p>\n<p>​    作为一个年轻的团队, 我们几乎什么都没有, 我们所拥有的和即将拥有的, 都是我们一同创造的. </p>\n<h3 id=\"四\"><a href=\"#四\" class=\"headerlink\" title=\"四\"></a>四</h3><p>​    说到底, 我们还是一个团队. </p>\n<p>​    团队就意味着需要合作, 需要实现全局最优解, 而非局部最优解, 意味着需要共同面对困难, 共同承担风险, 也意味着共同分享荣誉, 共同分享收获. </p>\n<p>​    我们不仅希望你足够牛X, 还希望你能够融入我们这个团队中, 为团队贡献力量的同时, 也在团队中成长. 我们即希望你能够听从指挥, 也希望你能够坚持自己的想法, 在必要的时候敢于提出问题, 敢于挑战权威, 敢于<strong>据理</strong>力争. </p>\n<p>​    我们希望你能够按时按量完成任务, 同时能够”知识改变命运”, 用自己的聪明才智找到高效轻松地解决问题的方法. 我们希望你能够对不合理的要求说不, 并给出更好的办法. 我们还希望你能够帮助团队中的伙伴, 共同成长和进步.</p>\n<p>​    我们希望你能够承担起作为一个团队成员的责任, 不求你挑大梁, 但求你千万别来划水. </p>\n","site":{"data":{}},"excerpt":"<p>TUF到底是什么样的一群人</p>","more":"<h3 id=\"关于我们这个机器人队\"><a href=\"#关于我们这个机器人队\" class=\"headerlink\" title=\"关于我们这个机器人队\"></a>关于我们这个机器人队</h3><h4 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h4><p>​    首先希望大家明白一点, 机器人并不是某个单一领域的事情, 而是一个高度综合, 学科交叉, 涉猎广泛的一个项目, 以至于独立成为了一个学科叫做<strong>机器人学</strong>(Robotics). 这个领域涉猎如此之广, 以至于单一的计算机, 或智能, 或自动化, 或软件工程, 或电子, 都不能独当一面地完成一个机器人比赛的全部工作. </p>\n<p>​    其次, 至少以我个人的经历来看, 我对这个领域了解得越多, 学习得越深入, 越觉得这个领域知识树之广袤高深, 难以遍历.</p>\n<p>​    而我们这样一个队伍, 在全国范围内, 实在是十分年轻的一个队伍, 以至于我们即将开展的很多工作, 既是在开创开创我们的道路, 也是在追赶其他队伍的步伐. 因此, 无论未来我们这个队伍的命运如何, 我都希望大家能够对我们即将开展的工作, 以及即将面对和学习的知识保有一颗敬畏之心, 正是那一番谦逊和求知的热情, 才是我们这个团队能够前进和进步的动力. </p>\n<p>​    但值得庆幸的是, 我们这样一个队伍生来就带有工程师的光环, 在这样一个集体中我们不仅仅是一个”职业考生”, 更是用我们手握的各种知识和工具去解决实际问题的工程师. 我们在这样一个环境里真正地会将大家所学应用到实际中, 并在此基础上, 接触某些领域内比较高深的知识, 那些你们当前阶段, 乃至整个本科阶段都不会讲的知识, 那些老师们上课漏掉了的知识. </p>\n<p>​    正如我所说, 我们所面对的是一整棵知识树, 我们也许不能将其遍历, 但我们可以在这个过程中, 尽可能多摘取一些果实. </p>\n<h4 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h4><p>​    中国的学生从小都非常擅长一件事——考试。</p>\n<p>​    老师和家长一直都告诉我们要好好学习，却从没有告诉我们什么是学习，学习和记忆的区别是什么，如何将学习学来的东西应用于我们的实践中。这也不奇怪，在过去的十多年里，同学们的生活是被一场一场考试分割开来的，你如果现在回想起你过去十数年的人生，无非就是这么几个阶段：上小学以前，考中学以前，中考以前，高考以前……让我们的这群孩子去用自己少有人生经历去面对人生中的诸多选择，真的是一件可恨又可悲的事情。</p>\n<p>​    我们如今将大家招募过来并聚集在一起, 不仅是与大家分享工程师的光环, 抑或是跟大家共同完成一个机器人队的使命, 更是通过我们的方式, 帮助大家从考试这件事本身挣脱出来, 开始思考我们学到的东西会如何应用在我们的实际工程中, 并且通过理论去指导实践, 帮助我们在实践中能够以更高的效率实现我们的工作. </p>\n<p>​    你们的老师也许告诉过你们C语言需要经过编译器编译才能运行, 但老师们未必告诉过你们常用的Code::Blocks使用的是GCC的Windows版本Min-GW, 也未必会告诉你们GCC-7默认使用的是C++14而GCC-5使用的是C++11. 老师们也许教过你们在Code::Blocks里点一下绿色的三角外加一个齿轮就可以让你的程序跑起来, 但未必告诉过你们要在Repository里面建立一个<code>Build</code>文件夹并在里面使用<code>cmake</code>来编译大型工程. 老师们也许告诉过你们如何求一个矩阵的特征值和特征向量, 但你们也许还不知道我们的机器人在进行状态估计的时候就是借用特征值和特征向量来解决各种各样的问题. </p>\n<p>​    你们的老师也许会在大一的第二学期教你们如何用贝叶斯公式求一个事件的条件概率, 而我们就是要用同样的方式去估计机器人所处的状态和下个时刻机器人的决策有多大可能实现目的. </p>\n<p>​    因此, 我需要提前跟大家说明白的是, 机器人的这些事情不会给你的考试成绩有立竿见影的提升, 也不会为你争取到更多的自习, 刷题的时间. 但我们希望能够做到把一群”不奢望, 不绝望, 永远怀着热望”的人聚集在一起, 并以不同的角度去理解我们的考试知识. </p>\n<p>​    </p>\n<h3 id=\"三\"><a href=\"#三\" class=\"headerlink\" title=\"三\"></a>三</h3><p>​    如果你问我, 来这个机器人队能收获什么, 我真的没办法像很多学生会部门那样跟大家保证会有什么样的收获, 我们不是一个官僚部门, 我们只是一支创新实验团队. </p>\n<p>​    我们真的没有什么学霸带你飞, 最多也就是带你在大一大二就学完一大半的本科课程而已; </p>\n<p>​    我们也没有什么保研出国秘籍, 顶天了就是给你一个世界冠军的荣耀而已;</p>\n<p>​    我们也没有什么期末考试通关宝典, 也就是一群人一起相互讲题组队学习而已;</p>\n<p>​    我们也没有什么团队福利, 也就是大家一起出去比个赛, 嗨一顿, 再回来接着干活儿而已;</p>\n<p>​    我们也没有什么可以装逼的东西, 也就是别人一辈子都未必会接触到的知识, 和工程师的头衔而已. </p>\n<p>​    作为一个年轻的团队, 我们几乎什么都没有, 我们所拥有的和即将拥有的, 都是我们一同创造的. </p>\n<h3 id=\"四\"><a href=\"#四\" class=\"headerlink\" title=\"四\"></a>四</h3><p>​    说到底, 我们还是一个团队. </p>\n<p>​    团队就意味着需要合作, 需要实现全局最优解, 而非局部最优解, 意味着需要共同面对困难, 共同承担风险, 也意味着共同分享荣誉, 共同分享收获. </p>\n<p>​    我们不仅希望你足够牛X, 还希望你能够融入我们这个团队中, 为团队贡献力量的同时, 也在团队中成长. 我们即希望你能够听从指挥, 也希望你能够坚持自己的想法, 在必要的时候敢于提出问题, 敢于挑战权威, 敢于<strong>据理</strong>力争. </p>\n<p>​    我们希望你能够按时按量完成任务, 同时能够”知识改变命运”, 用自己的聪明才智找到高效轻松地解决问题的方法. 我们希望你能够对不合理的要求说不, 并给出更好的办法. 我们还希望你能够帮助团队中的伙伴, 共同成长和进步.</p>\n<p>​    我们希望你能够承担起作为一个团队成员的责任, 不求你挑大梁, 但求你千万别来划水. </p>"},{"title":"小米路由器不安装客户端的访问方法","date":"2020-02-12T16:00:00.000Z","_content":"1. win10禁用了一个安全策略, 导致小米路由器的路由盘没办法访问. \n2. 调整这个策略的得放在**本地组策略编辑器**, 打开的方式是在**运行**里输入`gpedit.msc`.\n3. 找到**计算机配置→管理模板→网络→Lanman工作站**，把里面的“**启用不安全的来宾登陆**”项状态改为已启用, 即可访问\n4. 访问结束后, 记得关闭这个选项. 确保安全","source":"_posts/小米路由器不安装客户端的访问方法.md","raw":"---\ntitle: 小米路由器不安装客户端的访问方法 # 标题\ndate: 2020/2/13 # 时间\ncategories: # 分类\n- Experience\ntags: # 标签\n- System\n- Win10\n- Config\n---\n1. win10禁用了一个安全策略, 导致小米路由器的路由盘没办法访问. \n2. 调整这个策略的得放在**本地组策略编辑器**, 打开的方式是在**运行**里输入`gpedit.msc`.\n3. 找到**计算机配置→管理模板→网络→Lanman工作站**，把里面的“**启用不安全的来宾登陆**”项状态改为已启用, 即可访问\n4. 访问结束后, 记得关闭这个选项. 确保安全","slug":"小米路由器不安装客户端的访问方法","published":1,"updated":"2020-05-05T16:16:19.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9u4lyc3000ps2s917oq6lz4","content":"<ol>\n<li>win10禁用了一个安全策略, 导致小米路由器的路由盘没办法访问. </li>\n<li>调整这个策略的得放在<strong>本地组策略编辑器</strong>, 打开的方式是在<strong>运行</strong>里输入<code>gpedit.msc</code>.</li>\n<li>找到<strong>计算机配置→管理模板→网络→Lanman工作站</strong>，把里面的“<strong>启用不安全的来宾登陆</strong>”项状态改为已启用, 即可访问</li>\n<li>访问结束后, 记得关闭这个选项. 确保安全</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>win10禁用了一个安全策略, 导致小米路由器的路由盘没办法访问. </li>\n<li>调整这个策略的得放在<strong>本地组策略编辑器</strong>, 打开的方式是在<strong>运行</strong>里输入<code>gpedit.msc</code>.</li>\n<li>找到<strong>计算机配置→管理模板→网络→Lanman工作站</strong>，把里面的“<strong>启用不安全的来宾登陆</strong>”项状态改为已启用, 即可访问</li>\n<li>访问结束后, 记得关闭这个选项. 确保安全</li>\n</ol>\n"},{"titlie":"浅谈ASP.Net Core 依赖关系注入","date":"2020-05-05T16:00:00.000Z","_content":"\n事由是想写一个教材征订管理系统, 里面涉及到自行设计的一个购物车的数据模型类`Cart`和一个管理类`CartManager`, 遇到了相关问题, 所以仔细去读了官方的文档, 现在记录如下:\n<!--more-->\n### 概述\n\n#### 1. 依赖项是什么\n\n依赖项 , 是另一个对象所需的任何对象。\n\n比如我的`CartManager`对象, 就需要依赖Cart对象, `ICollection`对象和`BookBill`对象等等.\n\n#### 2. 为什么要做依赖关系注入\n\n在这里, 官方文档举了一个更加简单的例子, 假设有一个被其他类依赖的`MyDependency`类, 其他类需要调用这个类的`WriteMessage`方法:\n\n```c#\npublic class MyDependency\n{\n    public MyDependency()\n    {\n    }\n\n    public Task WriteMessage(string message)\n    {\n        Console.WriteLine(\n            $\"MyDependency.WriteMessage called. Message: {message}\");\n\n        return Task.FromResult(0);\n    }\n}\n```\n\n稍微分析一下这个类, 除了一个什么都不做的构造函数之外, 还有一个打印消息的函数, 这个函数返回Task. \n\n ```c#\npublic class IndexModel : PageModel\n{\n    MyDependency _dependency = new MyDependency();\n\n    public async Task OnGetAsync()\n    {\n        await _dependency.WriteMessage(\n            \"IndexModel.OnGetAsync created this message.\");\n    }\n}\n ```\n\n接下来, 我们开始在一个页面的`PageModel`实例化一个`Mydependency`对象, 这个是一个常规操作. \n\n```c#\npublic class IndexModel : PageModel\n{\n    MyDependency _dependency = new MyDependency();\n\n    public async Task OnGetAsync()\n    {\n        await _dependency.WriteMessage(\n            \"IndexModel.OnGetAsync created this message.\");\n    }\n}\n```\n\n但是这样做是有问题的: \n\n1. 如果你需要修改`MyDependency`, 就必须在类的源代码里卖弄修改, 这个很可怕, 万一你还有别的地方用到了这个类, 那你修改就全改了, 会很麻烦. \n\n   \t2. 如果`Mydependency`具有其他依赖关系, 就必须在`Mydependency`里面进行配置. 然后又有很多类需要依赖于`MyDpendency`,  这就导致这种代码到处都是, 很分散. \n      \t3. 如果你想单独测试这个部分, 你会发现现在这个架构很艰难. \n\n为了解决这些问题, 我们通过依赖关系注入来实现这个类. 它可以做到以下几点:\n\n1. 使用接口或者基类抽象化依赖关系的实现, 你的依赖关系是通过类继承来实现的, 你想换一个依赖, 继承另一个类就可以了.\n2. 可以同时注册服务容器中的依赖关系. ASP.NET Core 提供了一个内置服务容器`IServiceProvider`, 这个服务已经在应用的`Startup.ConfigureService`方法中注册. \n3. 将服务注入到使用它的类的构造函数中. 框架负责创建依赖的对象. 如果不再需要这个对象了, 就可以直接由框架进行处理. \n\n### 如何依赖关系注入\n\n按照依赖关系注入的思想, 当你需要自己做一个服务的时候 (比如我要做的这个`CartManager`), 你需要先写一个这个服务的接口(`interface`), 然后根据这个接口写一个类来实现这个服务, 之后再注册\n\n所以我们可以这样来实现这个框架:\n\n```c#\npublic interface IMyDependency\n{\n    Task WriteMessage(string message);\n}\n```\n\n这是个`interface`, 这个`interface`. \n\n这个接口里面的`WriteMessage`由一个`MyDependency`这个类的实现. \n\n```c#\npublic class MyDependency : IMyDependency\n{\n    private readonly ILogger<MyDependency> _logger;\n\n    public MyDependency(ILogger<MyDependency> logger)\n    {\n        _logger = logger;\n    }\n\n    public Task WriteMessage(string message)\n    {\n        _logger.LogInformation(\n            \"MyDependency.WriteMessage called. Message: {MESSAGE}\", \n            message);\n\n        return Task.FromResult(0);\n    }\n}\n```\n\n接下来, 你需要在`Startup.cs`中的服务注册里把你的服务注册进去: \n\n```c#\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddRazorPages();\n\n    services.AddScoped<IMyDependency, MyDependency>();//这里是你注册的服务\n    \n    services.AddTransient<IOperationTransient, Operation>();\n    services.AddScoped<IOperationScoped, Operation>();\n    services.AddSingleton<IOperationSingleton, Operation>();\n    services.AddSingleton<IOperationSingletonInstance>(new Operation(Guid.Empty));\n\n    // OperationService depends on each of the other Operation types.\n    services.AddTransient<OperationService, OperationService>();\n}\n```\n\n使用的注册函数根据你这个服务的生存期不同, 可以选择以下几种生存期\n\n* 暂时\n\n  暂时生存期服务 ([AddTransient](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addtransient)) 是每次从服务容器进行请求时创建的。 这种生存期适合轻量级、 无状态的服务。\n\n* 范围内\n\n  作用域生存期服务 ([AddScoped](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addscoped)) 以每个客户端请求（连接）一次的方式创建。\n\n  注意: 在中间件内使用有作用域的服务时，请将该服务注入至 `Invoke` 或 `InvokeAsync` 方法。 请不要通过构造函数注入进行注入，因为它会强制服务的行为与单一实例类似。 这个在自定义中间件中会有专门的说明. \n\n* 单例\n\n  单一实例生存期服务 ([AddSingleton](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addsingleton)) 是在第一次请求时（或者在运行 `Startup.ConfigureServices` 并且使用服务注册指定实例时）创建的。 每个后续请求都使用相同的实例。 如果应用需要单一实例行为，建议允许服务容器管理服务的生存期。 不要实现单一实例设计模式并提供用户代码来管理对象在类中的生存期。\n\n  注意: 从单一实例解析有作用域的服务很危险。 当处理后续请求时，它可能会导致服务处于不正确的状态。\n\n\n\n### 依赖实现的配置\n\n当你的依赖(比如`MyDependency`) 需要ASP.Net内置的其他服务时, 可以直接用传参的方式传进来 因为其他的服务已经被注册过了. 但是如果你的构造函数需要内置类型(比如`string`), 你就没办法给`string`做服务注册. 这个时候你可以通过`Configuration`或者`Options`来注入这些类型: \n\n```c#\npublic class MyDependency : IMyDependency\n{\n    public MyDependency(IConfiguration config)\n    {\n        var myStringValue = config[\"MyStringKey\"];\n\n        // Use myStringValue\n    }\n\n    ...\n}\n```\n\n### 大功告成\n\n你终于可以在页面中像使用其他框架提供的服务一样使用自己的服务了. \n\n```c#\npublic class IndexModel : PageModel\n{\n    private readonly IMyDependency _myDependency;//定义一个服务的私有变量\n\n    public IndexModel(\n        IMyDependency myDependency, //构造函数中接受这个变量\n        OperationService operationService,\n        IOperationTransient transientOperation,\n        IOperationScoped scopedOperation,\n        IOperationSingleton singletonOperation,\n        IOperationSingletonInstance singletonInstanceOperation)\n    {\n        _myDependency = myDependency;//赋值\n        OperationService = operationService;\n        TransientOperation = transientOperation;\n        ScopedOperation = scopedOperation;\n        SingletonOperation = singletonOperation;\n        SingletonInstanceOperation = singletonInstanceOperation;\n    }\n\n    public OperationService OperationService { get; }\n    public IOperationTransient TransientOperation { get; }\n    public IOperationScoped ScopedOperation { get; }\n    public IOperationSingleton SingletonOperation { get; }\n    public IOperationSingletonInstance SingletonInstanceOperation { get; }\n\n    public async Task OnGetAsync()\n    {\n        //愉快地使用这个服务提供的方法\n        await _myDependency.WriteMessage(\n            \"IndexModel.OnGetAsync created this message.\");\n    }\n}\n```\n\n### 一些建议\n\n#### 如何从创建一个适合依赖关系注入的服务:\n\n最佳做法是：\n\n* 设计服务以使用依赖关系注入来获取其依赖关系。\n\n- 避免有状态的、静态类和成员。 将应用设计为改用单一实例服务，可避免创建全局状态。\n- 避免在服务中直接实例化依赖类。 直接实例化将代码耦合到特定实现。\n- 不在应用类中包含过多内容，确保设计规范，并易于测试。\n\n\n\n如果一个类似乎有过多的注入依赖关系，这通常表明该类拥有过多的责任并且违反了[单一责任原则 (SRP)](https://docs.microsoft.com/zh-cn/dotnet/standard/modern-web-apps-azure-architecture/architectural-principles#single-responsibility)。 尝试通过将某些职责移动到一个新类来重构类。 请记住，Razor Pages 页模型类和 MVC 控制器类应关注用户界面问题。 业务规则和数据访问实现细节应保留在适用于这些[分离的关注点](https://docs.microsoft.com/zh-cn/dotnet/standard/modern-web-apps-azure-architecture/architectural-principles#separation-of-concerns)的类中。","source":"_posts/浅谈ASP.Net Core 依赖关系注入.md","raw":"---\ntitlie: 浅谈ASP.Net Core 依赖关系注入\ndate: 2020/5/6\ncategories: \n- Tuorial\ntags: \n- C#\n- ASP.Net Core\n- Micorsoft\n---\n\n事由是想写一个教材征订管理系统, 里面涉及到自行设计的一个购物车的数据模型类`Cart`和一个管理类`CartManager`, 遇到了相关问题, 所以仔细去读了官方的文档, 现在记录如下:\n<!--more-->\n### 概述\n\n#### 1. 依赖项是什么\n\n依赖项 , 是另一个对象所需的任何对象。\n\n比如我的`CartManager`对象, 就需要依赖Cart对象, `ICollection`对象和`BookBill`对象等等.\n\n#### 2. 为什么要做依赖关系注入\n\n在这里, 官方文档举了一个更加简单的例子, 假设有一个被其他类依赖的`MyDependency`类, 其他类需要调用这个类的`WriteMessage`方法:\n\n```c#\npublic class MyDependency\n{\n    public MyDependency()\n    {\n    }\n\n    public Task WriteMessage(string message)\n    {\n        Console.WriteLine(\n            $\"MyDependency.WriteMessage called. Message: {message}\");\n\n        return Task.FromResult(0);\n    }\n}\n```\n\n稍微分析一下这个类, 除了一个什么都不做的构造函数之外, 还有一个打印消息的函数, 这个函数返回Task. \n\n ```c#\npublic class IndexModel : PageModel\n{\n    MyDependency _dependency = new MyDependency();\n\n    public async Task OnGetAsync()\n    {\n        await _dependency.WriteMessage(\n            \"IndexModel.OnGetAsync created this message.\");\n    }\n}\n ```\n\n接下来, 我们开始在一个页面的`PageModel`实例化一个`Mydependency`对象, 这个是一个常规操作. \n\n```c#\npublic class IndexModel : PageModel\n{\n    MyDependency _dependency = new MyDependency();\n\n    public async Task OnGetAsync()\n    {\n        await _dependency.WriteMessage(\n            \"IndexModel.OnGetAsync created this message.\");\n    }\n}\n```\n\n但是这样做是有问题的: \n\n1. 如果你需要修改`MyDependency`, 就必须在类的源代码里卖弄修改, 这个很可怕, 万一你还有别的地方用到了这个类, 那你修改就全改了, 会很麻烦. \n\n   \t2. 如果`Mydependency`具有其他依赖关系, 就必须在`Mydependency`里面进行配置. 然后又有很多类需要依赖于`MyDpendency`,  这就导致这种代码到处都是, 很分散. \n      \t3. 如果你想单独测试这个部分, 你会发现现在这个架构很艰难. \n\n为了解决这些问题, 我们通过依赖关系注入来实现这个类. 它可以做到以下几点:\n\n1. 使用接口或者基类抽象化依赖关系的实现, 你的依赖关系是通过类继承来实现的, 你想换一个依赖, 继承另一个类就可以了.\n2. 可以同时注册服务容器中的依赖关系. ASP.NET Core 提供了一个内置服务容器`IServiceProvider`, 这个服务已经在应用的`Startup.ConfigureService`方法中注册. \n3. 将服务注入到使用它的类的构造函数中. 框架负责创建依赖的对象. 如果不再需要这个对象了, 就可以直接由框架进行处理. \n\n### 如何依赖关系注入\n\n按照依赖关系注入的思想, 当你需要自己做一个服务的时候 (比如我要做的这个`CartManager`), 你需要先写一个这个服务的接口(`interface`), 然后根据这个接口写一个类来实现这个服务, 之后再注册\n\n所以我们可以这样来实现这个框架:\n\n```c#\npublic interface IMyDependency\n{\n    Task WriteMessage(string message);\n}\n```\n\n这是个`interface`, 这个`interface`. \n\n这个接口里面的`WriteMessage`由一个`MyDependency`这个类的实现. \n\n```c#\npublic class MyDependency : IMyDependency\n{\n    private readonly ILogger<MyDependency> _logger;\n\n    public MyDependency(ILogger<MyDependency> logger)\n    {\n        _logger = logger;\n    }\n\n    public Task WriteMessage(string message)\n    {\n        _logger.LogInformation(\n            \"MyDependency.WriteMessage called. Message: {MESSAGE}\", \n            message);\n\n        return Task.FromResult(0);\n    }\n}\n```\n\n接下来, 你需要在`Startup.cs`中的服务注册里把你的服务注册进去: \n\n```c#\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddRazorPages();\n\n    services.AddScoped<IMyDependency, MyDependency>();//这里是你注册的服务\n    \n    services.AddTransient<IOperationTransient, Operation>();\n    services.AddScoped<IOperationScoped, Operation>();\n    services.AddSingleton<IOperationSingleton, Operation>();\n    services.AddSingleton<IOperationSingletonInstance>(new Operation(Guid.Empty));\n\n    // OperationService depends on each of the other Operation types.\n    services.AddTransient<OperationService, OperationService>();\n}\n```\n\n使用的注册函数根据你这个服务的生存期不同, 可以选择以下几种生存期\n\n* 暂时\n\n  暂时生存期服务 ([AddTransient](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addtransient)) 是每次从服务容器进行请求时创建的。 这种生存期适合轻量级、 无状态的服务。\n\n* 范围内\n\n  作用域生存期服务 ([AddScoped](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addscoped)) 以每个客户端请求（连接）一次的方式创建。\n\n  注意: 在中间件内使用有作用域的服务时，请将该服务注入至 `Invoke` 或 `InvokeAsync` 方法。 请不要通过构造函数注入进行注入，因为它会强制服务的行为与单一实例类似。 这个在自定义中间件中会有专门的说明. \n\n* 单例\n\n  单一实例生存期服务 ([AddSingleton](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addsingleton)) 是在第一次请求时（或者在运行 `Startup.ConfigureServices` 并且使用服务注册指定实例时）创建的。 每个后续请求都使用相同的实例。 如果应用需要单一实例行为，建议允许服务容器管理服务的生存期。 不要实现单一实例设计模式并提供用户代码来管理对象在类中的生存期。\n\n  注意: 从单一实例解析有作用域的服务很危险。 当处理后续请求时，它可能会导致服务处于不正确的状态。\n\n\n\n### 依赖实现的配置\n\n当你的依赖(比如`MyDependency`) 需要ASP.Net内置的其他服务时, 可以直接用传参的方式传进来 因为其他的服务已经被注册过了. 但是如果你的构造函数需要内置类型(比如`string`), 你就没办法给`string`做服务注册. 这个时候你可以通过`Configuration`或者`Options`来注入这些类型: \n\n```c#\npublic class MyDependency : IMyDependency\n{\n    public MyDependency(IConfiguration config)\n    {\n        var myStringValue = config[\"MyStringKey\"];\n\n        // Use myStringValue\n    }\n\n    ...\n}\n```\n\n### 大功告成\n\n你终于可以在页面中像使用其他框架提供的服务一样使用自己的服务了. \n\n```c#\npublic class IndexModel : PageModel\n{\n    private readonly IMyDependency _myDependency;//定义一个服务的私有变量\n\n    public IndexModel(\n        IMyDependency myDependency, //构造函数中接受这个变量\n        OperationService operationService,\n        IOperationTransient transientOperation,\n        IOperationScoped scopedOperation,\n        IOperationSingleton singletonOperation,\n        IOperationSingletonInstance singletonInstanceOperation)\n    {\n        _myDependency = myDependency;//赋值\n        OperationService = operationService;\n        TransientOperation = transientOperation;\n        ScopedOperation = scopedOperation;\n        SingletonOperation = singletonOperation;\n        SingletonInstanceOperation = singletonInstanceOperation;\n    }\n\n    public OperationService OperationService { get; }\n    public IOperationTransient TransientOperation { get; }\n    public IOperationScoped ScopedOperation { get; }\n    public IOperationSingleton SingletonOperation { get; }\n    public IOperationSingletonInstance SingletonInstanceOperation { get; }\n\n    public async Task OnGetAsync()\n    {\n        //愉快地使用这个服务提供的方法\n        await _myDependency.WriteMessage(\n            \"IndexModel.OnGetAsync created this message.\");\n    }\n}\n```\n\n### 一些建议\n\n#### 如何从创建一个适合依赖关系注入的服务:\n\n最佳做法是：\n\n* 设计服务以使用依赖关系注入来获取其依赖关系。\n\n- 避免有状态的、静态类和成员。 将应用设计为改用单一实例服务，可避免创建全局状态。\n- 避免在服务中直接实例化依赖类。 直接实例化将代码耦合到特定实现。\n- 不在应用类中包含过多内容，确保设计规范，并易于测试。\n\n\n\n如果一个类似乎有过多的注入依赖关系，这通常表明该类拥有过多的责任并且违反了[单一责任原则 (SRP)](https://docs.microsoft.com/zh-cn/dotnet/standard/modern-web-apps-azure-architecture/architectural-principles#single-responsibility)。 尝试通过将某些职责移动到一个新类来重构类。 请记住，Razor Pages 页模型类和 MVC 控制器类应关注用户界面问题。 业务规则和数据访问实现细节应保留在适用于这些[分离的关注点](https://docs.microsoft.com/zh-cn/dotnet/standard/modern-web-apps-azure-architecture/architectural-principles#separation-of-concerns)的类中。","slug":"浅谈ASP.Net Core 依赖关系注入","published":1,"updated":"2020-05-05T16:25:11.291Z","title":"浅谈ASP.Net Core 依赖关系注入","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9u4lyc4000ss2s9bfpr8vtf","content":"<p>事由是想写一个教材征订管理系统, 里面涉及到自行设计的一个购物车的数据模型类<code>Cart</code>和一个管理类<code>CartManager</code>, 遇到了相关问题, 所以仔细去读了官方的文档, 现在记录如下:</p>\n<a id=\"more\"></a>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><h4 id=\"1-依赖项是什么\"><a href=\"#1-依赖项是什么\" class=\"headerlink\" title=\"1. 依赖项是什么\"></a>1. 依赖项是什么</h4><p>依赖项 , 是另一个对象所需的任何对象。</p>\n<p>比如我的<code>CartManager</code>对象, 就需要依赖Cart对象, <code>ICollection</code>对象和<code>BookBill</code>对象等等.</p>\n<h4 id=\"2-为什么要做依赖关系注入\"><a href=\"#2-为什么要做依赖关系注入\" class=\"headerlink\" title=\"2. 为什么要做依赖关系注入\"></a>2. 为什么要做依赖关系注入</h4><p>在这里, 官方文档举了一个更加简单的例子, 假设有一个被其他类依赖的<code>MyDependency</code>类, 其他类需要调用这个类的<code>WriteMessage</code>方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyDependency</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public MyDependency()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Task WriteMessage(string message)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(</span><br><span class=\"line\">            $&quot;MyDependency.WriteMessage called. Message: &#123;message&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        return Task.FromResult(0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>稍微分析一下这个类, 除了一个什么都不做的构造函数之外, 还有一个打印消息的函数, 这个函数返回Task. </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IndexModel : PageModel</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MyDependency _dependency &#x3D; new MyDependency();</span><br><span class=\"line\"></span><br><span class=\"line\">    public async Task OnGetAsync()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        await _dependency.WriteMessage(</span><br><span class=\"line\">            &quot;IndexModel.OnGetAsync created this message.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来, 我们开始在一个页面的<code>PageModel</code>实例化一个<code>Mydependency</code>对象, 这个是一个常规操作. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IndexModel : PageModel</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MyDependency _dependency &#x3D; new MyDependency();</span><br><span class=\"line\"></span><br><span class=\"line\">    public async Task OnGetAsync()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        await _dependency.WriteMessage(</span><br><span class=\"line\">            &quot;IndexModel.OnGetAsync created this message.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是这样做是有问题的: </p>\n<ol>\n<li><p>如果你需要修改<code>MyDependency</code>, 就必须在类的源代码里卖弄修改, 这个很可怕, 万一你还有别的地方用到了这个类, 那你修改就全改了, 会很麻烦. </p>\n<pre><code>2. 如果`Mydependency`具有其他依赖关系, 就必须在`Mydependency`里面进行配置. 然后又有很多类需要依赖于`MyDpendency`,  这就导致这种代码到处都是, 很分散. \n   3. 如果你想单独测试这个部分, 你会发现现在这个架构很艰难. </code></pre></li>\n</ol>\n<p>为了解决这些问题, 我们通过依赖关系注入来实现这个类. 它可以做到以下几点:</p>\n<ol>\n<li>使用接口或者基类抽象化依赖关系的实现, 你的依赖关系是通过类继承来实现的, 你想换一个依赖, 继承另一个类就可以了.</li>\n<li>可以同时注册服务容器中的依赖关系. ASP.NET Core 提供了一个内置服务容器<code>IServiceProvider</code>, 这个服务已经在应用的<code>Startup.ConfigureService</code>方法中注册. </li>\n<li>将服务注入到使用它的类的构造函数中. 框架负责创建依赖的对象. 如果不再需要这个对象了, 就可以直接由框架进行处理. </li>\n</ol>\n<h3 id=\"如何依赖关系注入\"><a href=\"#如何依赖关系注入\" class=\"headerlink\" title=\"如何依赖关系注入\"></a>如何依赖关系注入</h3><p>按照依赖关系注入的思想, 当你需要自己做一个服务的时候 (比如我要做的这个<code>CartManager</code>), 你需要先写一个这个服务的接口(<code>interface</code>), 然后根据这个接口写一个类来实现这个服务, 之后再注册</p>\n<p>所以我们可以这样来实现这个框架:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IMyDependency</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Task WriteMessage(string message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是个<code>interface</code>, 这个<code>interface</code>. </p>\n<p>这个接口里面的<code>WriteMessage</code>由一个<code>MyDependency</code>这个类的实现. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyDependency : IMyDependency</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly ILogger&lt;MyDependency&gt; _logger;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyDependency(ILogger&lt;MyDependency&gt; logger)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger &#x3D; logger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Task WriteMessage(string message)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogInformation(</span><br><span class=\"line\">            &quot;MyDependency.WriteMessage called. Message: &#123;MESSAGE&#125;&quot;, </span><br><span class=\"line\">            message);</span><br><span class=\"line\"></span><br><span class=\"line\">        return Task.FromResult(0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来, 你需要在<code>Startup.cs</code>中的服务注册里把你的服务注册进去: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    services.AddRazorPages();</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddScoped&lt;IMyDependency, MyDependency&gt;();&#x2F;&#x2F;这里是你注册的服务</span><br><span class=\"line\">    </span><br><span class=\"line\">    services.AddTransient&lt;IOperationTransient, Operation&gt;();</span><br><span class=\"line\">    services.AddScoped&lt;IOperationScoped, Operation&gt;();</span><br><span class=\"line\">    services.AddSingleton&lt;IOperationSingleton, Operation&gt;();</span><br><span class=\"line\">    services.AddSingleton&lt;IOperationSingletonInstance&gt;(new Operation(Guid.Empty));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; OperationService depends on each of the other Operation types.</span><br><span class=\"line\">    services.AddTransient&lt;OperationService, OperationService&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用的注册函数根据你这个服务的生存期不同, 可以选择以下几种生存期</p>\n<ul>\n<li><p>暂时</p>\n<p>暂时生存期服务 (<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addtransient\" target=\"_blank\" rel=\"noopener\">AddTransient</a>) 是每次从服务容器进行请求时创建的。 这种生存期适合轻量级、 无状态的服务。</p>\n</li>\n<li><p>范围内</p>\n<p>作用域生存期服务 (<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addscoped\" target=\"_blank\" rel=\"noopener\">AddScoped</a>) 以每个客户端请求（连接）一次的方式创建。</p>\n<p>注意: 在中间件内使用有作用域的服务时，请将该服务注入至 <code>Invoke</code> 或 <code>InvokeAsync</code> 方法。 请不要通过构造函数注入进行注入，因为它会强制服务的行为与单一实例类似。 这个在自定义中间件中会有专门的说明. </p>\n</li>\n<li><p>单例</p>\n<p>单一实例生存期服务 (<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addsingleton\" target=\"_blank\" rel=\"noopener\">AddSingleton</a>) 是在第一次请求时（或者在运行 <code>Startup.ConfigureServices</code> 并且使用服务注册指定实例时）创建的。 每个后续请求都使用相同的实例。 如果应用需要单一实例行为，建议允许服务容器管理服务的生存期。 不要实现单一实例设计模式并提供用户代码来管理对象在类中的生存期。</p>\n<p>注意: 从单一实例解析有作用域的服务很危险。 当处理后续请求时，它可能会导致服务处于不正确的状态。</p>\n</li>\n</ul>\n<h3 id=\"依赖实现的配置\"><a href=\"#依赖实现的配置\" class=\"headerlink\" title=\"依赖实现的配置\"></a>依赖实现的配置</h3><p>当你的依赖(比如<code>MyDependency</code>) 需要ASP.Net内置的其他服务时, 可以直接用传参的方式传进来 因为其他的服务已经被注册过了. 但是如果你的构造函数需要内置类型(比如<code>string</code>), 你就没办法给<code>string</code>做服务注册. 这个时候你可以通过<code>Configuration</code>或者<code>Options</code>来注入这些类型: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyDependency : IMyDependency</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public MyDependency(IConfiguration config)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var myStringValue &#x3D; config[&quot;MyStringKey&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; Use myStringValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"大功告成\"><a href=\"#大功告成\" class=\"headerlink\" title=\"大功告成\"></a>大功告成</h3><p>你终于可以在页面中像使用其他框架提供的服务一样使用自己的服务了. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IndexModel : PageModel</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IMyDependency _myDependency;&#x2F;&#x2F;定义一个服务的私有变量</span><br><span class=\"line\"></span><br><span class=\"line\">    public IndexModel(</span><br><span class=\"line\">        IMyDependency myDependency, &#x2F;&#x2F;构造函数中接受这个变量</span><br><span class=\"line\">        OperationService operationService,</span><br><span class=\"line\">        IOperationTransient transientOperation,</span><br><span class=\"line\">        IOperationScoped scopedOperation,</span><br><span class=\"line\">        IOperationSingleton singletonOperation,</span><br><span class=\"line\">        IOperationSingletonInstance singletonInstanceOperation)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _myDependency &#x3D; myDependency;&#x2F;&#x2F;赋值</span><br><span class=\"line\">        OperationService &#x3D; operationService;</span><br><span class=\"line\">        TransientOperation &#x3D; transientOperation;</span><br><span class=\"line\">        ScopedOperation &#x3D; scopedOperation;</span><br><span class=\"line\">        SingletonOperation &#x3D; singletonOperation;</span><br><span class=\"line\">        SingletonInstanceOperation &#x3D; singletonInstanceOperation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public OperationService OperationService &#123; get; &#125;</span><br><span class=\"line\">    public IOperationTransient TransientOperation &#123; get; &#125;</span><br><span class=\"line\">    public IOperationScoped ScopedOperation &#123; get; &#125;</span><br><span class=\"line\">    public IOperationSingleton SingletonOperation &#123; get; &#125;</span><br><span class=\"line\">    public IOperationSingletonInstance SingletonInstanceOperation &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public async Task OnGetAsync()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;愉快地使用这个服务提供的方法</span><br><span class=\"line\">        await _myDependency.WriteMessage(</span><br><span class=\"line\">            &quot;IndexModel.OnGetAsync created this message.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一些建议\"><a href=\"#一些建议\" class=\"headerlink\" title=\"一些建议\"></a>一些建议</h3><h4 id=\"如何从创建一个适合依赖关系注入的服务\"><a href=\"#如何从创建一个适合依赖关系注入的服务\" class=\"headerlink\" title=\"如何从创建一个适合依赖关系注入的服务:\"></a>如何从创建一个适合依赖关系注入的服务:</h4><p>最佳做法是：</p>\n<ul>\n<li>设计服务以使用依赖关系注入来获取其依赖关系。</li>\n</ul>\n<ul>\n<li>避免有状态的、静态类和成员。 将应用设计为改用单一实例服务，可避免创建全局状态。</li>\n<li>避免在服务中直接实例化依赖类。 直接实例化将代码耦合到特定实现。</li>\n<li>不在应用类中包含过多内容，确保设计规范，并易于测试。</li>\n</ul>\n<p>如果一个类似乎有过多的注入依赖关系，这通常表明该类拥有过多的责任并且违反了<a href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/modern-web-apps-azure-architecture/architectural-principles#single-responsibility\" target=\"_blank\" rel=\"noopener\">单一责任原则 (SRP)</a>。 尝试通过将某些职责移动到一个新类来重构类。 请记住，Razor Pages 页模型类和 MVC 控制器类应关注用户界面问题。 业务规则和数据访问实现细节应保留在适用于这些<a href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/modern-web-apps-azure-architecture/architectural-principles#separation-of-concerns\" target=\"_blank\" rel=\"noopener\">分离的关注点</a>的类中。</p>\n","site":{"data":{}},"excerpt":"<p>事由是想写一个教材征订管理系统, 里面涉及到自行设计的一个购物车的数据模型类<code>Cart</code>和一个管理类<code>CartManager</code>, 遇到了相关问题, 所以仔细去读了官方的文档, 现在记录如下:</p>","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><h4 id=\"1-依赖项是什么\"><a href=\"#1-依赖项是什么\" class=\"headerlink\" title=\"1. 依赖项是什么\"></a>1. 依赖项是什么</h4><p>依赖项 , 是另一个对象所需的任何对象。</p>\n<p>比如我的<code>CartManager</code>对象, 就需要依赖Cart对象, <code>ICollection</code>对象和<code>BookBill</code>对象等等.</p>\n<h4 id=\"2-为什么要做依赖关系注入\"><a href=\"#2-为什么要做依赖关系注入\" class=\"headerlink\" title=\"2. 为什么要做依赖关系注入\"></a>2. 为什么要做依赖关系注入</h4><p>在这里, 官方文档举了一个更加简单的例子, 假设有一个被其他类依赖的<code>MyDependency</code>类, 其他类需要调用这个类的<code>WriteMessage</code>方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyDependency</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public MyDependency()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Task WriteMessage(string message)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(</span><br><span class=\"line\">            $&quot;MyDependency.WriteMessage called. Message: &#123;message&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        return Task.FromResult(0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>稍微分析一下这个类, 除了一个什么都不做的构造函数之外, 还有一个打印消息的函数, 这个函数返回Task. </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IndexModel : PageModel</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MyDependency _dependency &#x3D; new MyDependency();</span><br><span class=\"line\"></span><br><span class=\"line\">    public async Task OnGetAsync()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        await _dependency.WriteMessage(</span><br><span class=\"line\">            &quot;IndexModel.OnGetAsync created this message.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来, 我们开始在一个页面的<code>PageModel</code>实例化一个<code>Mydependency</code>对象, 这个是一个常规操作. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IndexModel : PageModel</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MyDependency _dependency &#x3D; new MyDependency();</span><br><span class=\"line\"></span><br><span class=\"line\">    public async Task OnGetAsync()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        await _dependency.WriteMessage(</span><br><span class=\"line\">            &quot;IndexModel.OnGetAsync created this message.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是这样做是有问题的: </p>\n<ol>\n<li><p>如果你需要修改<code>MyDependency</code>, 就必须在类的源代码里卖弄修改, 这个很可怕, 万一你还有别的地方用到了这个类, 那你修改就全改了, 会很麻烦. </p>\n<pre><code>2. 如果`Mydependency`具有其他依赖关系, 就必须在`Mydependency`里面进行配置. 然后又有很多类需要依赖于`MyDpendency`,  这就导致这种代码到处都是, 很分散. \n   3. 如果你想单独测试这个部分, 你会发现现在这个架构很艰难. </code></pre></li>\n</ol>\n<p>为了解决这些问题, 我们通过依赖关系注入来实现这个类. 它可以做到以下几点:</p>\n<ol>\n<li>使用接口或者基类抽象化依赖关系的实现, 你的依赖关系是通过类继承来实现的, 你想换一个依赖, 继承另一个类就可以了.</li>\n<li>可以同时注册服务容器中的依赖关系. ASP.NET Core 提供了一个内置服务容器<code>IServiceProvider</code>, 这个服务已经在应用的<code>Startup.ConfigureService</code>方法中注册. </li>\n<li>将服务注入到使用它的类的构造函数中. 框架负责创建依赖的对象. 如果不再需要这个对象了, 就可以直接由框架进行处理. </li>\n</ol>\n<h3 id=\"如何依赖关系注入\"><a href=\"#如何依赖关系注入\" class=\"headerlink\" title=\"如何依赖关系注入\"></a>如何依赖关系注入</h3><p>按照依赖关系注入的思想, 当你需要自己做一个服务的时候 (比如我要做的这个<code>CartManager</code>), 你需要先写一个这个服务的接口(<code>interface</code>), 然后根据这个接口写一个类来实现这个服务, 之后再注册</p>\n<p>所以我们可以这样来实现这个框架:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IMyDependency</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Task WriteMessage(string message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是个<code>interface</code>, 这个<code>interface</code>. </p>\n<p>这个接口里面的<code>WriteMessage</code>由一个<code>MyDependency</code>这个类的实现. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyDependency : IMyDependency</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly ILogger&lt;MyDependency&gt; _logger;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyDependency(ILogger&lt;MyDependency&gt; logger)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger &#x3D; logger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Task WriteMessage(string message)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogInformation(</span><br><span class=\"line\">            &quot;MyDependency.WriteMessage called. Message: &#123;MESSAGE&#125;&quot;, </span><br><span class=\"line\">            message);</span><br><span class=\"line\"></span><br><span class=\"line\">        return Task.FromResult(0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来, 你需要在<code>Startup.cs</code>中的服务注册里把你的服务注册进去: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    services.AddRazorPages();</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddScoped&lt;IMyDependency, MyDependency&gt;();&#x2F;&#x2F;这里是你注册的服务</span><br><span class=\"line\">    </span><br><span class=\"line\">    services.AddTransient&lt;IOperationTransient, Operation&gt;();</span><br><span class=\"line\">    services.AddScoped&lt;IOperationScoped, Operation&gt;();</span><br><span class=\"line\">    services.AddSingleton&lt;IOperationSingleton, Operation&gt;();</span><br><span class=\"line\">    services.AddSingleton&lt;IOperationSingletonInstance&gt;(new Operation(Guid.Empty));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; OperationService depends on each of the other Operation types.</span><br><span class=\"line\">    services.AddTransient&lt;OperationService, OperationService&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用的注册函数根据你这个服务的生存期不同, 可以选择以下几种生存期</p>\n<ul>\n<li><p>暂时</p>\n<p>暂时生存期服务 (<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addtransient\" target=\"_blank\" rel=\"noopener\">AddTransient</a>) 是每次从服务容器进行请求时创建的。 这种生存期适合轻量级、 无状态的服务。</p>\n</li>\n<li><p>范围内</p>\n<p>作用域生存期服务 (<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addscoped\" target=\"_blank\" rel=\"noopener\">AddScoped</a>) 以每个客户端请求（连接）一次的方式创建。</p>\n<p>注意: 在中间件内使用有作用域的服务时，请将该服务注入至 <code>Invoke</code> 或 <code>InvokeAsync</code> 方法。 请不要通过构造函数注入进行注入，因为它会强制服务的行为与单一实例类似。 这个在自定义中间件中会有专门的说明. </p>\n</li>\n<li><p>单例</p>\n<p>单一实例生存期服务 (<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addsingleton\" target=\"_blank\" rel=\"noopener\">AddSingleton</a>) 是在第一次请求时（或者在运行 <code>Startup.ConfigureServices</code> 并且使用服务注册指定实例时）创建的。 每个后续请求都使用相同的实例。 如果应用需要单一实例行为，建议允许服务容器管理服务的生存期。 不要实现单一实例设计模式并提供用户代码来管理对象在类中的生存期。</p>\n<p>注意: 从单一实例解析有作用域的服务很危险。 当处理后续请求时，它可能会导致服务处于不正确的状态。</p>\n</li>\n</ul>\n<h3 id=\"依赖实现的配置\"><a href=\"#依赖实现的配置\" class=\"headerlink\" title=\"依赖实现的配置\"></a>依赖实现的配置</h3><p>当你的依赖(比如<code>MyDependency</code>) 需要ASP.Net内置的其他服务时, 可以直接用传参的方式传进来 因为其他的服务已经被注册过了. 但是如果你的构造函数需要内置类型(比如<code>string</code>), 你就没办法给<code>string</code>做服务注册. 这个时候你可以通过<code>Configuration</code>或者<code>Options</code>来注入这些类型: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyDependency : IMyDependency</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public MyDependency(IConfiguration config)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var myStringValue &#x3D; config[&quot;MyStringKey&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; Use myStringValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"大功告成\"><a href=\"#大功告成\" class=\"headerlink\" title=\"大功告成\"></a>大功告成</h3><p>你终于可以在页面中像使用其他框架提供的服务一样使用自己的服务了. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IndexModel : PageModel</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IMyDependency _myDependency;&#x2F;&#x2F;定义一个服务的私有变量</span><br><span class=\"line\"></span><br><span class=\"line\">    public IndexModel(</span><br><span class=\"line\">        IMyDependency myDependency, &#x2F;&#x2F;构造函数中接受这个变量</span><br><span class=\"line\">        OperationService operationService,</span><br><span class=\"line\">        IOperationTransient transientOperation,</span><br><span class=\"line\">        IOperationScoped scopedOperation,</span><br><span class=\"line\">        IOperationSingleton singletonOperation,</span><br><span class=\"line\">        IOperationSingletonInstance singletonInstanceOperation)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _myDependency &#x3D; myDependency;&#x2F;&#x2F;赋值</span><br><span class=\"line\">        OperationService &#x3D; operationService;</span><br><span class=\"line\">        TransientOperation &#x3D; transientOperation;</span><br><span class=\"line\">        ScopedOperation &#x3D; scopedOperation;</span><br><span class=\"line\">        SingletonOperation &#x3D; singletonOperation;</span><br><span class=\"line\">        SingletonInstanceOperation &#x3D; singletonInstanceOperation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public OperationService OperationService &#123; get; &#125;</span><br><span class=\"line\">    public IOperationTransient TransientOperation &#123; get; &#125;</span><br><span class=\"line\">    public IOperationScoped ScopedOperation &#123; get; &#125;</span><br><span class=\"line\">    public IOperationSingleton SingletonOperation &#123; get; &#125;</span><br><span class=\"line\">    public IOperationSingletonInstance SingletonInstanceOperation &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public async Task OnGetAsync()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;愉快地使用这个服务提供的方法</span><br><span class=\"line\">        await _myDependency.WriteMessage(</span><br><span class=\"line\">            &quot;IndexModel.OnGetAsync created this message.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一些建议\"><a href=\"#一些建议\" class=\"headerlink\" title=\"一些建议\"></a>一些建议</h3><h4 id=\"如何从创建一个适合依赖关系注入的服务\"><a href=\"#如何从创建一个适合依赖关系注入的服务\" class=\"headerlink\" title=\"如何从创建一个适合依赖关系注入的服务:\"></a>如何从创建一个适合依赖关系注入的服务:</h4><p>最佳做法是：</p>\n<ul>\n<li>设计服务以使用依赖关系注入来获取其依赖关系。</li>\n</ul>\n<ul>\n<li>避免有状态的、静态类和成员。 将应用设计为改用单一实例服务，可避免创建全局状态。</li>\n<li>避免在服务中直接实例化依赖类。 直接实例化将代码耦合到特定实现。</li>\n<li>不在应用类中包含过多内容，确保设计规范，并易于测试。</li>\n</ul>\n<p>如果一个类似乎有过多的注入依赖关系，这通常表明该类拥有过多的责任并且违反了<a href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/modern-web-apps-azure-architecture/architectural-principles#single-responsibility\" target=\"_blank\" rel=\"noopener\">单一责任原则 (SRP)</a>。 尝试通过将某些职责移动到一个新类来重构类。 请记住，Razor Pages 页模型类和 MVC 控制器类应关注用户界面问题。 业务规则和数据访问实现细节应保留在适用于这些<a href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/modern-web-apps-azure-architecture/architectural-principles#separation-of-concerns\" target=\"_blank\" rel=\"noopener\">分离的关注点</a>的类中。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9u4lyaz0000s2s91cfce364","category_id":"ck9u4lybf0004s2s96aov8h2z","_id":"ck9u4lybx000fs2s9fja7e25q"},{"post_id":"ck9u4lyba0002s2s9dxbbe8f5","category_id":"ck9u4lybq000bs2s97apu7e7h","_id":"ck9u4lyc1000ms2s988mgdzpn"},{"post_id":"ck9u4lybv000es2s97twc4c9g","category_id":"ck9u4lybf0004s2s96aov8h2z","_id":"ck9u4lyc4000qs2s9ev764yfv"},{"post_id":"ck9u4lybh0006s2s93tfh5xfa","category_id":"ck9u4lybx000gs2s9b10ee4f3","_id":"ck9u4lyc6000us2s9h51v9e96"},{"post_id":"ck9u4lyc3000ps2s917oq6lz4","category_id":"ck9u4lyc1000ns2s941p39lag","_id":"ck9u4lyc9000ys2s95ol8542k"},{"post_id":"ck9u4lybm0008s2s9agta1twu","category_id":"ck9u4lyc1000ns2s941p39lag","_id":"ck9u4lyca0011s2s90itz1x5i"},{"post_id":"ck9u4lyc4000ss2s9bfpr8vtf","category_id":"ck9u4lybx000gs2s9b10ee4f3","_id":"ck9u4lycf0013s2s952fqc6ay"},{"post_id":"ck9u4lybp000as2s9gdn93cgw","category_id":"ck9u4lybq000bs2s97apu7e7h","_id":"ck9u4lych0015s2s9cbcd6o0d"},{"post_id":"ck9u4lybs000ds2s98edxa4ls","category_id":"ck9u4lyc1000ns2s941p39lag","_id":"ck9u4lycj0018s2s9bs8557zn"},{"post_id":"ck9u4lyc0000ls2s90epb5hu8","category_id":"ck9u4lycg0014s2s90dnxfvs0","_id":"ck9u4lyck001bs2s9gji6hbxp"}],"PostTag":[{"post_id":"ck9u4lybs000ds2s98edxa4ls","tag_id":"ck9u4lybg0005s2s95tzygn95","_id":"ck9u4lyby000is2s96w0t54l1"},{"post_id":"ck9u4lybs000ds2s98edxa4ls","tag_id":"ck9u4lybq000cs2s9bq4m1jwp","_id":"ck9u4lyc0000ks2s988x54hfl"},{"post_id":"ck9u4lyaz0000s2s91cfce364","tag_id":"ck9u4lybg0005s2s95tzygn95","_id":"ck9u4lyc4000rs2s95ntrfphh"},{"post_id":"ck9u4lyaz0000s2s91cfce364","tag_id":"ck9u4lybq000cs2s9bq4m1jwp","_id":"ck9u4lyc6000ts2s9hgiz4osv"},{"post_id":"ck9u4lyaz0000s2s91cfce364","tag_id":"ck9u4lyby000hs2s97s9g3pps","_id":"ck9u4lyc9000xs2s989g503x7"},{"post_id":"ck9u4lyba0002s2s9dxbbe8f5","tag_id":"ck9u4lyc2000os2s9er68bdye","_id":"ck9u4lyc9000zs2s9hsul205g"},{"post_id":"ck9u4lybh0006s2s93tfh5xfa","tag_id":"ck9u4lyc6000ws2s97ajr4tnh","_id":"ck9u4lyci0017s2s9fp4x4d6g"},{"post_id":"ck9u4lybh0006s2s93tfh5xfa","tag_id":"ck9u4lycb0012s2s9gdy73y1o","_id":"ck9u4lycj0019s2s93aqqgc1j"},{"post_id":"ck9u4lybm0008s2s9agta1twu","tag_id":"ck9u4lybg0005s2s95tzygn95","_id":"ck9u4lycl001ds2s9gpam29hb"},{"post_id":"ck9u4lybm0008s2s9agta1twu","tag_id":"ck9u4lybq000cs2s9bq4m1jwp","_id":"ck9u4lycm001es2s97dh63ds0"},{"post_id":"ck9u4lybm0008s2s9agta1twu","tag_id":"ck9u4lyby000hs2s97s9g3pps","_id":"ck9u4lycn001gs2s9bbvogfls"},{"post_id":"ck9u4lybp000as2s9gdn93cgw","tag_id":"ck9u4lycl001cs2s90633du4g","_id":"ck9u4lycn001hs2s96c9uas81"},{"post_id":"ck9u4lybv000es2s97twc4c9g","tag_id":"ck9u4lybg0005s2s95tzygn95","_id":"ck9u4lyco001js2s99ens5cme"},{"post_id":"ck9u4lybv000es2s97twc4c9g","tag_id":"ck9u4lycm001fs2s9d516bxyf","_id":"ck9u4lyco001ks2s97u3lept0"},{"post_id":"ck9u4lybz000js2s981j5eydu","tag_id":"ck9u4lyc6000ws2s97ajr4tnh","_id":"ck9u4lycr001ns2s95au52sil"},{"post_id":"ck9u4lybz000js2s981j5eydu","tag_id":"ck9u4lycb0012s2s9gdy73y1o","_id":"ck9u4lycs001os2s98f0z5azw"},{"post_id":"ck9u4lyc0000ls2s90epb5hu8","tag_id":"ck9u4lybg0005s2s95tzygn95","_id":"ck9u4lycv001ss2s91ovh5ao9"},{"post_id":"ck9u4lyc0000ls2s90epb5hu8","tag_id":"ck9u4lycq001ms2s9a2cn1kbf","_id":"ck9u4lycw001ts2s95qbw9ik3"},{"post_id":"ck9u4lyc0000ls2s90epb5hu8","tag_id":"ck9u4lycs001ps2s9aqm5e1cg","_id":"ck9u4lycw001vs2s93j0iccgn"},{"post_id":"ck9u4lyc0000ls2s90epb5hu8","tag_id":"ck9u4lyct001qs2s95l4kenz4","_id":"ck9u4lycy001ws2s9bx50260y"},{"post_id":"ck9u4lyc3000ps2s917oq6lz4","tag_id":"ck9u4lycu001rs2s9dhvvcy6t","_id":"ck9u4lyd0001zs2s96olm0lis"},{"post_id":"ck9u4lyc3000ps2s917oq6lz4","tag_id":"ck9u4lycw001us2s97hvq66vh","_id":"ck9u4lyd00020s2s9cu8vaal9"},{"post_id":"ck9u4lyc3000ps2s917oq6lz4","tag_id":"ck9u4lycy001xs2s90srrbox5","_id":"ck9u4lyd00022s2s921ytdh8s"},{"post_id":"ck9u4lyc4000ss2s9bfpr8vtf","tag_id":"ck9u4lycz001ys2s97cokg4s9","_id":"ck9u4lyd20024s2s96ec74su2"},{"post_id":"ck9u4lyc4000ss2s9bfpr8vtf","tag_id":"ck9u4lyd00021s2s99i149xj3","_id":"ck9u4lyd20025s2s91ri1eviz"},{"post_id":"ck9u4lyc4000ss2s9bfpr8vtf","tag_id":"ck9u4lyd10023s2s9h3zhehsb","_id":"ck9u4lyd20026s2s9g1dyg6g4"}],"Tag":[{"name":"ROS","_id":"ck9u4lybg0005s2s95tzygn95"},{"name":"Ubuntu","_id":"ck9u4lybq000cs2s9bq4m1jwp"},{"name":"Raspberry Pi","_id":"ck9u4lyby000hs2s97s9g3pps"},{"name":"自主招生","_id":"ck9u4lyc2000os2s9er68bdye"},{"name":"C++","_id":"ck9u4lyc6000ws2s97ajr4tnh"},{"name":"libstd","_id":"ck9u4lycb0012s2s9gdy73y1o"},{"name":"Hello","_id":"ck9u4lycl001cs2s90633du4g"},{"name":"Network","_id":"ck9u4lycm001fs2s9d516bxyf"},{"name":"Robotics","_id":"ck9u4lycq001ms2s9a2cn1kbf"},{"name":"xmu.edu.cn","_id":"ck9u4lycs001ps2s9aqm5e1cg"},{"name":"xmu-tuf","_id":"ck9u4lyct001qs2s95l4kenz4"},{"name":"System","_id":"ck9u4lycu001rs2s9dhvvcy6t"},{"name":"Win10","_id":"ck9u4lycw001us2s97hvq66vh"},{"name":"Config","_id":"ck9u4lycy001xs2s90srrbox5"},{"name":"C#","_id":"ck9u4lycz001ys2s97cokg4s9"},{"name":"ASP.Net Core","_id":"ck9u4lyd00021s2s99i149xj3"},{"name":"Micorsoft","_id":"ck9u4lyd10023s2s9h3zhehsb"}]}}